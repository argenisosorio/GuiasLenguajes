==========================
Guía de TailwindCSS by dM
==========================

TailwindCSS es un framework CSS que permite un desarrollo ágil, basado en
clases de utilidad que se pueden aplicar con facilidad en el código HTML y unos
flujos de desarrollo que permiten optimizar mucho el peso del código CSS.

===============================================
Ventajas y características de usar TailwindCSS
===============================================

-Es altamente personalizable.

-Tiene patrones de utilidad comunes.

-Se puede optimizar usando PurgeCSS.

-Permite la creación de diseños complejos y responsive de forma libre.

-Facilita la interacción fluida con la comunidad.

-A diferencia de Bootstrap, no está basado en componentes, sino en componentes
de utilidad, o Utility first. Esto quiere decir, que en ligar de tener clases
que incorporan múltiples estilos para crear componentes de interfaz gráfica,
TailwindCSS propone clases atómicas, que aplican estilo muy específico para el
elemento. Por ejemplo: Color de un texto, color de fondo de una sección,
redondeo de bordes de un botón, sombreado, etc.

-A diferenciade Bootstrap donde tienes por ejemplo un conjunto reducido de
modelos de botones para poder utilizar, con TailwindCSS basado en las clases de
utilidad puede hacer los botones que tu quieras.

-Optimización: Generalmente se requiere aplicar todo el CSS de Bootstrap en un
proyecto, es decir 160kb o más a un proyecto, con TailwindCSS optimizas, usando
solamente el CSS que necesitas en tu proyecto el cual se compila para que pese
aún menos.

-Con Bootstrap tu CSS crece, ya que al final usas las clases y los componentes
de Bootstrap pero terminas personalizando esas clases, y luchando con el
Bootstrap para que tu estilos personalizados estén por encima de la reglas del
framework. Con TailwindCSS no necesariamente crece, ya que aplicando las clases
de utilidad puedes obtener todas las personalizaciones que necesites.

-Desarrolla solamente en HTML: Con TailwindCSS no necesitas editar el HTML y el
CSS a las vez, porque las clases Utility first te permiten definir el aspecto de
manera precisa en un único lugar que es el HTML.

===========
Desventajas
===========

-Degradas la separación de responsabilidades HTML / CSS.

-Ensucias el HTML colocalndo demasiadas clases.

-Repites demasiadas veces las mismas clases en el código HTML.

-Pierdes la reusabilidad de los componentes.

Sin embargo estas desventajas se pueden minimizar mucho usando la optimización
que provee TailwindCSS y sus componentes hermanos. Llegan a ser prácticamente
nulas las desventajas si se usan las reglas de optimización.

Un ejemplo de esto sería usar PurgeCSS

==================
Integrarlo vía CDN
==================

<link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">

========
Ejemplos
========

<!doctype html>
<html lang="en">
  <head>
    <title>XXX</title>
    <meta charset="UTF-8">
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
  </head>
<body>
  <article class="mb-5 bg-teal-100 border border-gray-200 rounded shadow-md">
    <img src="..." alt="..." class="rounded rounded-b-none">
    <div class="p-3">
      <h3 class="mb-1 text-xl font-bold">Los megalitos del Alentejo</h3>
      <p class="mb-4">Acercarse al megalitismo más impactante de la Península Ibérica en el Alentejo</p>
      <a class="px-4 py-2 font-bold tracking-wider text-white uppercase bg-orange-600 rounded-xl" href="#">Primary</a>
    </div>
  </article>
</body>
</html>

-----

<!doctype html>
<html lang="en">
  <head>
    <title>XXX</title>
    <meta charset="UTF-8">
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
  </head>
<body>
  <h1 class="text-3xl font-light text-center text-orange-600">Hola mundo!!</h1>
  <p class="mt-4 text-xl italic text-center text-gray-800">Lorem ipsum dolor sit, amet consectetur adipisicing elit.</p>
  <div class="mt-4 text-center">
    <a href="#" class="px-4 py-2 font-bold tracking-wider text-white uppercase bg-orange-600 rounded-xl">Entrar</a>
  </div>
</body>
</html>

========================================
Nuevo proyecto con PostCSS y TailwindCSS
========================================

PostCSS es una herramienta frontend que permite hacer transformaciones en el
código CSS mediante JavaScript.

Dispone de infinidad de plugins para realizar todo tipo de transformaciones en
el CSS.

Instalación
===========

Inicializamos un proyecto de node con:

$ npm init -y

El -y es para que se salte el cuestionario inicial por completo, esto nos crea
el archivo package.json.

$ npm install -D postcss postcss-cli

Luego podemos instalar autoprefixer, que lo que hace es crear los prefijos
necesarios para que las características novedosas del css funcionen en todos
los navegadores, ya no se tendrá que hacer a mano sino que autoprefixer lo hará
automáticamente.

$ npm install -D autoprefixer

Configurar PostCSS
==================

Se debe crear un archivo llamado postcss.config.js en la raíz del proyecto y su
contenido debe ser el siguiente:

module.exports = {
    plugins: [
        require('autoprefixer')
    ]
}

Con esto ya hemos requerido el plugin que se debe utilizar para lanzar los
prefijos.

Ejecutar PostCSS
================

Creamos los scripts de npm necesarios para ejecutar PostCSS, esto se hace
moduficando el package.json, quedaría de la siguiente manera:

"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "build": "postcss src/styles.css --output css/styles.css",
  "watch": "postcss src/styles.css --output css/styles.css --watch"
},

El comando build lo que hace es compilar cuando se quiere llevar a producción,
como vemos en el comando especificamos 2 rutas, una que es donde tenemos el css
que vamos a compilar, y la otra es el directorio donde va a volcar el css
compilado.

Ahora creamos la carpeta src/ y dentro creamos el archivo styles.css

Y el comando watch simplemente es para que es un proceso que está pendiente de
cualquier cambio que haya en los archivos css y recompile los archivos
automáticamente.

Ahora vamos a incluír TailwindCSS:

$ npm install tailwindcss

Ahora creamos el archivo de configuración de TailwindCSS, que se llama
"tailwind.config.js". Este archivo lo puedes crear a mano, pero es más cómodo
hacerlo a través de la línea de comandos. Para ello, estando situados con el
terminal en la raíz del proyecto, lanzamos el siguiente comando:

$ npx tailwindcss init

El archivo de configuración de TailwindCSS tendrá un código inicial como este:

module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}

Ahora hay que editar el archivo de configuración de PostCSS para que también
requiera de TailwindCSS.

module.exports = {
    plugins: [
        require('tailwindcss'),
        require('autoprefixer')
    ]
}

Debe hacerse en ese orden.

Ahora agregamos TailwindCSS a nuestro CSS, esto lo haremos en el archivo CSS
del proyecto, el que se procesa mediante PostCSS, tenemos que agregar las
directivas de tailwind necesarias para que se generen las clases de utilidad.

Estas serían:

@tailwind base;
@tailwind components;
@tailwind utilities;

Deben ir en este orden, las agregamos a src/styles.css.

Ahora solo debemos probar que esté funcionando nuestro proyecto hasta aquí, esto
lo harémos ejecutando:

$ npm run build

Esto nos debería crear el directorio css/ y el fichero styles.css que debe
contener los estilos de TailwindCSS, unas 182.000 líneas aproximadamente.

Ahora ya podemos empezar a practicar con los estilos de TailwindCSS.

Creamos el fichero index.html y le agregamos el siguiente contenido:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <h1 class="text-3xl font-light text-center text-orange-600">Hola mundo!!</h1>
    <p class="mt-4 text-xl italic text-center text-gray-800">Lorem ipsum dolor sit, amet consectetur adipisicing elit.</p>
    <div class="mt-4 text-center">
        <a href="#" class="px-4 py-2 font-bold tracking-wider text-white uppercase bg-orange-600 rounded-xl">Entrar</a>
    </div>
</body>
</html>

En este index.html ya estamos llamando a css/styles.css y agregamos ejemplos de
h1, p, y div con clases de utilidad de ejemplo, ahora solo visitamos index.html
y debemos apreciar los estilos de TailwindCSS.

========
PurgeCSS
========

Es una herramienta para eliminar CSS no utilizado.

Cuando esté construyendo un sitio web, puede decidir usar un framework CSS como
TailwindCSS, Bootstrap, MaterializeCSS, Foundation, etc. Pero solo usará un
pequeño conjunto del framework, y se incluirán muchos estilos CSS no utilizados.

Aquí es donde entra en juego PurgeCSS. PurgeCSS analiza su contenido y sus
archivos CSS. Luego, hace coincidir los selectores utilizados en sus archivos
con el de sus archivos de contenido. Elimina los selectores no utilizados de su
CSS, lo que resulta en archivos CSS más pequeños.

Container como Bootstrap
========================

<div class="container mx-auto px-4 mt-4">
    <p class="mb-4">
        Acercarse al megalitismo más impactante de la Península Ibérica en el
        Alentejo.
    </p>
</div>

Explicación de las clases utilizadas:

container: Esta clase establece un ancho máximo para el contenedor y centraliza
su contenido. Es similar al contenedor de Bootstrap.

mx-auto: Esta clase establece los márgenes horizontales a "auto", lo que ayuda a
centrar el contenedor en el viewport.

px-4: Estas clases establecen un relleno horizontal de tamaño 4 en la escala de
espaciado de Tailwind. Puedes ajustar el valor según tus necesidades.

mt-4: Establece un margen superior de 4 píxeles en la escala de espaciado de
Tailwind. Puedes ajustar este valor según tus necesidades.

Componente parecido a una card
==============================

<div class="rounded-2xl bg-white shadow-lg ring-1 ring-gray-900/5 sm:col-span-2 xl:col-start-2 xl:row-end-1">
    <div class="container mx-auto px-4 mt-4">
        <p>“Learn from yesterday , live for taday , hop for tomorrow. The important thing is not to stop questioning. ”</p>
    </div>
    <div class="flex flex-wrap items-center gap-x-4 gap-y-4 border-t border-gray-900/10 px-6 py-4 sm:flex-nowrap">
        <img class="h-10 w-10 flex-none rounded-full bg-gray-50" src="https://insidetheperimeter.ca/wp-content/uploads/2015/11/Albert_einstein_by_zuzahin-d5pcbug-WikiCommons.jpg" alt="">
        <div class="flex-auto">
            <div class="font-semibold">Albert Einstein</div>
        </div>
    </div>
</div>

Template por secciones, sencillo como base de una landing page
==============================================================

<!-- Navbar -->
<nav class="bg-blue-500 text-white p-4">
    <div class="container mx-auto">
    <ul class="flex justify-center">
        <li class="mr-6"><a href="#" class="hover:text-gray-300">Enlace 1</a></li>
        <li class="mr-6"><a href="#" class="hover:text-gray-300">Enlace 2</a></li>
        <li><a href="#" class="hover:text-gray-300">Enlace 3</a></li>
    </ul>
    </div>
</nav>

<!-- Sección 1 (Fondo blanco) -->
<section class="bg-white py-16">
    <div class="container mx-auto">
    <!-- Contenido de la sección 1 -->
    <h1 class="text-4xl font-bold mb-4">Welcome</h1>
    <p class="text-gray-600">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
</section>

<!-- Sección 2 (Fondo gris) -->
<section class="bg-gray-200 py-16">
    <div class="container mx-auto">
    <!-- Contenido de la sección 2 -->
    <h2 class="text-3xl font-bold mb-4">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</h2>
    <p class="text-gray-700">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
</section>

<!-- Sección 3 (Fondo blanco) -->
<section class="bg-white py-16">
    <div class="container mx-auto">
    <!-- Contenido de la sección 3 -->
    <h2 class="text-3xl font-bold mb-4">Contact</h2>
    <p class="text-gray-600">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
</section>

<!-- Footer -->
<footer class="bg-gray-900 text-white py-8">
    <div class="container mx-auto text-center">
    <!-- Contenido del footer -->
    <p>&copy; 2024 Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
</footer>

Fuente
======

ChatGPT

===========================================
Hello World con inertiajs y tailwind y vue3
===========================================

<script setup>
import { Head, Link } from '@inertiajs/vue3';

// Define la variable message y asigna el valor "Hello World"
const message = "Hello World";
</script>

<template>
    <Head title="Welcome" />

    <!-- Sección 1 (Fondo blanco) -->
    <section class="bg-white py-16">
        <div class="container mx-auto">
            <!-- Contenido de la sección 1 -->
            <h1 class="text-4xl font-bold mb-4">Welcome {{ message }}</h1>
            <p class="text-gray-600">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        </div>
    </section>
</template>

Fuente
======

ChatGPT
