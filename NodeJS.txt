==========================
Guía de NodeJS y NPM by dM
==========================

=============
Qué es NodeJS
=============

Node.js es un entorno en tiempo de ejecución multiplataforma, de código abierto,
para la capa del servidor (pero no limitándose a ello) basado en el lenguaje de
programación ECMAScript, asíncrono, con I/O de datos en una arquitectura
orientada a eventos y basado en el motor V8 de Google. Fue creado con el enfoque
de ser útil en la creación de programas de red altamente escalables, como por
ejemplo, servidores web.

==========
Qué es NPM
==========

NPM es el manejador de paquetes por defecto para Node.js, es como
decir apt para GNU/Linux Debian o PIP para Python.

Instalación de última versión de NodeJS
=======================================

Nota:
Usaremos $ para describir los comandos que se usaran con usuario regular.
Usaremos # para describir los comandos que se usaran con superusuario.

Para instalar la última versión compilaremos el paquete bajado desde
https://nodejs.org/es/

Instalación de NodeJS desde repos de GNU/Linux Debian
=====================================================

Esta opción instalara la última versión de NodeJS disponjible desde el
repositorio, no necesariamente será la última del paquete por lo que
se recomienda la opción desde el PPA oficial de NodeSource descrita mas adelante.

# apt-get install nodejs nodejs-legacy

-----

Verificar la versión instalada de nodejs

$ nodejs -v

-----

Instalar el gestor de paquetes npm

# apt-get install npm

Instalar Node.js desde el PPA oficial de NodeSource
==================================================

# apt-get install curl

# apt-get install build-essential

# curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -

# apt-get install -y nodejs

Si quisiésemos instalar otra versión, el primer comando sería:

4.x: curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
5.x: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -
6.x: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
7.x: curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
8.x: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
9.x: curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
10.x: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -

-----

Verificar la versión instalada de nodejs

$ nodejs -v

=================================================
Descargar e instalar el paquete nodejs usando nvm
=================================================

nvm es un administrador de versiones para node.js, diseñado para ser instalado
por el usuario e invocado por shell. nvm funciona en cualquier shell compatible
con POSIX (sh, dash, ksh, zsh, bash), en particular en estas plataformas: unix,
macOS y Windows WSL.

Se recomienda seguir la documentación disponible desde:
https://linuxconfig.org/how-to-install-node-js-on-ubuntu-16-04-xenial-xerus-linux-server
pero para este manual recomendamos los siguientes pasos:

Procedimiento de instalación mediante el script nativo de node **nvm** el cual
permite más control en cuanto a la versión de **node** y **npm** a ser
instalada.

Instalar los prerequisitos del S.O. mediante el siguiente comando:

$ sudo apt install build-essential libssl-dev

Descargar el script de instalación más reciente mediante **curl**, para ello
se requiere ejecutar el comando:

$ sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/{version}/install.sh | bash

Se debe sustituir la número de versión con la más reciente publicada la
cual se puede encontrar [aquí](https://github.com/nvm-sh/nvm/releases), ejemplo:

$ sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash

Lo siguiente es configurar el acceso del nuevo script **NVM** con el siguiente
comando:

$ . ~/.profile

Esto permitira acceder al comando nvm desde cualquier ruta, una vez realizada
la configuración, se procederá a verificar el listado de versiones de **node**
disponibles en el repositorio para lo cual se require ejecutar el comando:

$ nvm ls-remote | grep -i lts

Esto debe mostrar un listado de versiones de node que correspondan
a las versiones **LTS**, ejemplo:

v10.15.3   (LTS: Dubnium)
v10.16.0   (LTS: Dubnium)
v10.16.1   (LTS: Dubnium)
v10.16.2   (LTS: Dubnium)
v10.16.3   (Latest LTS: Dubnium)

Ahora procedemos a la instalación de la versión de node más actualizada para lo
cual se ejecutará el comando:

$ nvm install 10.16.3

Una vez instalado NodeJS comprobamos la correcta instalación con el siguiente
comando:

$ node -v

Los comandos anteriores nos instalaran NodeJS y también npm, por lo cual
comprobamos su correcta instalación con el siguiente comando:

$ npm -v

Usar una versión específica
===========================

Si se tienen varias versiones insaladas se pude especificar que se use una en
esa sesión:

$ nvm use 10.16.3

Desinstalar una versión de node con nvm especificando la versión
================================================================

$ nvm uninstall 10.16.3

===========================
Eliminar NodeJS del sistema
===========================

# apt-get --purge remove node

# apt-get purge --auto-remove nodejs

=======================
El archivo package.json
=======================

Es el responsable de almacenar el nombre de las dependencias de node instaladas
catalogándolas principalmente en dos tipos: dependencias de desarrollo y
dependencias de la aplicación.

Al mirar dentro de este archivo, si bien hay algunas cosas que podemos reconocer
de manera inmediata, hay algunos valores y textos que es muy probable que no
sepamos que significan ni como llegaron ahí.

¿Qué es el package.json?
========================

De cierta forma, podemos considerar este package.json como un manifiesto de
nuestro proyecto.

Históricamente, Node ha trabajado con una herramienta para administrar paquetes
llamada npm. Esta herramienta, que normalmente se instala junto con Node, tiene
dos roles fundamentales:

-Manejar la publicación de un proyecto al registro público de npm (para que
otros puedan descargarlo y utilizarlo como dependencia en sus propios proyectos).

-Administrar las dependencias de tu proyecto.

Para esto, guarda un registro en un archivo llamado, justamente, package.json.

Dentro de este archivo se definen y manejan características como:


-Nombre de tu proyecto.
-Versión.
-Dependencias.
-Repositorio.
-Autores.
-Licencia.

A través de este archivo, finalmente, se puede garantizar la integridad del
proyecto. Es decir, podemos asegurar que quienes tengan una copia del mismo,
podrán acceder a las mismas propiedades y sincronizar entre múltiples partes
cada vez que decidan hacer un cambio. De cierta forma, podemos considerar este
package.json como un manifiesto de nuestro proyecto.

Por ejemplo, consideremos el siguiente escenario:

Dos personas están trabajando en el mismo proyecto, con copias independientes en
cada uno de sus equipos. El primero de ellos determina que para completar la
nueva funcionalidad, va a necesitar implementar una nueva librería al proyecto.

Antiguamente, sin manejo de dependencias, era necesario hacer una de dos cosas:

-Incluir la librería (1 o múltiples archivo(s)) manualmente en el directorio del
proyecto, potencialmente aumentando el peso del proyecto de manera considerable.

-No incluir la librería, pero comunicarle a cada persona que obtuviera una copia
del mismo que antes de trabajar en el proyecto necesitaría instalar esta nueva
dependencia (buena forma de hacer nuevos amigos, poco óptimo en términos de
tiempo).

Con el uso de administradores de dependencias, ya estos pasos no son necesarios.
Ahora cada persona que decida obtener una copia del proyecto, desde ahora al
final de los tiempos, puede instalar todas y cada una de las dependencias que
tengamos declaradas en este “manifiesto” sin la necesidad de incluir una copia
de éstas en ningún otro lado más que ahí.

Cabe mencionar que si bien muchas características del package.json parecieran
ser específicas para proyectos publicados en el registro de npm (como librerías)
también aplican para proyectos cuya finalidad no es ser publicados en ningún
registro (como por ejemplo aplicaciones Web o móviles, juegos y otros), pero que
si se benefician de las utilidades relacionadas a la administración de
dependencias.

¿Cómo crearlo?
==============

Antes de crear un package.json, hay solo una regla a tener en consideración: El
archivo debe ser un JSON de formato válido (no puede ser un objeto literal de JS
exportado desde un archivo), con todas las especificaciones que esto implica
(por ejemplo, cada key debe tener comillas dobles, solo ciertos valores son
válidos, etc.)

Para crearlo, hay 2 formas: hacerlo de forma manual o hacerlo de forma
automática:

===================================
Creando un package.json manualmente
===================================

Si bien es recomendable usar alguno de los asistentes para crear el archivo de
forma automática, en caso de que necesitemos hacerlo de forma manual, es solo
cosa de crear un archivo llamado package.json en la raíz del proyecto e incluir,
como mínimo, la siguiente información:

name.
version.

=======================================
Creando un package.json automáticamente
=======================================

Es la forma más rápida de hacerlo, ya que tanto npm como yarn incluyen un
asistente que nos permite crear un package.json con un solo comando:

$ npm init

El asistente nos hará algunas preguntas para definir la información del proyecto
(nombre, version, archivo de entrada, licencia y repositorio entre otros).

Fuente
======

-https://medium.com/noders/t%C3%BA-yo-y-package-json-9553929fb2e3

====
Yarn
====

Es una herramienta de administración de paquetes para Node llamada. Su
funcionamiento, al menos en cuanto al uso del package.json, es prácticamente
igual.

=============================
Actualizar la versión de node
=============================

Nota: es posible que los comandos requieran sudo, depende de la distribución.

1) Actualiza npm

$ npm install -g npm

2)  Limpiar cache

En la mayoría de los casos, realizar esta acción no es necesaria, pero en muchos
tutoriales lo recomiendan al hacer un actualización de este tipo.

$ npm cache clean -f

3) Actualizando Node

Ya está todo preparado para actualizar node a su última versión estable. Una
herramienta muy útil es n, este gestor de paquetes para node nos ofrece muchas
opciones, no solo la actualización, por lo que es muy recomendable tenerlo a
mano.

$ npm install -g n

4) Ahora procedemos a instalar la última versión estable de Node.Js.

$ n stable

O una versión específica

$ n 14.18.2

============================
Actualizar la versión de npm
============================

Nota: es posible que el comando requiera sudo, depende de la distribución.

$ npm install -g npm

====================================
Actualizar lista de paquetes de node
====================================

Este comando actualizará todos los paquetes listados a la última versión.

$ npm update

===============================================================
Probar la ejecución de código Javascript desde la CLI de NodeJS
===============================================================

1) Comprobamos que tengamos node instalado

$ node --version

v14.17.1

2) Acceder al CLI de NodeJS

$ node

Welcome to Node.js v14.17.1.
Type ".help" for more information.
>

3) Probando la función console.log()

> console.log("Hello!");
Hello!
undefined

4) Salir del CLI de NodeJS

> .exit

También con Ctrl + d.

==================================
Ejecutar un archivo .js con NodeJS
==================================

1) Crear a index.js y agregar lo siguiente:

var greet = function(person, greeting) {
    var text = greeting + ', ' + person;
    return text;
};
console.log(greet('Rebecca','hello'));

2) Ejecutar el archivo con:

$ node index.js

Salida:

hello, Rebecca

=============================================
Ejemplo de .gitignore para Proyecto de NodeJS
=============================================

node_modules
build
npm-debug.log
.env
.DS_Store

===========
Live Server
===========

Este es un pequeño servidor de desarrollo con capacidad de recarga en vivo.

Úselo para piratear sus archivos HTML/JavaScript/CSS, pero no para implementar
el sitio final.

No es necesario instalar ningún complemento del navegador ni agregar manualmente
fragmentos de código a sus páginas para que funcione la función de recarga;

Instalación
===========

$ npm install -g live-server

Luego, dentro de la carpete del proyecto, donde exista index.html ejecutamos:

$ live-server

Esto nos permite servir nuestro sitio desde http://127.0.0.1:8080 lo visitamos
en el navegar y listo, si actualizamos el código fuente se actualiza en vivo.

=========================
El error de popperjs/core
=========================

Module not found: Error: Can't resolve '@popperjs/core'

Este error da al ejecutar npm run dev, se soluciona ejecutando lo siguiente:

$ npm i @popperjs/core

$ npm run dev

===========================================
Probar node como sistema backend o API REST
===========================================

Versiones usadas:

NodeJS: v20.11.0
NPM: v10.2.4

Ejemplo práctico paso a paso para crear un servidor API REST básico con Node.js
(usando Express, el framework más popular).

1- Inicializa tu proyecto:

Crea carpeta y entra en ella

$ mkdir mi-backend && cd mi-backend

Inicializa proyecto Node (crea package.json)

$ npm init -y

-2 Instala Express:

Instala el framework web

$ npm install express

3- Crea el archivo principal

Crea un archivo llamado server.js y pega este código:

-----

const express = require('express');
const app = express();
const PORT = 3000;

// Middleware para parsear JSON
app.use(express.json());

// Ruta GET de ejemplo
app.get('/', (req, res) => {
  res.send('¡Hola desde Node.js! 🌟');
});

// Ruta POST para recibir datos
app.post('/saludar', (req, res) => {
  const { nombre } = req.body;
  res.json({ mensaje: `Hola, ${nombre || 'desconocido'}!` });
});

// Inicia el servidor
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT} 🚀`);
});

-----

4- Ejecuta el servidor

$ node server.js

Verás este mensaje en consola:

Servidor corriendo en http://localhost:3000 🚀

5- Prueba tu API

GET: Abre tu navegador en http://localhost:3000

Verás: ¡Hola desde Node.js! 🌟

POST: Usa Postman o curl para enviar datos:

$ curl -X POST http://localhost:3000/saludar -H "Content-Type: application/json" -d '{"nombre":"TuNombre"}'

Respuesta:

{ "mensaje": "Hola, TuNombre!" }

Fuente
======

Deepseek
