===================
Guía de React by dM
===================

Introducción
============

React es una biblioteca Javascript de código abierto diseñada para crear
interfaces de usuario con el objetivo de facilitar el desarrollo de aplicaciones
en una sola página. Es mantenido por Facebook y la comunidad de software libre.
En el proyecto hay más de mil desarrolladores libres.

Declarativo
===========

React te ayuda a crear interfaces de usuario interactivas de forma sencilla.
Diseña vistas simples para cada estado en tu aplicación, y React se encargará de
actualizar y renderizar de manera eficiente los componentes correctos cuando los
datos cambien.

Las vistas declarativas hacen que tu código sea más predecible, por lo tanto,
fácil de depurar.

Basado en componentes
=====================

Crea componentes encapsulados que manejen su propio estado, y conviértelos en
interfaces de usuario complejas.

Ya que la lógica de los componentes está escrita en JavaScript y no en
plantillas, puedes pasar datos de forma sencilla a través de tu aplicación y
mantener el estado fuera del DOM.

Aprende una vez, escríbelo donde sea
====================================

En React no dejamos fuera al resto de tus herramientas tecnológicas, así que
podrás desarrollar nuevas características sin necesidad de volver a escribir el
código existente.

React puede también renderizar desde el servidor usando Node, así como
potencializar aplicaciones móviles usando React Native.

Componentes
===========

Los componentes permiten separar la interfaz de usuario en piezas independientes
reutilizables y pensar en cada pieza de forma aislada. Esta página proporciona
una introducción a la idea de los componentes.

==============================
Hello world en una página html
==============================

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Hello world!</title>
    <!-- Load React. -->
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  </head>
<body>
  <div id="root"></div>
  <div id="box"></div>
  <script type="text/babel">
  ReactDOM.render(
    <h1>Hello React!</h1>,
    document.getElementById('box')
  );

  // Another example

  class Hello extends React.Component {
    render() {
      return <h1>Hello World!</h1>
    }
  }
  ReactDOM.render(<Hello />, document.getElementById('root'))

  </script>
</body>
</html>

===============================
Ejemplo de llamar un componente
===============================

En esta sección, vamos a mostrarte como agregar un componente de React a una
página HTML existente. Puedes seguir los pasos en tu sitio web, o crear un nuevo
archivo HTML para practicar.

Paso 1: Agrega un contenedor del DOM al HTML

Para iniciar, abre la página HTML que deseas editar. Agrega una etiqueta <div>
vacía para marcar el lugar donde deseas visualizar algo con React. Por ejemplo:

<div id="like_button_container"></div>

A este <div> le agregamos un atributo HTML id que es único. Esto nos permitirá
encontrarlo desde el código Javascript más adelante y visualizar un componente
de React adentro de este.

Paso 2: Agrega las etiquetas de script

Lo siguiente es agregar tres etiquetas <script> a la página HTML justo antes de
cerrar la etiqueta </body>:

  <!-- Cargar React. -->
  <!-- Nota: cuando se despliegue, reemplazar "development.js" con "production.min.js". -->
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <!-- Cargamos nuestro componente de React. -->
  <script src="like_button.js"></script>
</body>

Las primeras dos etiquetas cargan React. La tercera carga tu código del
componente.

Paso 3: Crea un componente de React

Crea un archivo llamado like_button.js en el mismo lugar donde tienes tu archivo
HTML y le agregas lo siguiente

'use strict';

const e = React.createElement;

class LikeButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = { liked: false };
  }

  render() {
    if (this.state.liked) {
      return 'You liked this.';
    }

    return e(
      'button',
      { onClick: () => this.setState({ liked: true }) },
      'Like'
    );
  }
}

const domContainer = document.querySelector('#like_button_container');
ReactDOM.render(e(LikeButton), domContainer);

Estas dos líneas de código finales encuentran el <div> que agregamos en nuestro
HTML en el primer paso y muestran el componente de React para nuestro botón de
“Like” dentro del mismo.

¡Eso es todo!

No hay un cuarto paso. Ya agregaste tu primer componente de React a tu sitio
web.

El ejemplo completo sería:

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Add React in One Minute</title>
  </head>
  <body>

    <h2>Add React in One Minute</h2>
    <p>This page demonstrates using React with no build tooling.</p>
    <p>React is loaded as a script tag.</p>

    <!-- We will put our React component inside this div. -->
    <div id="like_button_container"></div>

    <!-- Load React. -->
    <!-- Note: when deploying, replace "development.js" with "production.min.js". -->
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>

    <!-- Load our React component. -->
    <script src="like_button.js"></script>

  </body>
</html>

y

'use strict';

const e = React.createElement;

class LikeButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = { liked: false };
  }

  render() {
    if (this.state.liked) {
      return 'You liked this.';
    }

    return e(
      'button',
      { onClick: () => this.setState({ liked: true }) },
      'Like'
    );
  }
}

const domContainer = document.querySelector('#like_button_container');
ReactDOM.render(e(LikeButton), domContainer);

Si consultamos index.html con el navegador y todo está correcto, debemos ver un
botón que al darle click cambiara a un texto sin recargar la página.

===========
Instalación
===========

1) Comprovar que tenemos node instalado:

$ node -v

2) Usar el siguiente comando para crear nuestra primera aplicación:

$ npx create-react-app my-app

npx lo que permite es instalar un modulo de npm forma global pero temporal, es
decir, lo va a descargar, lo va a instalar y luego lo va a borrar para que no
se quede ocupando espacio en disco. Es una herramienta de ejecución de paquetes
que viene con npm 5.2+.

Create React App no se encarga de la lógica de backend o de bases de datos; tan
solo crea un flujo de construcción para frontend, de manera que lo puedes usar
con cualquier backend. Para ello internamente usa Babel y webpack, pero no
necesitas saber nada de estas herramientas para usar Create React App.

-Babel es un compilador de JavaScript.

-webpack es un paquete de módulos de JavaScript de código abierto. Está hecho
principalmente para JavaScript, pero puede transformar activos de front-end como
HTML, CSS e imágenes si se incluyen los loaders correspondientes.  webpack toma
módulos con dependencias y genera archivos estáticos que representan esos
módulos.

Luego de crear la aplicación e instalar las dependencias, la consola nos
responde con los siguientes comandos que podemos ejecutar

Iniciar el servidor de desarrollo.

$ npm start

-----

Agrupa la aplicación en archivos estáticos para producción. 

$ npm run build

-----

Iniciar pruebas de la aplicación

$ npm test

-----

Elimina esta herramienta y copia las dependencias de compilación, los archivos
de configuración y los scripts en el directorio de la aplicación. Si haces esto,
¡no podrás volver!

$ npm run eject

======================================
Probar la instalación de la aplicación
======================================

Iniciar el servidor de desarrollo.

$ npm start

You can now view my-app in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.1.102:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

Nos levanta el servidor en la dirección localhost:3000 y si la visitamos nos
debe salir el logo de react y el mensaje:

Edit src/App.js and save to reload.

Lo cual nos indica que editando ese archivo cambiaremos el contenido de la
página principal.

=========================
Estructura de un proyecto
=========================

node_modules

package.json

package-lock.json

public:
    favicon.ico
    index.html
    logo192.png
    logo512.png
    manifest.json
    robots.txt

README.md

src
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js

index.html que es la plantilla de la single web aplication, contiene un div con
el id root, que es el que vamos a usar para insertar todo el código que vamos a
generar con React.

================
Primera práctica
================

Eliminamos todo el contenido de la carpeta src, luego creamos un fichero
index.js y le agregamos lo siguiente:

Importamos react y react-dom que ya están instalados, solo hay que llamarlos
para usarlos.

-----

import React from 'react';
import ReactDOM from 'react-dom';

-----

Al disponer de ellas ya podemos usar jsx, que es un lenguaje que en primera
instancia puede parecer que es html, pero no lo es, es JavaScript.

Presentando JSX
===============

Considera la declaración de esta variable:

const element = <h1>Hello, world!</h1>;

Esta curiosa sintaxis de etiquetas no es ni un string ni HTML.

Se llama JSX, y es una extensión de la sintaxis de JavaScript. Recomendamos
usarlo con React para describir cómo debería ser la interfaz de usuario. JSX
puede recordarte a un lenguaje de plantillas, pero viene con todo el poder de
JavaScript.

JSX produce “elementos” de React. Exploraremos como renderizarlos en el DOM en
la siguiente sección. A continuación puedes encontrar lo básico de JSX que será
necesario para empezar.

¿Como puedo escribir comentarios en JSX?
========================================

<div>
  {/* El comentario va aquí */}
  Hello, {name}!
</div>

<div>
  {/* ¡También funciona
  para comentarios multilínea! */}
  Hello, {name}!
</div>

Continuando con el ejemplo, ahora, en index.js usaremos ReactDOM.render, el
método render que nos permite renderizar en el html todos los componentes que
hagamos.

Vamos a renderizar un div que diga Hola mundo!, además de este div, render
recibe otra propiedad o elemento que es el div o el elemento al que queremos
embeberlo, que seria id root.

Quedando así index.js:

-----

import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(<div>Hola mundo!</div>, document.getElementById('root'));

-----

Si corremos el servidor y visitamos la url nos debería mostrar nuestro
Hola mundo!.

Lo siguiente sera crear un componente que contenga la aplicación. El index.js
se deja con el React DOM y el render y otras propiedades más avanzadas y se
crea un componente aparte llamado App.

Entonces vamos a crear un nuevo componente que va a ser App.jsx, puede llamarse
App.js pero con jsx indicamos que es un componente de React.

En este archivo creado vamos a importar a react y vamos a exportar una función
App que va a devolver un código fuente.

Ahora nos vamos al index.js y vamos a importar a App y en el reder, en vez de
pasarle el hola mundo le vamos a pasar nuestro componente.

-----

App.jsx

import React from 'react'

export function App() {
  return <div>Hola mundo!!!</div>;
}

-----

y index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { App } from ./App;

ReactDOM.render(< App />, document.getElementById('root'));

-----

Como se ve < App /> luce como un elemento html con la diferencia de que al ser
un componente creado por nosotros, la primera letra siempre será en mayúscula
para que tanto como Reac como nosotros lo reconozcan como un componente.

JSX representa objetos
======================

Babel compila JSX a llamadas de React.createElement().

Estos dos ejemplos son idénticos:

const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);

React.createElement() realiza algunas comprobaciones para ayudarte a escribir código libre de errores, pero, en esencia crea un objeto como este:

// Nota: Esta estructura está simplificada
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};

Estos objetos son llamados “Elementos de React”. Puedes pensar en ellos como descripciones de lo que quieres ver en pantalla. React lee estos objetos y los usa para construir el DOM y mantenerlo actualizado.

===================================
Llamar un archivo css en un pryecto
===================================

Creamos un archivo css, como main.css por ejemplo:

-----

body {
  background-color: gray;
}

-----

y lo llamamos dede index.js tal que:

-----

import React from 'react';
import ReactDOM from 'react-dom';
import { App } from "./App";
import './main.css';

ReactDOM.render(< App />, document.getElementById('root'));

================
Ejemplo de props
================

Conceptualmente, los componentes son como las funciones de JavaScript. Aceptan
entradas arbitrarias (llamadas “props”) y devuelven a React elementos que
describen lo que debe aparecer en la pantalla.

Componentes funcionales y de clase
==================================

La forma más sencilla de definir un componente es escribir una función de
JavaScript:

Welcome.jsx

import React from 'react'

export function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

Esta función es un componente de React válido porque acepta un solo argumento de
objeto “props” (que proviene de propiedades) con datos y devuelve un elemento de
React. Llamamos a dichos componentes “funcionales” porque literalmente son
funciones JavaScript.

Renderizando un componente con props
====================================

index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { Welcome } from "./Welcome";

const element = <Welcome name="Sara" />;
ReactDOM.render(element, document.getElementById('welcome')
);

-----

o directamente:

-----

index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { Welcome } from "./Welcome";

ReactDOM.render(<Welcome name="Sara" />, document.getElementById('welcome')
);

-----

Si revisamos el navegador debemos ver un:

Hello, Sara

Renderizando dos componente con props
=====================================

index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <title>React App</title>
  </head>
  <body>
    <h1>
      Hello my name is <span id="name"></span> and my last name is <span id="last_name"></span>
    </h1>
  </body>
</html>

-----

index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { Name } from "./components/Name";
import { Last_name } from "./components/Last_name";
import './css/main.css';

ReactDOM.render(<Name name="Sarah" />, document.getElementById('name'));
ReactDOM.render(<Last_name last_name="Connor" />, document.getElementById('last_name'));

-----

Name.jsx

import React from 'react'

export function Name(props) {
  return <span>{props.name}</span>;
}

-----

Last_name.jsx

import React from 'react'

export function Last_name(props) {
  return <span>{props.last_name}</span>;
}

-----

Si revisamos el navegador debemos ver un:

Hello my name is Sarah and my last name is Connor

Otro ejemplo más avanzado con props
===================================

index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <title>React App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

-----

index.js

import React from 'react';
import ReactDOM from 'react-dom';
import { App } from "./components/App";
import { Table } from "./components/Table";
import './css/main.css';

const comment = {
  date: new Date(),
  text: 'I hope you enjoy learning React!',
  author: {
    name: 'Oliver Bierhoff',
    avatarUrl: 'https://placekitten.com/g/64/64',
  },
};

ReactDOM.render(
  <App
    date={comment.date}
    text={comment.text}
    author={comment.author}
  />,
  document.getElementById('root')
);

-----

App.jsx

import React from 'react'

function formatDate(date) {
  return date.toLocaleDateString();
}

export function Example(props) {
  return (
    <div>
      <div>
        <img src={props.author.avatarUrl} alt={props.author.name} />
        <div>
          -Name: {props.author.name}
        </div>
      </div>
      <div>
        -Comment: {props.text}
      </div>
      <div>
        -Date: {formatDate(props.date)}
      </div>
    </div>
  );
}

Otrto ejemplo, pasando datos a un enlace html
=============================================

export function Example(props) {
  return (
    <a href={props.url}>
      {props.text}
    </a>
  );
}

ReactDOM.render(
  <Example url="https://www.youtube.com/" text="YouTube" />,
  document.getElementById('example')
  <Example url="https://www.twitter.com/" text="Twitter" />,
  document.getElementById('example2')
);

Composición de componentes
==========================

Los componentes pueden referirse a otros componentes en su salida. Esto nos
permite utilizar la misma abstracción de componente para cualquier nivel de
detalle. Un botón, un cuadro de diálogo, un formulario, una pantalla: en
aplicaciones de React, todos son expresados comúnmente como componentes.

Por ejemplo, podemos crear un componente App que renderiza Name muchas veces:

import React from 'react';
import ReactDOM from 'react-dom';
import { Name } from "./components/Name";
import './css/main.css';

function App() {
  return (
    <div>
      <Name name="Sara" />
      <Name name="Cahal" />
      <Name name="Edite" />
     </div>
  );
}

ReactDOM.render(<App />, document.getElementById('name'));

====================================
Actualizando el elemento renderizado
====================================

Los elementos de React son inmutables. Una vez creas un elemento, no puedes
cambiar sus hijos o atributos. Un elemento es como un fotograma solitario en una
película: este representa la interfaz de usuario en cierto punto en el tiempo.

Con nuestro conocimiento hasta este punto, la única manera de actualizar la
interfaz de usuario es creando un nuevo elemento, y pasarlo a ReactDOM.render().

Considera este ejemplo de un reloj en marcha:

function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));}

setInterval(tick, 1000);

Si vemos el navegador deberíamos ver:

It is 7:36:31 p. m..

=================
Manejando eventos
=================

Manejar eventos en elementos de React es muy similar a manejar eventos con
elementos del DOM. Hay algunas diferencias de sintaxis:

Los eventos de React se nombran usando camelCase, en vez de minúsculas.

Con JSX pasas una función como el manejador del evento, en vez de un string.

Por ejemplo, el HTML:

<button onclick="activateLasers()">
  Activate Lasers
</button>

En React es algo diferente:

<button onClick={activateLasers}>
  Activate Lasers
</button>

Otra diferencia es que en React no puedes retornar false para prevenir el
comportamiento por defecto. Debes, explícitamente, llamar preventDefault. Por
ejemplo, en un HTML plano, para prevenir el comportamiento por defecto de un
enlace de abrir una nueva página, puedes escribir:

<a href="#" onclick="console.log('The link was clicked.'); return false">
  Click me
</a>

En cambio en React, esto podría ser:

function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    alert('The link was clicked.');
  }
  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}

========================
Exportando un componente
========================

Para exportar un componente se puede hacer de la siguiente manera para funciones
y clases:

export function Example() {
  return (
  );
}

ó

export class Example extends React.Component {
  render() {
    return (
    );
  }
}

========================================================
Ejemplo con un Toggle para cambiar el estado de un botón
========================================================

Cuando estás utilizando React, generalmente no necesitas llamar addEventListener
para agregar escuchadores de eventos a un elemento del DOM después de que este
es creado. En cambio, solo debes proveer un manejador de eventos cuando el
elemento se renderiza inicialmente.

Cuando defines un componente usando una clase de ES6, un patrón muy común es que
los manejadores de eventos sean un método de la clase. Por ejemplo, este
componente Toggle renderiza un botón que permite al usuario cambiar el estado
entre “ENCENDIDO” y “APAGADO”:

class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // Este enlace es necesario para hacer que `this` funcione en el callback.
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    // Se usa this.setState() para programar actualizaciones al estado local del
    // componente.
    this.setState(state => ({
    isToggleOn: !state.isToggleOn
    }));
  }
  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

ReactDOM.render(
  <Toggle />,
  document.getElementById('root')
);

Tienes que tener mucho cuidado en cuanto al significado de this en los callbacks
de JSX. En JavaScript, los métodos de clase no están ligados por defecto. Si
olvidas ligar this.handleClick y lo pasas a onClick, this será undefined cuando
se llame la función.

Esto no es un comportamiento especifico de React; esto hace parte de como operan
las funciones JavaScript. Generalmente, si refieres un método sin usar ()
después de este, tal como onClick={this.handleClick}, deberías ligar ese método.

=======================
Renderizado condicional
=======================

En React, puedes crear distintos componentes que encapsulan el comportamiento
que necesitas. Entonces, puedes renderizar solamente algunos de ellos,
dependiendo del estado de tu aplicación.

El renderizado condicional en React funciona de la misma forma que lo hacen las
condiciones en JavaScript. Usa operadores de JavaScript como if o el operador
condicional para crear elementos representando el estado actual, y deja que
React actualice la interfaz de usuario para emparejarlos.

Considera estos dos componentes:

function UserGreeting(props) {
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) {
  return <h1>Please sign up.</h1>;
}

Vamos a crear un componente Greeting que muestra cualquiera de estos componentes
dependiendo si el usuario ha iniciado sesión:

export function Greeting(props) {
  const isLoggedIn = props.isLoggedIn;
  if (isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />;
}

ReactDOM.render(
  // Intentar cambiando isLoggedIn={true}:
  <Greeting isLoggedIn={false} />,
  document.getElementById('root')
);

======================
Variables de elementos
======================

Puedes usar variables para almacenar elementos. Esto puede ayudarte para
renderizar condicionalmente una parte del componente mientras el resto del
resultado no cambia.

Considera estos dos componentes nuevos que representan botones de cierre e
inicio de sesión:

function LoginButton(props) {
  return (
    <button onClick={props.onClick}>
      Login
    </button>
  );
}

function LogoutButton(props) {
  return (
    <button onClick={props.onClick}>
      Logout
    </button>
  );
}

En el siguiente ejemplo, crearemos un componente con estado llamado
LoginControl.

El componente va a renderizar <LoginButton /> o <LogoutButton /> dependiendo de
su estado actual. También va a renderizar un <Greeting /> del ejemplo anterior:

export class LoginControl extends React.Component {
  constructor(props) {
    super(props);
    this.handleLoginClick = this.handleLoginClick.bind(this);
    this.handleLogoutClick = this.handleLogoutClick.bind(this);
    this.state = {isLoggedIn: false};
  }

  handleLoginClick() {
    this.setState({isLoggedIn: true});
  }

  handleLogoutClick() {
    this.setState({isLoggedIn: false});
  }

  render() {
    const isLoggedIn = this.state.isLoggedIn;
    let button;

    if (isLoggedIn) {
      button = <LogoutButton onClick={this.handleLogoutClick} />;
    } else {
      button = <LoginButton onClick={this.handleLoginClick} />;
    }

    return (
      <div>
        <Greeting isLoggedIn={isLoggedIn} />
        {button}
      </div>
    );
  }
}

function UserGreeting(props) {
  return <h1>Welcome back!</h1>;
}

function GuestGreeting(props) {
  return <h1>Please sign up.</h1>;
}

function Greeting(props) {
  const isLoggedIn = props.isLoggedIn;
  if (isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />;
}

function LoginButton(props) {
  return (
    <button onClick={props.onClick}>
      Login
    </button>
  );
}

function LogoutButton(props) {
  return (
    <button onClick={props.onClick}>
      Logout
    </button>
  );
}

======================================
If en una línea con operador lógico &&
======================================

Si bien declarar una variable y usar una sentencia if es una buena forma de
renderizar condicionalmente un componente, a veces podrías querer usar una
sintaxis más corta. Hay algunas formas de hacer condiciones en una línea en JSX,
explicadas a continuación.

Puedes incluir expresiones en JSX envolviéndolas en llaves. Esto incluye el
operador lógico && de JavaScript. Puede ser útil para incluir condicionalmente
un elemento:

-----

import React from 'react'

export function Mailbox(props) {
  const unreadMessages = props.unreadMessages;
  return (
    <div>
      <h1>Hello!</h1>
      {unreadMessages.length > 0 &&
        <h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }
    </div>
  );
}

const messages = ['React', 'Re: React', 'Re:Re: React'];
ReactDOM.render(
  <Mailbox unreadMessages={messages} />,
  document.getElementById('root')
);

-----

Si revisamos el navegador veremos: You have 3 unread messages.

Esto funciona porque en JavaScript, true && expresión siempre evalúa a
expresión, y false && expresión siempre evalúa a false.

=============================================
If-Else en una línea con operador condicional
=============================================

Otro método para el renderizado condicional de elementos en una línea es usar el
operador condicional condición ? true : false de JavaScript.

En el siguiente ejemplo, lo usaremos para renderizar de forma condicional un
pequeño bloque de texto.

render() {
  const isLoggedIn = this.state.isLoggedIn;
  return (
    <div>
      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.    </div>
  );
}

También puede usarse para expresiones más grandes, aunque es menos obvio lo que
está pasando:

render() {
  const isLoggedIn = this.state.isLoggedIn;
  return (
    <div>
      {isLoggedIn        ? <LogoutButton onClick={this.handleLogoutClick} />
        : <LoginButton onClick={this.handleLoginClick} />      }
    </div>  );
}

Al igual que en JavaScript, depende de ti elegir un estilo apropiado en base a
lo que tu y tu equipo consideran más legible. Recuerda también que cuando las
condiciones se vuelven demasiado complejas, puede ser un buen momento para
extraer un componente.

=====================================
Evitar que el componente se renderice
=====================================

En casos excepcionales, es posible que desees que un componente se oculte a sí
mismo aunque haya sido renderizado por otro componente. Para hacer esto,
devuelve null en lugar del resultado de renderizado.

En el siguiente ejemplo, el <WarningBanner /> se renderiza dependiendo del valor
del prop llamado warn. Si el valor del prop es false, entonces el componente no
se renderiza:

import React from 'react'

function WarningBanner(props) {
  if (!props.warn) {
    return null;
  }
  return (
    <div className="warning">
      Warning!
    </div>
  );
}

export class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = {showWarning: true};
    this.handleToggleClick = this.handleToggleClick.bind(this);
  }
  handleToggleClick() {
    this.setState(state => ({
      showWarning: !state.showWarning
    }));
  }
  render() {
    return (
      <div>
        <WarningBanner warn={this.state.showWarning} />
        <button onClick={this.handleToggleClick}>
          {this.state.showWarning ? 'Hide' : 'Show'}
        </button>
      </div>
    );
  }
}

=============
Listas y keys
=============

Primero, vamos a revisar como transformas listas en Javascript.

Dado el código de abajo, usamos la función map() para tomar un array de numbers
y duplicar sus valores. Asignamos el nuevo array devuelto por map() a la
variable doubled y la mostramos:

const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map((number) => number * 2);console.log(doubled);

Este código muestra [2, 4, 6, 8, 10] a la consola.

En React, transformar arrays en listas de elementos es casi idéntico.
Renderizado de Múltiples Componentes

Puedes hacer colecciones de elementos e incluirlos en JSX usando llaves {}.

Debajo, recorreremos el array numbers usando la función map() de Javascript.
Devolvemos un elemento <li> por cada ítem . Finalmente, asignamos el array de
elementos resultante a listItems:

const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =>  <li>{number}</li>);

Incluimos entero el array listItems dentro de un elemento <ul>, y lo renderizamos al DOM:

ReactDOM.render(
  <ul>{listItems}</ul>,  document.getElementById('root')
);

Ejemplo:

const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((numbers) =>
  <li>{numbers}</li>
);

ReactDOM.render(
  <ul>{listItems}</ul>,
  document.getElementById('root')
);

Este código muestra una lista de números entre 1 y 5.

===========
Formularios
===========

Los elementos de formularios en HTML funcionan un poco diferente a otros
elementos del DOM en React, debido a que los elementos de formularios conservan
naturalmente algún estado interno. Por ejemplo, este formulario solamente en
HTML, acepta un solo nombre.

<form>
  <label>
    Name:
    <input type="text" name="name" />
  </label>
  <input type="submit" value="Submit" />
</form>

Este formulario tiene el comportamiento predeterminado en HTML que consiste en
navegar a una nueva página cuando el usuario envía el formulario. Si deseas este
comportamiento en React, simplemente ya funciona así. Pero en la mayoría de
casos, es conveniente tener una función en Javascript que se encargue del envío
del formulario, y que tenga acceso a los datos que el usuario introdujo en el
formulario. La forma predeterminada para conseguir esto es una técnica llamada
“componentes controlados”.

Componentes controlados
=======================

En HTML, los elementos de formularios como los <input>, <textarea> y el <select>
normalmente mantienen sus propios estados y los actualizan de acuerdo a la
interacción del usuario. En React, el estado mutable es mantenido normalmente en
la propiedad estado de los componentes, y solo se actualiza con setState().

Podemos combinar ambos haciendo que el estado de React sea la “única fuente de
la verdad”. De esta manera, los componentes React que rendericen un formulario
también controlan lo que pasa en ese formulario con las subsecuentes entradas
del usuario. Un campo de un formulario cuyos valores son controlados por React
de esta forma es denominado “componente controlado”.

Por ejemplo, si queremos hacer que el ejemplo anterior muestre el nombre que
esta siendo suministrado, podemos escribir el formulario como un componente
controlado:

class NameForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {value: ''};
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(event) {    this.setState({value: event.target.value});  }
  handleSubmit(event) {
    alert('A name was submitted: ' + this.state.value);
    event.preventDefault();
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" value={this.state.value} onChange={this.handleChange} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

Ya que el atributo value es agregado en nuestro elemento del formulario, el
valor mostrado siempre será el de this.state.value, haciendo que el estado de
React sea la fuente de la verdad. Ya que handleChange corre cada vez que una
tecla es oprimida para actualizar el estado de React, el valor mostrado será
actualizado mientras que el usuario escribe.

Con un componente controlado, el valor del input siempre está dirigido por el
estado de React. Si bien esto significa que tendrás que escribir un poco más de
código, ahora podrás pasar también el valor a otros elementos de la interfaz de
usuario, o reiniciarlo desde otros manejadores de eventos.

============
Estilo y CSS
============

¿Cómo agrego clases CSS a los componentes?

Pasa una string como la prop className:

render() {
  return <span className="menu navigation-menu">Menu</span>
}

Es común que las clases CSS dependan de las props o del estado del componente:

render() {
  let className = 'menu';
  if (this.props.isActive) {
    className += ' menu-active';
  }
  return <span className={className}>Menu</span>
}

===============================
Agregar bootstrap a un proyecto
===============================

1) Agregar e instalar el paquete de bootstrap.

$ npm add bootstrap

2) Importar los estilos de bootrap:

{/* La siguiente línea se puede incluir en su archivo src/index.js o App.js */}

import 'bootstrap/dist/css/bootstrap.min.css';

3) Una vez agregado ya puede usar las clases de bootstap en sus componentes:

<div className="container">
</div>

Alternativamente, si está utilizando SASS en su aplicación, puede agregarlo como
se muestra a continuación:

App.scss

@import "~bootstrap/scss/bootstrap";

App.js

import './App.scss';