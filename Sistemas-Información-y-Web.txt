=====================================================
Guía Sobre sistemas de información y web Debian by dM
=====================================================

Convenciones y estándares en desarrollo de software
===================================================

=========================
Programación estructurada
=========================

La programación estructurada es un paradigma de programación orientado a mejorar
la claridad, calidad y tiempo de desarrollo de un programa de computadora
recurriendo únicamente a subrutinas y tres estructuras básicas: secuencia,
selección (if y switch) e iteración (bucles for y while); asimismo, se considera
innecesario y contraproducente el uso de la instrucción de transferencia
incondicional (GOTO), que podría conducir a código espagueti, mucho más difícil
de seguir y de mantener, y fuente de numerosos errores de programación.

Surgió en la década de 1960, particularmente del trabajo de Böhm y Jacopini y un
famoso escrito de 1968: «La sentencia goto, considerada perjudicial», de Edsger
Dijkstra.  Sus postulados se verían reforzados, a nivel teórico, por el teorema
del programa estructurado y, a nivel práctico, por la aparición de lenguajes
como ALGOL, dotado de estructuras de control consistentes y bien formadas.

Ventajas de la programación estructurada

Entre las ventajas de la programación estructurada sobre el modelo anterior (hoy
llamado despectivamente código espagueti), cabe citar las siguientes:

-Los programas son más fáciles de entender, pueden ser leídos de forma
secuencial y no hay necesidad de tener que rastrear saltos de líneas (GOTO)
dentro de los bloques de código para intentar entender la lógica interna.

-La estructura de los programas es clara, puesto que las instrucciones están más
ligadas o relacionadas entre sí.

-Se optimiza el esfuerzo en las fases de pruebas y depuración. El seguimiento de
los fallos o errores del programa (debugging), y con él su detección y
corrección, se facilita enormemente.

-Se reducen los costos de mantenimiento. Análogamente a la depuración, durante
la fase de mantenimiento, modificar o extender los programas resulta más fácil.

-Los programas son más sencillos y más rápidos de confeccionar.

-Se incrementa el rendimiento de los programadores.

Fuentes
=======

-https://es.wikipedia.org/wiki/Programaci%C3%B3n_estructurada

====================
Programación modular
====================

La programación modular es un paradigma de programación que consiste en dividir
un programa en módulos o subprogramas con el fin de hacerlo más legible y
manejable.

Se presenta históricamente como una evolución de la programación estructurada
para solucionar problemas de programación más grandes y complejos de lo que esta
puede resolver.

Al aplicar la programación modular, un problema complejo debe ser dividido en
varios subproblemas más simples, y estos a su vez en otros subproblemas más
simples aún. Esto debe hacerse hasta obtener subproblemas lo suficientemente
simples como para poder ser resueltos fácilmente con algún lenguaje de
programación. Esta técnica se llama refinamiento sucesivo, divide y vencerás o
análisis descendente (Top-Down).

Un 'módulo' es cada una de las partes de un programa que resuelve uno de los
subproblemas en que se divide el problema complejo original. Cada uno de estos
módulos tiene una tarea bien definida y algunos necesitan de otros para poder
operar. En caso de que un módulo necesite de otro, puede comunicarse con este
mediante una interfaz de comunicación que también debe estar bien definida.

Si bien un módulo puede entenderse como una parte de un programa en cualquiera
de sus formas y variados contextos, en la práctica se los suele tomar como
sinónimos de procedimientos y funciones. Pero no necesaria ni estrictamente un
módulo es una función o un procedimiento, ya que el mismo puede contener muchos
de ellos. No debe confundirse el término "módulo" (en el sentido de programación
modular) con términos como "función" o "procedimiento", propios del lenguaje que
lo soporte.

======================
Programación por capas
======================

La programación por capas es un modelo de desarrollo software en el que el
objetivo primordial es la separación (desacoplamiento) de las partes que
componen un sistema software o también una arquitectura cliente-servidor: lógica
de negocios, capa de presentación y capa de datos. De esta forma, por ejemplo,
es sencillo y mantenible crear diferentes interfaces sobre un mismo sistema sin
requerirse cambio alguno en la capa de datos o lógica.

La ventaja principal de este estilo es que el desarrollo se puede llevar a cabo
en varios niveles y, en caso de que sobrevenga algún cambio, solo afectará al
nivel requerido sin tener que revisar entre el código fuente de otros módulos,
dado que se habrá reducido el Acoplamiento informático hasta una interfaz de
paso de mensajes.

Además, permite distribuir el trabajo de creación de una aplicación por niveles;
de este modo, cada grupo de trabajo está totalmente abstraído del resto de
niveles, de forma que basta con conocer la API que existe entre niveles.

En el diseño de sistemas informáticos actual se suelen usar las arquitecturas
multinivel o programación por capas. En dichas arquitecturas a cada nivel se le
confía una misión simple, lo que permite el diseño de arquitecturas escalables
(que pueden ampliarse con facilidad en caso de que las necesidades aumenten).

El más utilizado actualmente es el diseño en tres niveles (o en tres capas). 

Capas y niveles
===============

-Capa de presentación: la que ve el usuario (también se la denomina «capa de
usuario»), presenta el sistema al usuario, le comunica la información y captura
la información del usuario en un mínimo de proceso (realiza un filtrado previo
para comprobar que no hay errores de formato). También es conocida como interfaz
gráfica y debe tener la característica de ser «amigable» (entendible y fácil de
usar) para el usuario. Esta capa se comunica únicamente con la capa de negocio.

-Capa de negocio: es donde residen los programas que se ejecutan, se reciben las
peticiones del usuario y se envían las respuestas tras el proceso. Se denomina
capa de negocio (e incluso de lógica del negocio) porque es aquí donde se
establecen todas las reglas que deben cumplirse. Esta capa se comunica con la
capa de presentación, para recibir las solicitudes y presentar los resultados, y
con la capa de datos, para solicitar al gestor de base de datos almacenar o
recuperar datos de él. También se consideran aquí los programas de aplicación.

-Capa de datos: es donde residen los datos y es la encargada de acceder a los
mismos. Está formada por uno o más gestores de bases de datos que realizan todo
el almacenamiento de datos, reciben solicitudes de almacenamiento o recuperación
de información desde la capa de negocio.

Todas estas capas pueden residir en un único ordenador, si bien lo más usual es
que haya una multitud de ordenadores en donde reside la capa de presentación
(son los clientes de la arquitectura cliente/servidor). Las capas de negocio y
de datos pueden residir en el mismo ordenador, y si el crecimiento de las
necesidades lo aconseja se pueden separar en dos o más ordenadores. Así, si el
tamaño o complejidad de la base de datos aumenta, se puede separar en varios
ordenadores los cuales recibirán las peticiones del ordenador en que resida la
capa de negocio.

Si, por el contrario, fuese la complejidad en la capa de negocio lo que obligase
a la separación, esta capa de negocio podría residir en uno o más ordenadores
que realizarían solicitudes a una única base de datos. En sistemas muy complejos
se llega a tener una serie de ordenadores sobre los cuales corre la capa de
negocio, y otra serie de ordenadores sobre los cuales corre la base de datos.

En una arquitectura de tres niveles, los términos «capas» y «niveles» no
significan lo mismo ni son similares.

El término «capa» hace referencia a la forma como una solución es segmentada
desde el punto de vista lógico:

-Presentación. (Conocida como capa Web en aplicaciones Web o como capa de
usuario en Aplicaciones Nativas)

-Lógica de Negocio. (Conocida como capa Aplicativa)

-Datos. (Conocida como capa de Base de Datos)

En cambio, el término «nivel» corresponde a la forma en que las capas lógicas se
encuentran distribuidas de forma física.

Por ejemplo:

-Una solución de tres capas (presentación, lógica del negocio, datos) que
residen en un solo ordenador (Presentación+lógica+datos). Se dice que la
arquitectura de la solución es de tres capas y un nivel.

-Una solución de tres capas (presentación, lógica del negocio, datos) que
residen en dos ordenadores (Presentación+lógica por un lado; lógica+datos por el
otro lado). Se dice que la arquitectura de la solución es de tres capas y dos
niveles.

===================
Pruebas de software
===================

Las pruebas de software (en inglés software testing) son las investigaciones
empíricas y técnicas cuyo objetivo es proporcionar información objetiva e
independiente sobre la calidad del producto a la parte interesada o stakeholder.
Es una actividad más en el proceso de control de calidad.

Las pruebas son básicamente un conjunto de actividades dentro del desarrollo de
software. Dependiendo del tipo de pruebas, estas actividades podrán ser
implementadas en cualquier momento de dicho proceso de desarrollo. Existen
distintos modelos de desarrollo de software, así como modelos de pruebas. A
cada uno corresponde un nivel distinto de involucramiento en las actividades de
desarrollo.

Pruebas estáticas
=================

Son el tipo de pruebas que se realizan sin ejecutar el código de la aplicación.

Puede referirse a la revisión de documentos, ya que no se hace una ejecución de
código. Esto se debe a que se pueden realizar "pruebas de escritorio" con el
objetivo de seguir los flujos de la aplicación.

Pruebas dinámicas
=================

Todas aquellas pruebas que para su ejecución requieren la ejecución de la
aplicación.

Las pruebas dinámicas permiten el uso de técnicas de caja negra y caja blanca
con mayor amplitud. Debido a la naturaleza dinámica de la ejecución de pruebas
es posible medir con mayor precisión el comportamiento de la aplicación
desarrollada.

Fuentes
=======

-https://es.wikipedia.org/wiki/Pruebas_de_software

===============
Pruebas de humo
===============

En ingeniería de software y pruebas de software, las pruebas de humo (smoke
testing) son una revisión rápida de un producto de software para comprobar que
funciona y no tiene defectos evidentes que interrumpan la operación básica del
mismo. Son pruebas que pretenden hacer una evaluación inicial de la calidad de
un producto de software previo a una recepción formal, ya sea al equipo de
pruebas (quien ejecutará una batería completa de comprobaciones) o al usuario
final.

El nombre es por analogía a las pruebas rudimentarias en ingeniería electrónica,
en las que se comprueba que el encendido de un circuito no causa humo ni
chispas.

Fuentes
=======

-https://es.wikipedia.org/wiki/Pruebas_de_humo

======================
Pruebas de caja blanca
======================

En programación, se denomina cajas blancas a un tipo de pruebas de software qu
se realiza sobre las funciones internas de un módulo. Así como las pruebas de
caja negra ejercitan los requisitos funcionales desde el exterior del módulo,
las de caja blanca están dirigidas a las funciones internas. Entre las técnicas
usadas se encuentran; la cobertura de caminos (pruebas que hagan que se recorran
todos los posibles caminos de ejecución), pruebas sobre las expresiones
lógico-aritméticas, pruebas de camino de datos (definición-uso de variables),
comprobación de bucles (se verifican los bucles para 0,1 e interacciones, y
luego para las interacciones máximas, máximas menos uno y más uno).

Las pruebas de caja blanca se llevan a cabo en primer lugar, sobre un módulo
concreto, para luego realizar las de caja negra sobre varios subsistemas
(integración).

En los sistemas orientados a objetos, las pruebas de caja blanca pueden
aplicarse a los métodos de la clase, pero según varias opiniones, ese esfuerzo
debería dedicarse a otro tipo de pruebas más especializadas (un argumento podría
ser que los métodos de una clase suelen ser menos complejos que los de una
función de programación estructurada). Dentro de las Pruebas de Caja Blanca
encontramos las llamadas coberturas (sentencia, decisión, condición y múltiple
además de los mencionados caminos ciclomáticos propuestos por McCabe).

Este concepto también es utilizado de manera análoga en la teoría general de
sistemas.

Fuentes
=======

-https://es.wikipedia.org/wiki/Caja_blanca_(sistemas)

=====================
Pruebas de caja negra
=====================

En teoría de sistemas y física, una caja negra es un elemento que se estudia
desde el punto de vista de las entradas que recibe y las salidas o respuestas
que produce, sin tener en cuenta su funcionamiento interno. En otras palabras,
de una caja negra nos interesará su forma de interactuar con el medio que le
rodea (en ocasiones, otros elementos que también podrían ser cajas negras)
entendiendo qué es lo que hace, pero sin dar importancia a cómo lo hace. Por
tanto, de una caja negra deben estar muy bien definidas sus entradas y salidas,
es decir, su interfaz; en cambio, no se precisa definir ni conocer los detalles
internos de su funcionamiento.

Justificación
=============

Un sistema formado por módulos que cumplan las características de caja negra
será más fácil de entender ya que permitirá dar una visión más clara del
conjunto. El sistema también será más robusto y fácil de mantener, en caso de
ocurrir un fallo, este podrá ser aislado y abordado más ágilmente.

Caja negra y programación modular
=================================

En programación modular, donde un programa (o un algoritmo) es dividido en
módulos, en la fase de diseño se buscará que cada módulo sea una caja negra
dentro del sistema global que es el programa que se pretende desarrollar, de
esta manera se consigue una independencia entre los módulos que facilita su
implementación separada por un equipo de trabajo donde cada miembro va a
encargarse de implementar una parte (un módulo) del programa global; el
implementador de un módulo concreto deberá conocer como es la comunicación con
los otros módulos (la interfaz), pero no necesitará conocer como trabajan esos
otros módulos internamente; en otras palabras, para el desarrollador de un
módulo, idealmente, el resto de módulos serán cajas negras.

Caja negra vs Cajanegrizar
==========================

Este concepto de caja negra utilizado en física, informática y disciplinas
técnicas o tecnológicas en general, aunque está relacionado, no debe confundirse
con el 'Cajanegrismo'; este es un concepto más vinculado a la sociología que
hace referencia al hecho de que las personas solemos olvidarnos del
funcionamiento interno de las cosas (generalmente nuevos dispositivos
tecnológicos) a medida que nos familiarizamos con ellos y terminamos por
asimilarlos como de uso cotidiano. A este proceso de olvidar el funcionamiento
interno de las cosas se le conoce con el nombre de 'cajanegrizar'.

Se podría decir que la principal diferencia entre ambos conceptos es que
mientras el primero, el estudio de un sistema como una caja negra, es un proceso
de abstracción, el segundo, el 'cajanegrismo', es más bien un proceso de olvido.

Fuentes
=======

-https://es.wikipedia.org/wiki/Caja_negra_(sistemas)

===============
Prueba unitaria
===============

En programación, una prueba unitaria es una forma de comprobar el correcto
funcionamiento de una unidad de código. Por ejemplo en diseño estructurado o en
diseño funcional una función o un procedimiento, en diseño orientado a objetos
una clase. Esto sirve para asegurar que cada unidad funcione correctamente y
eficientemente por separado. Además de verificar que el código hace lo que tiene
que hacer, verificamos que sea correcto el nombre, los nombres y tipos de los
parámetros, el tipo de lo que se devuelve, que si el estado inicial es válido,
entonces el estado final es válido también.

La idea es escribir casos de prueba para cada función no trivial o método en el
módulo, de forma que cada caso sea independiente del resto. Luego, con las
Pruebas de Integración, se podrá asegurar el correcto funcionamiento del sistema
o subsistema en cuestión.

Características
===============

Para que una prueba unitaria tenga la calidad suficiente se deben cumplir los
siguientes requisitos:

-Automatizable: No debería requerirse una intervención manual. Esto es
especialmente útil para integración continua.

-Completas: Deben cubrir la mayor cantidad de código.

-Repetibles o Reutilizables: No se deben crear pruebas que sólo puedan ser
ejecutadas una sola vez. También es útil para integración continua.

-Independientes: La ejecución de una prueba no debe afectar a la ejecución de
otra.

-Profesionales: Las pruebas deben ser consideradas igual que el código, con la
misma profesionalidad, documentación, etc.

Aunque estos requisitos no tienen que ser cumplidos al pie de la letra, se
recomienda seguirlos o de lo contrario las pruebas pierden parte de su función.

Ventajas
========

El objetivo de las pruebas unitarias es aislar cada parte del programa y mostrar
que las partes individuales son correctas. Proporcionan un contrato escrito que
el trozo de código debe satisfacer. Estas pruebas aisladas proporcionan cinco
ventajas básicas:

-Fomentan el cambio: Las pruebas unitarias facilitan que el programador cambie
el código para mejorar su estructura1​ (lo que se ha dado en llamar
refactorización), puesto que permiten hacer pruebas sobre los cambios y así
asegurarse de que los nuevos cambios no han introducido defectos.

-Simplifica la integración: Puesto que permiten llegar a la fase de integración
con un grado alto de seguridad de que el código está funcionando correctamente.
De esta manera se facilitan las pruebas de integración.

-Documenta el código: Las propias pruebas son documentación del código, puesto
que ahí se puede ver cómo utilizarlo.

-Separación de la interfaz y la implementación: Dado que la única interacción
entre los casos de prueba y las unidades bajo prueba son las interfaces de estas
últimas, se puede cambiar cualquiera de los dos sin afectar al otro, a veces
usando objetos maquetados (mock object - maqueta) que habilitan de forma aislada
(unitaria) el comportamiento de objetos complejos.

Los errores están más acotados y son más fáciles de localizar: Dado que tenemos
pruebas unitarias que pueden desenmascararlos.

Limitaciones
============

Es importante darse cuenta de que las pruebas unitarias no descubrirán todos los
errores del código. Algunos enfoques se basan en la generación aleatoria de
objetos para amplificar el alcance de las pruebas de unidad.2 Esta técnica se
conoce como testing aleatorio (RT, por random testing). Por definición, sólo
prueban las unidades por sí solas. Por lo tanto, no descubrirán errores de
integración, problemas de rendimiento y otros problemas que afectan a todo el
sistema en su conjunto. Además, puede no ser trivial anticipar todos los casos
especiales de entradas que puede recibir en realidad la unidad de programa bajo
estudio. Las pruebas unitarias sólo son efectivas si se usan en conjunto con
otras pruebas de software.

Fuentes
=======

-https://es.wikipedia.org/wiki/Prueba_unitaria

====================
Prueba de usabilidad
====================

La prueba de usabilidad por parte del usuario es una técnica usada en el diseño
de interacciones centrado en el usuario para evaluar un producto mediante
pruebas con los usuarios mismos. Esto puede ser visto como una práctica de
usabilidad irreemplazable, dado que entrega información directa de cómo los
usuarios reales utilizan el sistema.  Este es en contraste con los métodos de
inspección de usabilidad donde expertos usan diferentes métodos para evaluar una
interfaz de usuario sin involucrar a usuarios reales.

Las pruebas de usabilidad se enfocan en medir la capacidad de un producto de
fabricación humana en cumplir el propósito para el cual fue diseñado. Ejemplos
de productos que normalmente se benefician de pruebas de usabilidad son comidas,
productos de consumo, sitios web o aplicaciones web, interfaces de usuario,
documentos y dispositivos. Las pruebas de usabilidad miden la usabilidad, o
facilidad de uso, de un objeto específico o un conjunto de objetos, mientras que
los estudios de interacción persona-computador intentan formular los principios
generales.

Las pruebas de usabilidad consisten en seleccionar a un grupo de usuarios de una
aplicación y solicitarles que lleven a cabo las tareas para las cuales fue
diseñada, en tanto el equipo de diseño, desarrollo y otros involucrados toman
nota de la interacción, particularmente de los errores y dificultades con las
que se encuentren los usuarios.

No es necesario que se trate de una aplicación completamente terminada, pudiendo
tratarse de un prototipo.

Métricas de usabilidad
======================

-Exactitud: Número de errores cometidos por los sujetos de prueba y si estos
fueron recuperables o no al usar los datos o procedimientos adecuados.

-Tiempo requerido para concluir la actividad.

-Recuerdo: Qué tanto recuerda el usuario después de un periodo sin usar la
aplicación.

-Respuesta emocional: Cómo se siente el usuario al terminar la tarea (bajo
tensión, satisfecho, molesto, etcétera).

Fuentes
=======

-https://es.wikipedia.org/wiki/Prueba_de_usabilidad

=====================
Prueba de integración
=====================	

Pruebas integrales o pruebas de integración son aquellas que se realizan en el
ámbito del desarrollo de software una vez que se han aprobado las pruebas
unitarias y lo que prueban es que todos los elementos unitarios que componen el
software, funcionan juntos correctamente probándolos en grupo. Se centra
principalmente en probar la comunicación entre los componentes y sus
comunicaciones ya sea hardware o software.

Fuentes
=======

-https://es.wikipedia.org/wiki/Prueba_de_integraci%C3%B3n

====================
Integración continua
====================

La integración continua (continuous integration en inglés) es una práctica de
ingeniería de software que consiste en hacer integraciones automáticas de un
proyecto lo más a menudo posible para así poder detectar fallos cuanto antes.

Entendemos por integración la compilación y ejecución de pruebas de todo un
proyecto.

El proceso suele ser: cada cierto tiempo (horas), descargarse las fuentes desde
el control de versiones (por ejemplo CVS, Git, Subversion, Mercurial o Microsoft
Visual SourceSafe) compilarlo, ejecutar pruebas y generar informes.

Para esto suelen utilizarse aplicaciones como Solano CI, Bamboo, Pipeline,
Apache Continuum, Hudson, Jenkins, GoCD, CruiseControl o Anthill (para proyectos
Java) o CruiseControl.Net, Team Foundation Build para .Net, que se encargan de
controlar las ejecuciones, apoyadas en otras herramientas como Ant o Maven
(también para proyectos Java), o Nant o MSBUILD (para .Net) que se encargan de
realizar las compilaciones, ejecutar las pruebas y realizar los informes.

A menudo la integración continua está asociada con las metodologías de
programación extrema y desarrollo ágil.

Ventajas
========

-Los desarrolladores pueden detectar y solucionar problemas de integración de
forma continua, evitando el caos de última hora cuando se acercan las fechas de
entrega.

-Disponibilidad constante de una versión para pruebas, demos o lanzamientos
anticipados.

-Ejecución inmediata de las pruebas unitarias.

-Monitorización continua de las métricas de calidad del proyecto.

Fuentes
=======

-https://es.wikipedia.org/wiki/Integraci%C3%B3n_continua

=====
CI/CD
=====

En ingeniería de software, CI/CD o CICD generalmente refiere a las prácticas
combinadas de integración continua y entrega continua (también conocida como
despliegue continuo).

Contamos con herramientas para esto en GitLab por ejemplo.

Fuentes
=======

-https://es.wikipedia.org/wiki/CI/CD

================
Entrega continua
================

Entrega continua (continuous delivery en inglés) es un enfoque de la ingeniería
del software en que los equipos de desarrollo producen software en ciclos
cortos, asegurando que el software puede ser liberado en cualquier momento, de
forma confiable.

Apunta a la construcción, prueba, y liberación del software de forma más rápida
y más frecuente. Este enfoque ayuda en la reducción del costo, tiempo, y riesgo
de la liberación de versiones a través de la liberación de versiones más
incrementales a aplicaciones en producción. Un proceso directo y repetible de
liberación es importante para una entrega continua.

Etapas
======

-Automatización de la compilación e integración continua: Esta etapa consta de
la creación de archivos binarios a partir del código fuente. A medida que los
desarrolladores implementan nuevas funciones, estas son integradas al código
central, compiladas, y probadas.

-Automatización de pruebas: En esta etapa se prueba rigurosamente la nueva
versión de aplicación, para asegurar que cumple con todos los requerimientos de
calidad del sistema.

-Automatización de implementación: Luego que las etapas anteriores fueron
verificadas, se puede implementar la nueva versión en el ambiente de producción.

Esta implementación se realiza de forma automática, dejando disponibles las
nuevas funcionalidades al usuario, en solo unos minutos.

Fuentes
=======

-https://es.wikipedia.org/wiki/Entrega_continua

===================================
Pruebas de rendimiento del software
===================================

En la ingeniería del software, las pruebas de rendimiento son las pruebas que se
realizan, desde una perspectiva, para determinar lo rápido que realiza una tarea
un sistema en condiciones particulares de trabajo. También puede servir para
validar y verificar otros atributos de la calidad del sistema, tales como la
escalabilidad, fiabilidad y uso de los recursos. Las pruebas de rendimiento son
un subconjunto de la ingeniería de pruebas, una práctica informática que se
esfuerza por mejorar el rendimiento, englobándose en el diseño y la arquitectura
de un sistema, antes incluso del esfuerzo inicial de la codificación.

Fuentes
=======

-https://es.wikipedia.org/wiki/Pruebas_de_rendimiento_del_software

========================
Pruebas de escalabilidad
========================

En informática, se conocen como pruebas de escalabilidad a aquellas pruebas no
funcionales que permiten determinar el grado de escalabilidad que tiene un
sistema. Se entiende como escalable la capacidad que tiene el sistema para que,
sin aplicar cambios drásticos en su configuración, pueda soportar el incremento
de demanda en la operación.

Un ejemplo de escalabilidad es si el sistema soporta la agregación de un nodo
extra en su esquema de balanceo en la capa aplicativa o de base de datos, o un
incremento en la memoria RAM o CPU´s en su infraestructura.

Fuentes
=======

-https://es.wikipedia.org/wiki/Pruebas_de_escalabilidad

=================
Testing aleatorio
=================

En el desarrollo de software, el testing es una de las tareas más importantes,
pero también es compleja y no siempre adoptada correctamente. Las Prueba
unitaria, de carga, integración y funcionales son distintos tipos de testing,
cada uno con objetivos diferentes y aplicados en diferentes etapas del
desarrollo del software. En el testing de unidad se desarrollan pruebas
individuales sobre componentes de un sistema. En la codificación de dichas
pruebas, se busca simular el entorno de dicho componente y descubrir la
presencia de errores o "bugs". Más allá del esfuerzo, las pruebas de unidad
pueden probar la presencia de ciertos errores, pero no pueden asegurar la
ausencia de ellos.

Buscando ampliar el ámbito de las pruebas de unidad, se han aplicado diversas
técnicas que van desde la automatización de pasos o caminos de ejecución, con
valores fijos o componentes predefinidos (hard-coded) o estáticos, y condiciones
específicas, hasta los enfoques basados en la generación de objetos de manera
aleatoria, aplicados a la Programación Orientada a Objetos. El fundamento básico
de este enfoque propuesto es el testing aleatorio.

Tanto la generación de valores aleatorios para testing, como el testing
aleatorio (RT o random testing) en sí no son técnicas nuevas. Por ejemplo, en el
paradigma funcional existe una herramienta para probar especificaciones sobre
funciones llamada QuickCheck. Esta herramienta (escrita en Haskell) y sus ideas
subyacentes son usadas como fundamento para algunas herramientas desarrolladas
para RT en POO.

Fuentes
=======

-https://es.wikipedia.org/wiki/Testing_aleatorio

===============
Refactorización
===============

La refactorización (del inglés refactoring) es una técnica de la ingeniería de
software para reestructurar un código fuente, alterando su estructura interna
sin cambiar su comportamiento externo.

Refactorización de código
=========================

En ingeniería del software, el término refactorización se usa a menudo para
describir la modificación del código fuente sin cambiar su comportamiento, lo
que se conoce informalmente por limpiar el código. La refactorización se realiza
a menudo como parte del proceso de desarrollo del software: los desarrolladores
alternan la inserción de nuevas funcionalidades y casos de prueba con la
refactorización del código para mejorar su consistencia interna y su claridad.
Los tests aseguran que la refactorización no cambia el comportamiento del
código.

La refactorización es la parte del mantenimiento del código que no arregla
errores ni añade funcionalidad. El objetivo, por el contrario, es mejorar la
facilidad de comprensión del código o cambiar su estructura y diseño y eliminar
código muerto, para facilitar el mantenimiento en el futuro. Añadir nuevo
comportamiento a un programa puede ser difícil con la estructura dada del
programa, así que un desarrollador puede refactorizarlo primero para facilitar
esta tarea y luego añadir el nuevo comportamiento.

Fuentes
=======

-https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n

==========
Camel case
==========

Camel case (estilizado como CamelCase) o caja camello es un estilo de escritura
que se aplica a frases o palabras compuestas. El nombre se debe a que las
mayúsculas a lo largo de una palabra en CamelCase se asemejan a las jorobas de
un camello. El nombre CamelCase se podría traducir como Mayúsculas/Minúsculas
Camello. El término case se traduce como "caja tipográfica", que a su vez
implica si una letra es mayúscula o minúscula y tiene su origen en la
disposición de los tipos móviles en casilleros o cajas.

Existen dos tipos de CamelCase:

-UpperCamelCase (más conocido como PascalCase), cuando la primera letra de cada
una de las palabras es mayúscula.

Ejemplo: EjemploDeUpperCamelCase.

-lowerCamelCase (o simplemente CamelCase), igual que la anterior con la
excepción de que la primera letra es minúscula.

Ejemplo: ejemploDeLowerCamelCase.

Fuentes
=======

-https://es.wikipedia.org/wiki/Camel_case

==========
Snake case
==========

Snake case (estilizado como snake_case) se refiere al estilo de escritura en el
que cada espacio se reemplaza por un carácter de subrayado (_) y la primera
letra de cada palabra escrita en minúsculas. Es una convención de nomenclatura
de uso común en informática, por ejemplo, para nombres de variables y subrutinas
y para nombres de archivos. Un estudio ha encontrado que los lectores pueden
reconocer los valores de los casos de snake_case más rápidamente que los de
CamelCase.

Fuentes
=======

-https://en.wikipedia.org/wiki/Snake_case

====================
Single Sign-On (SSO)
====================

El "Inicio de Sesión Único" o "Inicio de Sesión Unificado" (Single Sign-On, SSO)
es un procedimiento de autenticación que habilita a un usuario determinado para
acceder a varios sistemas con una sola instancia de identificación. Su
traducción literal es «autenticación única» o «validación única».

Fuentes 
=======

-https://es.wikipedia.org/wiki/Single_Sign-On

========================
Introducción a Pipelines
========================

Un Pipelin0e de CI/CD es el componente más fundamental del desarrollo de
software automatizado. Si bien el término se ha utilizado para describir muchos
aspectos diferentes de la informática, en gran parte de la industria de DevOps,
usamos “Pipelines” para ilustrar las amplias aplicaciones de comportamientos y
procesos involucrados en la integración continua (CI).

CI es una estrategia de desarrollo de software que aumenta la velocidad de
desarrollo al tiempo que garantiza que la calidad del código implementado no se
vea comprometida. Mediante el uso de herramientas de CI, los desarrolladores
envían código continuamente en pequeños incrementos, a veces varias veces al
día, que luego se crea y prueba automáticamente antes de fusionarse con el
repositorio compartido. Las canalizaciones de entrega de software modernas
pueden crear, probar e implementar aplicaciones según las necesidades de su
negocio.

¿Qué es un Pipeline de CI/CD?
=============================

Un Pipeline de CI/CD es el conjunto completo de procesos que se ejecutan cuando
activa el trabajo en sus proyectos. Las canalizaciones abarcan sus flujos de
trabajo, que coordinan sus trabajos, y todo esto se define en el archivo de
configuración de su proyecto.

Integración continua (CI) frente a implementación continua (CD)
===============================================================

La integración continua automatiza la construcción y prueba de su software. La
implementación continua es una extensión de esta automatización y permite que su
software se implemente después de cada confirmación de código que pasa su
conjunto de pruebas. Los equipos de desarrollo más exitosos implementan su
software con frecuencia.

Configurar un Pipeline de CI
============================

El ADN de la integración continua es la configuración. Las canalizaciones de CI
son el nivel más alto de orquestación en un archivo de configuración.

Flujos de trabajo de CI
=======================

Los flujos de trabajo le permiten ejecutar y solucionar problemas de trabajos
por separado para que pueda ver las compilaciones fallidas en tiempo real. Si
falla un trabajo en un flujo de trabajo, puede volver a ejecutar ese trabajo
solo en lugar de volver a ejecutar todo el conjunto.

Funciones de CI / CD con CircleCI
=================================

Algunas de las características que encontrará al crear código a través de
Pipelines en CircleCI son el uso de múltiples clases de recursos, división de
pruebas paralelas, orbes, trabajos matriciales, variables / contextos de entorno
y aprobaciones.

Clases de recursos: CircleCI ofrece una serie de clases de recursos que le
permiten optimizar los recursos de CPU y RAM para cada trabajo.

División de pruebas en paralelo: para reducir el tiempo, ejecute pruebas en
paralelo distribuyéndolas en varios contenedores separados.

Orbes: Los orbes son paquetes reutilizables de configuración YAML que condensan
piezas repetidas de configuración en líneas únicas de código.

Empleos de matriz: matriz de puestos de trabajo permite llevar a cabo un trabajo
con parámetros múltiples veces con diferentes argumentos.

Parámetros: las variables de canalización, las variables de entorno y los
contextos son parámetros que permiten a los usuarios almacenar y reutilizar
datos y proteger la información confidencial.

Aprobaciones: los flujos de trabajo se pueden programar para esperar la
aprobación manual de un trabajo antes de continuar. Cualquiera con acceso push a
su repositorio puede aprobar el trabajo para continuar con el flujo de trabajo.

Fuente
======

https://devopslatam.com/que-es-un-pipeline-de-ci-cd/

===========================
Mbps (Megabits por segundo)
===========================

Los megabits por segundo se refieren a la velocidad a la que se transmite 1
Megabit (Mb) en un segundo. 1 Mb se refiere a 1000^2 bits o 1.000 Kb. El uso del
prefijo "Mega-" para mostrar cantidades de un millón de Mbps es una medida común
de las velocidades de transmisión de datos actuales. Un bit es la unidad más
pequeña de información en un sistema digital que pertenece a un valor binario.

Hay una diferencia entre Mbps y MBps, ya que la letra "b" más pequeña denotaría
bits, mientras que la "B" mayúscula se utilizaría al referirse a un cluster de
datos más grande, bytes. Un solo byte es un grupo de 8 bits. Como resultado, un
megabit se referiría a 1.000.000 bits mientras que un megabyte se referiría a
8.000 bits. Los datos de Internet se indican en bytes, pero las velocidades se
miden en bits por segundo, ya que la transmisión de datos se realiza de a 1 bit
cada vez.

La tecnología moderna transfiere datos a velocidades medidas en Mbps. Mientras
que los sistemas altamente desarrollados pueden proporcionar velocidades aún más
rápidas medidas en Gigabits por segundo, con 1Gb equivalente a 1.000Mb, las
tasas más comunes en todo el mundo siguen estando al nivel de los Mbps. La
tecnología anterior funcionaba a velocidades tan bajas como 56Kbps.
Afortunadamente, los crecientes desarrollos en la industria de la tecnología han
llevado a velocidades más rápidas. 1 Mbps equivale a 1.000 Kbps o 1.000.000 bps.
1 Gbps es igual a 1.000.000.000 Kbps o 1.000 millones de bps. La mayoría de las
velocidades de datos se registran en Mbps.

=======================================================
Usar la ñ y las vocales con acénto en teclado en inglés
=======================================================

Agregar en la configuración de idioma o región el Inglés Internacional
con teclas muertas, luego:

ñ = Alt + n

Ñ = Alt + Shit + n

á é í ó ú = Alt + vocal.

=======
Sitemap
=======

Un sitemap puede ser muy útil para mejorar la búsqueda y el posicionamiento de
tu sitio web.

SEO. Probablemente ya te encontraste con esta sigla al buscar sobre las formas
de hacer marketing en Internet.

Básicamente, el Searching Engine Optimization consiste en una serie de técnicas
para conquistar buenas posiciones en los resultados de los mecanismos de
búsqueda. Principalmente Google, responsable por gran parte del tráfico en
internet.

Palabras clave, link building, escaneabilidad, tiempo de carga, diseño
responsivo. Todos estos son factores de ranking muy importantes para conquistar
la tan soñada cima en la página de resultados.

Sin embargo, hay otro elemento muy importante que, muchas veces es tratado con
negligencia por los administradores: el sitemap.

¿Qué es el sitemap?
===================

Probablemente ya has utilizado organogramas jerárquicos al redactar un texto en
Word, ¿no es verdad? Entonces, un sitemap funciona más o menos así, pero en
lugar de dibujos, son utilizadas otras formas de direccionamiento.

Como el propio nombre lo dice, es un mapa de tu sitio web. Contiene las
informaciones que indican el camino correcto que debe ser recorrido por el
crawler.

Un crawler es un robot que rastrea en internet localizando páginas relevantes
para cada búsqueda. En este caso, el GoogleBot.

Piensa en la siguiente situación: un minero necesita explorar una mina de oro en
la cual nunca ha estado antes. Sin embargo, antes de eso, tendrá que excavar y
averiguar cada rincón para, al final, encontrar lo que busca. Pero si alguien le
entrega un mapa, todo será más fácil, ¿no es cierto?

Es exactamente esa la función del sitemap: ayudar en el trabajo del robot de
Google. Esto hará con que los procesos de indexación se vuelvan más rápidos y
eficientes. Tanto el tiempo de rastreo como el de carga de la página se volverán
más ágiles.

Estas informaciones son almacenadas en el servidor donde el sitio web está
hospedado y revelan toda la estructura, como un índice, optimizando la
eficiencia del buscador. Google agradece y tú puedes obtener resultados más
veloces y precisos.

Un sitemap contiene las URL principales de un sitio web, o sea, aquellas que
serán leídas en orden prioritaria. También están contenidas las informaciones
referentes a la jerarquía, arquitectura de enlaces y actualizaciones.

Pueden ser páginas de conversión, blog posts o pestañas. En síntesis, es
necesario privilegiar aquellas que consideras realmente importantes para tu
negocio.

Pero, al final, ¿cuáles son los beneficios?
===========================================

En el SEO, una de las principales técnicas es el link building. O sea,
referencias en otras páginas que redireccionan al usuario para tu sitio web.

Cuando una página no recibe muchos enlaces de entrada, puede pasar desapercibida
por el bot. Por lo tanto, es necesario indicarla a Google que, de esta forma,
tendrá mayor facilidad en reconocerla y posicionarla en los resultados de
búsqueda.

Además, el uso de fechas indica la actualización de contenidos. Así, serán
releídos por el crawler. Esta técnica de reestructuración y extensión de
contenido es muy utilizada para intentar mejorar el ranking de las páginas.

Google también le da prioridad a los administradores de sitios que ayudan al bot
en la lectura, siendo esta una práctica recomendada y recompensada por el motor
de búsqueda.

¿En qué situaciones se debe utilizar un sitemap?
================================================

La creación de un sitemap es recomendada para cualquier blog o sitio web, pues
facilita los procesos de indexación y revela una preocupación por parte del
webmaster. Google es, básicamente, un socio de negocios, entonces también
necesitas ayudarlo para que haya reciprocidad.

Sin embargo, hay algunas situaciones específicas en que el sitemap es
fundamental. Descubre cuáles son algunas de ellas:

Sitios con contenido dinámico
=============================

Cuando el contenido de un sitio recibe diversas actualizaciones o nuevas
publicaciones con regularidad, un sitemap es esencial. Algunos ejemplos son
grandes portales de noticias, blogs corporativos con foco en SEO y tiendas
virtuales, que quedan a merced del stock en sus páginas de productos.

Sitios con dificultad para un buen posicionamiento
==================================================

Algunas páginas poseen dificultad para alcanzar un buen posicionamiento. Esto
puede ocurrir por una serie de factores, como contenido en los lenguajes Ajax,
Flash o creados en Wix.

Sitios nuevos
=============

Sitios web que fueron creados hace poco, aún no tienen una alta autoridad de
dominio. Por eso, Google puede demorar más tiempo para rastrear las páginas
internas. En este caso un sitemap puede acelerar este proceso.

Sitios sin link building
========================

Cuando no existen muchos enlaces de entrada para un sitio web, el crawler puede
considerarlo irrelevante. Por lo tanto, para aumentar las oportunidades de
aparecer en Google, se recomienda usar un sitemap.

¿Cuáles son los formatos de un sitemap?
=======================================

Cuando vas a un centro comercial, generalmente hay un mapa indicando el local de
cada una de las tiendas y sus respectivos pisos. Esto es semejante a un sitemap,
pero el robot de Google no puede leer las informaciones en un formato gráfico.

Por eso existen diferentes modelos. A continuación, descubre cuáles son:

XLM
===

El formato más utilizado en la web es el XLM. Consiste en una lista de URL
formateadas en un lenguaje codificado, dirigido especialmente para la
optimización de SEO. Puede ser creado manualmente o con la ayuda de herramientas
específicas. También agrega imágenes y videos.

TXT
===

El formato TXT es más sencillo, pero es negligente con algunas informaciones
importantes, como la fecha de modificación de la URL y la organización de las
páginas. Básicamente es un texto que puede ser compuesto en un simple editor de
textos.

Atom-RSS
========

Atom-RSS es muy utilizado en blogs. En él, la propia sección de noticias
funciona como un sitemap, pero lleva en consideración la fecha de publicación
como factor de prioridad. Funcionan de manera semejante a un agregador de
contenidos en el cual el usuario puede inscribirse.

¿Cuáles son los tipos de sitemap?
=================================

Como internet es una atmosfera que ofrece amplias oportunidades, existen
diversos tipos de negocios. Por eso, muchas veces los sitios web necesitarán
diferentes tipos de sitemaps, dejando el mapa aún más específico.

¿Ya has notado que en el propio buscador existen pestañas “Imágenes” “Videos” y
“Noticias” debajo de la caja de búsqueda? Esta optimización es realizada a
través de los sitemaps específicos, que pueden ser encajados en el mismo
archivo o en archivos separados.

Imágenes
========

Muchos sitios web se enfocan en el aspecto visual. Es el caso de bancos de
imágenes, portafolios de fotógrafos e ilustradores e incluso algunos e-commerce.

Un sitemap de imágenes tiene la misma función, pero las URL citadas serán
dirigidas para las fotos. Este recurso es muy importante para negocios que
quieren aparecer en la cima de Google Imágenes.

Videos
======

Los videos están en alta en la atmósfera digital. Gracias a eso, es muy
importante posicionarlos bien en los mecanismos de búsquedas.

Muchas veces Googlebot acaba siendo negligente con este formato de contenido,
entonces hacer un sitemap es una buena idea. En él deben estar contenidas
informaciones como descripción, tiempo de duración y la thumbnail (minuatura).

Noticias
========

Otro tipo de sitemap es el de noticias. Si inviertes en este tipo de media, con
seguridad necesitarás un sitemap de este tipo, pues lleva en consideración la
sección de noticias del blog.

Además del sitemap, será necesario seguir algunos pasos y solicitar la inclusión
del artículo mediante la central de editores de Google Noticias.

¿Cómo crear un sitemap?
=======================

Sitemaps pueden ser creados manualmente, pero algunos formatos exigen cierta
profundidad de estudio, como las marcaciones XML.

Existen diversas plataformas que ayudan el en proceso. Si tu sitio web fue
creado en WordPress, hay algunos plugins que pueden realizar esta tarea de
forma simple y rápida, como Better WordPress Google XLM Sitemaps o el propio
Yoast SEO, ya usado por muchos webmasters.

Otra opción es el software GSiteCrawler, un simulador de crawlers que analiza el
sitio web y crea automáticamente el sitemap.

Por último, hay herramientas online, como XLM-Sitemaps (gratuito para sitios con
hasta 500 páginas) y la extensión para navegadores Sitemap Generator.

¿Cómo presentarle un sitemap.xml a Google?
==========================================

Después de crear tu sitemap, debes informárselo a Google y hacerlo rastreable.
Para eso existen dos formas:

Google Search Console: basta acceder la pestaña “Rastreo”, hacer clic en
“Sitemap” y “Adicionar/Rastrear Sitemap” en el botón rojo en la esquina superior
a la derecha.

Robots.txt: basta insertar la siguiente línea en el archivo de texto donde fue
creado el sitemap, especificando el camino:

https://example.com/sitemap_location.xml

¿Existe alguna recomendación extra para mejorar los resultados?
===============================================================

Para mejorar el desempeño de tu sitio web, algunas prácticas relacionadas con el
sitemap son recomendadas. A seguir descubre algunas de ellas:

Crea varios sitemaps para las diferentes categorías del sitio.

Aunque el límite sea de 50 mil URL, intenta mantener ese número debajo de 10
mil.

Utiliza URL canónicas, por ejemplo, www.tusitioweb.com. Evita cambios en el
protocolo de transferencia (https).

Visita con regularidad Google Search Console para identificar posibles
errores.

Fuente
======

https://rockcontent.com/es/blog/sitemap/

SEO
===

SEO significa Search Engine Optimization (Optimización para motores de
búsqueda). Se trata del conjunto de estrategias y técnicas de optimización que
se hacen en una página web para que aparezca orgánicamente en buscadores de
Internet como Google, Yahoo o Youtube. La correcta aplicación del SEO puede
causar incrementos expresivos en el tráfico y la visibilidad de las marcas en
Internet.

Una de las mayores metas de las empresas que invierten en Marketing Digital es
alcanzar las primeras posiciones en los motores de búsqueda - después de todo,
¿quién no quiere clics gratuitos y más visitantes en su sitio?

Pero en un terreno tan feroz y competitivo como es Internet, hacer que tu sitio
web se destaque entre los millones de páginas que hay en la red parece una tarea
imposible. Y digo que parece porque en realidad no lo es.

Sin embargo, estar en Internet no es suficiente para garantizar que tu sitio,
e-commerce o blog logre un lugar en la primera página de Google: es necesario
invertir en una estrategia específica para optimizar los resultados y asegurar
que tu negocio alcance un buen posicionamiento web para las palabras clave más
importantes de su segmento.

Con el SEO u Optimización para Motores de Búsqueda - del inglés Search Engine
Optimization, puedes hacer que tu sitio web aparezca en búsquedas relevantes,
conectando tus contenidos con las personas que están buscando productos o
servicios como el que ofreces.

Pero debes saber que hacer SEO requiere de mucho estudio para entender
terminologías, construir estrategias y aplicar prácticas que te lleven a la
cima de las páginas de resultados de Google.

¡No te preocupes! Sea que quieras dar tus primeros pasos en el mundo del
posicionamiento en buscadores, o que quieras refrescar tu conocimiento, en esta
guía completa de SEO te explicaremos todo lo que tienes que saber sobre la
materia.

¿Qué es SEO (Search Engine Optimization)?
=========================================

SEO es la sigla para Search Engine Optimization, que significa «optimización
para motores de búsqueda». Consiste en una serie de técnicas, disciplinas y
estrategias de optimización que se implementan en las páginas de un sitio web o
blog para mejorar su posicionamiento en los buscadores.

Esa estrategia de Marketing es fundamental para que tu empresa gane destaque,
visibilidad en el mundo digital y, por consecuencia, más leads, clientes y
facturación para tu negocio.

¿Cómo?
======

Optimizando sitios y blogs a través del uso de técnicas para mejorar el
posicionamiento web de tus páginas y posicionando a tu empresa en los primeros
resultados de Google, por ejemplo, aumentan (y mucho) tus oportunidades de negocio.

A final de cuentas, el 90% de las personas que realizan búsquedas en Google solo
hacen clic en los resultados que aparecen en la primera página del motor.

El principal objetivo de SEO, por lo tanto, es aumentar el volumen del tráfico
orgánico y garantizar más visibilidad para las páginas web.

¿Cuál es la diferencia entre SEO y SEM?
=======================================

No queremos dejar por fuera de este artículo un tema que causa mucha confusión
entre los profesionales que se están iniciando en el mundo del Marketing Digital
y esto es la diferencia entre SEO y SEM.

Aunque en un principio puedan parecer que refieren a acciones semejantes dada la
similitud de sus siglas, debes prestar mucha atención porque refieren a acciones
completamente diferentes.

Veamos una por una.

SEO = Posicionamiento orgánico
==============================

Como ya sabrás, el SEO se refiere a todas aquellas acciones que puedes tomar
dentro o fuera de tu sitio web para optimizar su posicionamiento en los
buscadores de forma orgánica. Este último punto es clave dado que orgánico
quiere decir “no pago”.

Con una estrategia SEO tú no le pagas a Google o a cualquier otro motor de
búsqueda para ganar posiciones en la SERP. Son tus contenidos de valor y tus
optimizaciones las que se ganan esos lugares por derecho propio.

SEM = Posicionamiento pago
==========================

Por el contrario, el SEM Search Engine Marketing se refiere a aquellas
estrategias que incluyen la utilización de anuncios pagos.

Es decir, con una estrategia SEM creas una campaña publicitaria para que cuando
un usuario digite una búsqueda, tu sitio aparezca antes que los resultados
orgánicos en forma de anuncio, siempre y cuando concuerde con la intención de
búsqueda del usuario.

Instala herramientas de SEO iniciales y básicas
===============================================

Para comenzar una estrategia de SEO debes tener, al menos, las herramientas
básicas para hacer un diagnóstico de tu situación actual, respaldar la
planificación, realizar las primeras optimizaciones y comenzar a monitorear los
impactos de cada acción.

Estamos hablando principalmente de dos herramientas indispensables para SEO:
Google Analytics y Google Search Console. Google los proporcione de forma
gratuita y siempre te ayudarán a monitorear tus estrategias.

Google Analytics
================

Google Analytics es una herramienta de análisis de datos ampliamente utilizada
que ofrece una gran variedad de recursos para evaluar el rendimiento de las
estrategias digitales. En SEO, puede ayudar de diferentes maneras:

-Conocer mejor a tu audiencia para construir la buyer persona.
-Identificar cuáles son las páginas más visitadas y con el mejor desempeño.
-Monitorear la cantidad de tráfico orgánico.
-Identificar los canales que generan más tráfico (email, social, orgánico, etc).
-Comprender la participación (tasa de rebote, páginas por visita, duración de la
sesión);
-Monitorear las conversiones generadas por la estrategia SEO.

Estos son solo algunos análisis que puedes hacer con Google Analytics y que
pueden ayudar desde la planificación hasta el monitoreo de SEO. Sin dudas,
encontrarás muchos otros datos en la herramienta para ayudar a tu estrategia.

Google Search Console
=====================

Google Search Console es una herramienta que facilita la comunicación entre un
sitio y Google y ofrece informes valiosos para aplicar las técnicas de SEO.
Estas son algunas de las características que ofrece:

-Averigua si hay problemas con la indexación del sitio.
-Te ayuda a saber si el sitio ha sido hackeado o penalizado por Google.
-Monitorea la posición promedio de tus páginas en las SERPs.
-Identifica el porcentaje de clics (CTR orgánico) de tus páginas en las SERPs.
-Identifica qué palabras clave activaron tu sitio web en las SERPs.
-Identifica qué sitios dirigen backlinks hacia los tuyos.
-Le solicita a Google que reelabore los backlinks dudosos a tu sitio.

Google Search Console es un poco más técnico, por lo que está orientado a los
webmasters. Pero la interfaz es muy amigable, por lo que cualquiera puede usarla
para hacer diagnósticos y dirigir demandas más complejas a profesionales
especializados.

La herramienta también puede generar varias ideas para la optimización del
contenido, además de ser la fuente principal para identificar consultas que
dirigen el tráfico a tus páginas y la tasa de clics de tus palabras clave
principales.

¿Qué es link building?
======================

Los enlaces son la base de internet. Conectan una página a otra y permiten al
usuario navegar descubriendo contenidos.

Al igual que los usuarios, los robots también atraviesan esta red interconectada
para indexar nuevos contenidos y comprender qué páginas son las más importantes,
ya que una transmite link juice y autoridad a la otra.

Es por eso que una estrategia de link building es tan importante en el SEO off
page.

Link building es la a construcción de una red de enlaces que dirigen al usuario
hacia tus páginas (llamados backlinks) y fortalecen tu autoridad en la web. Para
el algoritmo de Google, cuantos más enlaces de calidad reciba la página, más
relevancia tendrá en el mercado.

Ten en cuenta que la cantidad y la calidad deben ir juntas. No tiene sentido
obtener cientos de backlinks de un mismo dominio o de un sitio web cuestionables
o fuera de contexto.

Para que una estrategia de link building funcione debe ser capaz de obtener
enlaces de calidad.

¿Cómo funciona el SEO técnico?
==============================

El universo SEO es vasto e incluye muchos aspectos técnicos de la estructura de
un sitio web, por eso una parte muy importante del SEO on page es el SEO
técnico.

Cuando hablamos de SEO técnico, nos estamos refiriendo a todas las
optimizaciones que puedes hacer en la estructura interna (es decir, en los
códigos y la arquitectura) de tu sitio web, con el objetivo de volverlo más
seguro, rápido, comprensible, rastreable e indexable.

Sitemap
=======

Un sitemap es un documento de texto que numera todas las páginas de un sitio web
así como informaciones sobre ellas, como la fecha de la última modificación y la
frecuencia de las actualizaciones.

Su función SEO es mostrarle esta información a los motores de búsqueda para que
puedan encontrar e indexar fácilmente las URL.

Aunque los motores de búsqueda ya hacen este trabajo al rastrear, los mapas del
sitio facilitan la vida de los robots y garantizan la indexación de todas las
páginas.

Puede crear el sitemap manualmente o con herramientas y complementos y luego
enviarlo a través de Google Search Console.

Robots.txt
==========

El archivo robots.txt también es un documento de texto, insertado en la carpeta
raíz de tu sitio web, que le dice a Google qué páginas de tu sitio web no debe
rastrear para que, de esa forma, no aparezcan en el motor de búsqueda.

Puedes usar robots.txt para evitar que los bots de Google accedan a páginas
confidenciales, como el formulario de inicio de sesión del administrador
(el «/ wp-admin /» de los sitios de WordPress, por ejemplo), archivos de
comandos o estilos que no son importantes.

Además, es importante saber acerca de robots.txt para los casos en que tus
páginas tengan algún problema para aparecer en las SERPs. Pueden estar en ese
archivo por error.

Dos tipos de robots: user-agents y robots

Google diferencia varias clases de robots:

Los user-agents que utiliza de forma específica para buscar y para dar
instrucciones. Para poder usar este robot se debe añadir el siguiente comando:
User-agent: *

El resto de robots son Googlebots: el Googlebot-Mobile (específico para
dispositivos móviles) y el Googlebot-Image que es para imágenes y fotografía.

El comando Disallow
===================

Si queremos limitar la indexación de archivos para este tipo de robots debemos
usar el comando «Disallow». Por ejemplo, si queremos quitar algún contenido de
nuestra página web pondremos lo siguiente:

En el caso de bloquear todo el sitio pondremos una barra inclinada, así:
Disallow: /

Si queremos bloquear un directorio y todo lo que está dentro pondremos lo
siguiente: Disallow: /https://marketing4ecommerce.net/marketing/

Para bloquear una página entera se pone después de Disallow así: Disallow: /
https://marketing4ecommerce.net/marketing/

Ejemplo: https://marketing4ecommerce.net/robots.txt

User-agent: *
#Allow: /wp-content/uploads/*
#Allow: /wp-content/*.js
#Allow: /wp-content/*.css
#Allow: /wp-includes/*.js
#Allow: /wp-includes/*.css
#Disallow: /cgi-bin
#Disallow: /wp-content/plugins/
#Disallow: /wp-content/themes/
#Disallow: /wp-includes/
#Disallow: /*/attachment/
#Disallow: /tag/*/page/
#Disallow: /tag/*/feed/
#Disallow: /page/
#Disallow: /comments/
#Disallow: /xmlrpc.php
#Disallow: /?attachment_id*
#Disallow: /wp-json/wordpress-popular-posts/v1/popular-posts/

# Bloqueo de las URL dinamicas
Allow: /*amp/?utm_source=feedburner
Allow: /*amp/?utm_source=news
Disallow: /*?

#Bloqueo de busquedas
User-agent: *
Disallow: /?s=

# Bloqueo de trackbacks
User-agent: *
Disallow: /trackback
Disallow: /*trackback
Disallow: /*trackback*
Disallow: /*/trackback

# Bloqueo de feeds para crawlers
User-agent:*
Allow: /feed/$
Disallow: /feed/
Disallow: /comments/feed/
Disallow: /*/feed/$
Disallow: /*/feed/rss/$
Disallow: /*/trackback/$
Disallow: /*/*/feed/$
Disallow: /*/*/feed/rss/$
Disallow: /*/*/trackback/$
Disallow: /*/*/*/feed/$
Disallow: /*/*/*/feed/rss/$
Disallow: /*/*/*/trackback/$

# Ralentizamos algunos bots que se suelen volver locos
User-agent:Â noxtrumbot
Crawl-delay: 20

User-agent: msnbot
Crawl-delay: 20

User-agent: Slurp
Crawl-delay: 20

# Bloqueo de bots y crawlers poco utiles
User-agent: MSIECrawler
Disallow: /

User-agent: WebCopier
Disallow: /

User-agent:Â HTTrack
Disallow: /

User-agent: Microsoft.URL.Control
Disallow: /

User-agent: libwww
Disallow: /

User-agent: Orthogaffe
Disallow: /

User-agent: UbiCrawler
Disallow: /

User-agent: DOC
Disallow: /

User-agent: Zao
Disallow: /

User-agent:Â sitecheck.internetseer.com
Disallow: /

User-agent:Â Zealbot
Disallow: /

User-agent:Â MSIECrawler
Disallow: /

User-agent: SiteSnagger
Disallow: /

User-agent: WebStripper
Disallow: /

User-agent: WebCopier
Disallow: /

User-agent: Fetch
Disallow: /

User-agent: Offline Explorer
Disallow: /

User-agent: Teleport
Disallow: /

User-agent: TeleportPro
Disallow: /

User-agent: WebZIP
Disallow: /

User-agent: linko
Disallow: /

User-agent: HTTrack
Disallow: /

User-agent:Â Microsoft.URL.Control
Disallow: /

User-agent: Xenu
Disallow: /

User-agent: larbin
Disallow: /

User-agent: libwww
Disallow: /

User-agent: ZyBORG
Disallow: /

User-agent: Download Ninja
Disallow: /

User-agent: wget
Disallow: /

User-agent: grub-client
Disallow: /

User-agent:Â k2spider
Disallow: /

User-agent: NPBot
Disallow: /

User-agent: WebReaper
Disallow: /

# Previene problemas de recursos bloqueados en Google Webmaster Tools

# Si utilizas Yoast SEO estos son los sitemaps principales
Sitemap:Â https://marketing4ecommerce.net/sitemap_index.xml
Sitemap:Â https://marketing4ecommerce.net/category-sitemap.xml
Sitemap:Â https://marketing4ecommerce.net/page-sitemap.xml
Sitemap:Â https://marketing4ecommerce.net/post-sitemap.xmlÂ Â

UX (experiencia del usuario)
============================

La experiencia del usuario y el SEO son conceptos que deben ir juntos. Ya hemos
dicho que la prioridad de los motores es ofrecer la mejor experiencia de
búsqueda y navegación hasta que el usuario encuentre lo que está buscando.

Y eso incluye su experiencia en tu sitio web.

Pero, ¿qué significa UX, User Experience (en español experiencia de usuario)? Es
un concepto utilizado en el desarrollo de sitios web que centraliza todas las
medidas en las acciones y respuestas de los usuarios para satisfacer sus
necesidades.

Según Peter Morville, presidente de Semantic Studios, siete características son
esenciales para que un sitio web tenga una buena experiencia de usuario.
Necesita ser:

útil
fácil de ser utilizado
deseable
localizable
accesible
valioso
confiable

Velocidad de carga
==================

La velocidad de carga es uno de los criterios principales para la clasificación.
El propio Google ya lo ha manifestado abiertamente: en 2010, para búsquedas
desktop y, en 2018, para búsquedas mobile.

Es muy importante recordar que, si bien la velocidad no te hace ganar
posiciones, sin ella nunca llegarás a la cima.

Un pagespeed rápido no te posicionará por encima de tus competidores, pero con
una mala velocidad de página ni siquiera tendrás la oportunidad de competir.

¿Qué es el SEO local?
=====================

Una de las prioridades de Google en los últimos años es buscar con intención
local. ¡Entiende el porqué de esto!

El motor de búsqueda interpreta que un usuario que busca soluciones en una
región determinada debe recibir respuestas de una manera diferente, con
información más práctica y objetiva, en lugar de una lista de enlaces como en
una SERP tradicional.

En este tipo de búsqueda, Google activa el algoritmo de búsqueda local, que
prioriza los resultados en la región en la que se encuentra el usuario o que
este digita en los términos de búsqueda.

En los resultados, el motor de búsqueda generalmente presenta información de
Google Mi Negocio directamente en las SERPs, por lo que el usuario no siempre
necesita entrar al sitio web de la marca (en la misma línea que explicamos
sobre los fragmentos destacados).

Por lo tanto, la optimización para empresas con dirección física, llamada SEO
local, tiene algunas peculiaridades. ¿Qué cambia esto en una estrategia de
optimización? Compréndelo mejor a continuación.

Fuente
======

https://rockcontent.com/es/blog/que-es-seo/

SERP
====

El acrónimo SERP significa Search Engine Results Page y hace referencia a las
páginas de resultados mostradas por un determinado buscador: generalmente
Google, pero también Bing, Baidu o Yahoo.

¿Qué es SERP?
=============

SERP significa Search Engine Results Page o en español página de resultados del
buscador. Esta definición se refiere a los resultados que aparecen en las
páginas de Google, Bing, Yahoo o Yandex y que suelen mostrar unos 10 de media.

En resumen, las SERPS son todas las páginas que aparecen en Google y que están
llenas de diferentes resultados. He ahí la expresión de “querer mejorar nuestra
posición en lo SERPS”, que vendría a significar querer subir de una página
determinada a otra superior en cualquiera de los buscadores.

Posicionar o no posicionar, esa es la cuestión. Cuando hablamos de buscadores,
el objetivo está claro: conseguir que nuestra página web o tienda online alcance
una posición destacada dentro de los resultados ofrecidos por el buscador. Esta
es la razón por las que las páginas de resultados (SERP) se han convertido en un
terreno de gran interés para todo tipo de negocios y servicios digitales.

La estrategia es muy similar, por ejemplo, a una carrera de Fórmula 1: ¿qué
pilotos tienen más opciones de ganar la carrera? Aquellos que arrancan la
competición desde los primeros puestos de la parrilla de salida. Así de sencillo
y complejo: salir en las primeras posiciones de una carrera es igual que salir
en las primeras posiciones de las SERP mostradas por un buscador, ya que aumenta
las posibilidades de triunfo y éxito de forma considerable.

¿Por qué es tan importante mejorar la posición en las SERP?
===========================================================

Los estudios de usabilidad demuestran que los usuarios tienden a hacer clic en
los resultados de búsqueda situados en las zonas superiores y en la parte
izquierda. Es decir, cuando más arriba y a la izquierda se encuentre un
resultado de búsqueda, más opciones tiene de captar la atención del usuario.

Fuente
======

https://www.edix.com/es/instituto/serp/

¿Qué es una web SPA? - Single Page Application
==============================================

Una web SPA (Single Page Application) es una página web la cual está todo el
contenido en una sola página, es decir, carga tan solo un archivo HTML y todo se
produce dentro de este único archivo. De esta manera se puede ofrecer una
experiencia más fluida, más rápida.

Es decir, todo el código HTML, JavaScript y CSS se carga una sola vez, puedes
navegar entre los diferentes apartados de la página y el contenido ya estará
precargado de antemano, es por esto que es tan rápido. En algunos casos también
lo que se hace es cargar estos contenidos dinámicamente si se requieren, pero no
tiene que cargar toda la página de nuevo, tan solo los nuevos contenidos.

En una SPA tenemos varias vistas, no varias páginas
===================================================

Aunque solo tenemos una página, sí que podemos tener varias vistas, es decir los
diferentes apartados que podría tener nuestra web. A ojos del usuario es como si
tuviese varias páginas que cargan muy rápido, pero en realidad son vistas en la
misma página.

Entonces, si todo está en la misma página, ¿quiere decir esto que no cambia la
URL del navegador?

No, no quiere decir eso, es más, lo más normal es que vaya cambiando según nos
movemos entre vistas. Pero la clave aquí, es que en realidad no estás cargando
una página, tan solo sustituyendo el contenido de la misma.

Entonces, para qué cambiar la URL, ¿que más da?

Podrías no cambiarla si, pero es una buena práctica ya que el navegador va
guardando el historial de las URL y le permite al usuario navegar con el botón
de atrás y adelante del navegador. Además de que el usuario podría acceder a un
contenido concreto directamente si usa la URL en vez de navegar por la web hasta
llegar a él.

¿En que lenguaje de programación se hacen las SPA?
==================================================

Esto es fácil, las SPA siempre están hechas con JavaScript. No hay otro lenguaje
en que las puedas hacer, ya que este tipo de webs se ejecutan en el lado del
cliente, es decir, en el navegador, y ahí solo podemos ejecutar JavaScript.

Como es obvio también tenemos HTML y CSS, pero esto no son lenguajes de
programación.

Por otro lado también tenemos muchos frameworks o librerías que nos ayudan hacer
estas SPA, como son angular, react, ember.js, polymer, etc… hay muchas, aquí
cada uno elige la que más le guste.

Y, ¿qué pasa con el backend?

Aquí nos da igual el backend, a la web SPA le da igual si haces el backend en
php, en Java, usando frameworks o no, da igual, las SPA tan solo necesitan de
una API que les proporcione el contenido y ya está, lo demás da igual. Es decir,
en este caso el frontend y el backend son dos proyectos totalmente separados uno
de otro.

El gran problema con el SEO
===========================

La compatibilidad del SEO con las páginas SPA no es muy buena, ya que al ser
solo una página, y los contenido se cargan dinámicamente, los bots de los
buscadores que leen el html de la página, no encuentran nada, ya que hay que
ejecutar JavaScript para cargar esos contenidos, y esto no lo hacen esos bots.

Así que si necesitas o es muy importante la indexación de esa página en los
buscadores como Google, no deberías de usar una SPA y tirar a la página web más
convencional.

Aunque si estas encabezonado en que sea una SPA y tener un buen SEO, no es
imposible

Existe lo que se llama el Server Side Rendering, con esto solucionamos el tema
del SEO además de darle una mayor velocidad a la carga inicial de la página.

Fuente
======

https://www.kikopalomares.com/blog/que-es-una-web-spa-single-page-application

========================
Entrypoint y un Endpoint
========================

Si pudieramos clasificarlos brevemente seria:

Entrypoint - URL de entrada a una pagina de un sitio web.

Endpoint - URL de un servicio que utiliza un sitio web para cargar o consumir
informacion.

Ejemplos de uso
===============

Una pagina Home de un sitio web es un entrypoint.

Una API Web se accede a traves de endpoints.

La relacion que existe entre ellas
==================================

Un entrypoint, como una pagina de Home de un sitio web, puede estar consultado
informacion de distintos endpoints para llenar con cierta informacion las
secciones de la pagina, siendo simplistas, supongamos que:

La parte superior del sitio web donde se encuetra el menu, consulta a un
endpoint.

La parte lateral del sitio web, consulta otro endpoint.

La parte principal del sitio web, consulta otro endpoint.

Y que la parte inferior del sitio web, consulta a un ultimo endpoint.

Ademas de ello, entendamos a los endpoints como servicios webs que seran usados
no solo al acceder a un entrypoint si no tambien al hacer click en un boton, un
checkbox, o cualquier evento de interaccion con el usuario.

Fuente
======

https://es.stackoverflow.com/questions/51758/qu%C3%A9-es-un-entry-point-y-un-end-point/51764

=================================================
El software como servicio o como suscripción SaaS
=================================================

Sass (Del inglés Software as a Service) es un servicio que está alojado en la
nube, por el proveedor, pero que se paga por «por demanda», tal como se utiliza.

Hoy en día, existen diferentes formas de configurar los sistemas de
planificación de recursos empresariales. Seguramente lo has oído como ERP en la
nube.

Los ERP modernos se han expandido de sus predecesores con capacidades que
abarcan mucho más que solo la planificación de recursos. En el pasado, el ERP
era visto como un sistema monolítico que ayudaba con un conjunto limitado de
operaciones comerciales. Pero ahora, un software ERP también se puede construir
como una colección de aplicaciones independientes o integradas o una combinación
de ambas que ayudan a gestionar aspectos específicos de la empresa.

Los sistemas ERP generalmente se alojan de tres maneras: localmente, en la nube
o una combinación de las dos.

El software como servicio o como suscripción o SaaS (del inglés Software as a
Service) es un modelo de entrega de software donde una aplicación informática se
ofrece como un servicio a través de Internet. Así, se permite que el usuario del
servicio no necesite instalar o actualizar la aplicación en sus equipos.

La inversión se realiza únicamente en función del uso de los servicios, cuyo
costo a corto plazo suele ser accesible.

El costo se reduce debido a la baja inversión inicial, y las tarifas por el uso
posterior de los servicios SaaS son bastante reducidas debido a la economía de
escala y a alta especialización de las empresas proveedoras de esos servicios.

En cuanto a los agentes destinatarios de SaaS, pueden ser cualquier empresa que
esté interesada en alguno de los servicios ofrecidos por proveedores, los que
son de diferente tipo: desde servicios genéricos relacionados con actividades
horizontales a toda la empresa (gestión del correo electrónico, repositorio de
documentos compartidos, etc.) hasta servicios que cubran procesos de negocio
estratégicos para la organización, en los que se puede llegar a cierto acuerdo
de parametrización o personalización con el proveedor de software como
suscripción.

Características de un SaaS vs un sistema ERP
============================================

Personalización:

En un escenario SaaS, un tercero suele administrar el software y los datos, en
oposición a un sistema ERP in situ. Este soporte adicional en la empresa del ERP
tradicional tiende a requerir más personal de TI, lo que puede resultar en más
costos asociados. Por otro lado, puede haber un mayor grado de control sobre los
sistemas y datos con los sistemas locales.

La mayoría de los sistemas ERP en la nube admiten cierta personalización,
permitiéndole configurar el sistema para que coincida con el aspecto y la
sensación de su organización, como por ejemplo el uso de logotipos de la
empresa. Sin embargo, el control de la verdadera personalización en términos de
reescribir código puede ser mucho más limitado. Minimizar la personalización
puede ser beneficioso para reducir los gastos de ERP y los retrasos en la
implementación, pero también puede afectar su ventaja competitiva si no se
adapta la funcionalidad única.

Integración:

La mayoría de los sistemas de software ERP tradicionales y en la nube ofrecen
integración, debido a las crecientes necesidades de transferencia de datos entre
aplicaciones. SaaS tiende a usar APIs, que son herramientas para facilitar la
integración. Si se utilizan protocolos estándar o ecosistemas comerciales
similares, los costos podrían ser menores en comparación con el desarrollo de
software de integración ad-hoc.

Actualizaciones:

El software ERP en la nube generalmente recibe actualizaciones más frecuentes
que los sistemas tradicionales. En algunos casos, las actualizaciones ocurren
con tanta frecuencia como mensual o incluso semanalmente. Esto puede llevar el
beneficio de seguir cumpliendo con las regulaciones cambiantes. Cuando se
implementan, los software como servicio pueden brindar escalabilidad a empresas
con alto crecimiento y rápida expansión.

Acceso móvil:

Se ha vuelto más común ver productos ERP tradicionales que ofrecen a los
usuarios acceso móvil que puede ayudar con las aprobaciones remotas, las
notificaciones y la visibilidad operacional. A veces puede haber complicaciones
adicionales en el software de ERP local si se requiere que un cliente de
terceros actúe como el enlace entre dispositivos móviles y el sistema de
gestión empresarial. Muchos SaaS, debido a su naturaleza basada en web, son
móviles nativos y vienen con aplicaciones móviles estándar.

Seguridad:

Al factorizar datos críticos como las finanzas corporativas, detalles de
empleados, información de cuentas de clientes y secretos comerciales, no es de
extrañar por qué la seguridad sigue siendo un requisito esencial al considerar
el software ERP. Para dar tranquilidad, muchos proveedores de ERP en nube están
promocionando el cifrado y el uso de salvaguardas adicionales construidas en
plataformas que tienen protocolos de seguridad mejorados.

Confiabilidad:

Otra preocupación común con cualquier ERP es la incapacidad de operar debido a
malfuncionamientos de software, hardware e infraestructura. La interrupción
operativa puede traducirse en fuertes pérdidas. Se debe pensar más en la
necesidad de acceso a internet de un producto ERP SaaS, especialmente para
empresas con ubicaciones remotas o áreas con conectividad de red menos
confiable. Igualmente importante es la fiabilidad del rendimiento global del
proveedor de ERP, que puede tener múltiples redundancias y protocolos de
recuperación de desastres para proteger los datos.

Pago:

El software de ERP local generalmente se cotiza con una licencia perpetua única
y Fees de soporte continuos. Los sistemas ERP SaaS adoptan modelos de precios
basados en suscripción, que suelen ser mensuales o anuales. Los proveedores del
software como servicio pueden fijar el precio de sus aplicaciones basándose en
una selección de múltiples factores de uso, como el número de usuarios, las
transacciones, la cantidad de datos u otras unidades de medida.

Costos generales:

Un sistema ERP tendrá costos asociados con él, no importa cómo está alojado.
Sin embargo, el software en la nube o ERP SaaS tiene situaciones únicas de
costos, como costos de implementación, costos iniciales y costos continuos que
uno no encontraría necesariamente con un sistema local.

Sin duda, los software como servicio pueden tener tiempos de implementación
relativamente más cortos, pero nuevamente esto puede variar dependiendo de
múltiples factores como la personalización, el número de usuarios finales por
nombrar algunos. Los tiempos más breves de implementación pueden equivaler a una
reducción en gastos del proyecto.

¿Por qué un software como servicio?
===================================

Por lo general, existe una mayor inversión inicial con el software ERP local
tradicional. El software como servicio aprovecha las economías de escala y
reduce la necesidad de infraestructura del cliente para implementar rápidamente
sus productos y servicios, lo que a su vez permite precios atractivos.

Algunas organizaciones que seleccionaron SaaS generaron ahorros debido a una
necesidad reducida de actualizar el hardware y la infraestructura. También
podría haber ahorros mediante la transición de funciones de soporte de TI que
pueden ser gestionadas por el proveedor de ERP SaaS.

Al decidir sobre un sistema de ERP, hay un surtido de aspectos a considerar.
Mientras que el software como servicio y los sistemas locales pueden ofrecer
ambos sus propias ventajas empresariales, no existe un tamaño único para todos
los ERP. Las organizaciones deben mirar los recursos y conocimientos que pueden
ayudarles a hacer una selección óptima al invertir en un sistema ERP.

Fuente
======

https://www.evaluandoerp.com/software-erp/saas-software-como-servicio/

=================
Nombre de dominio
=================

Un nombre de dominio (a menudo denominado simplemente dominio) es un nombre
fácil de recordar asociado a una dirección IP física de Internet. Se trata del
nombre único que se muestra después del signo @ en las direcciones de correo y
después de www. en las direcciones web. Por ejemplo, el nombre de dominio
example.com se podría traducir a la dirección física 198.102.434.8. Otros
ejemplos de nombres de dominio podrían ser google.com y wikipedia.org. Al
utilizar un nombre de dominio en lugar de una dirección IP numérica para
identificar una ubicación en Internet, es mucho más fácil recordar y escribir
direcciones web.

Cualquiera puede comprar un nombre de dominio. Solo tienes que ir a un
registrador o un host de dominios, encontrar un nombre que nadie más utilice y
abonar una pequeña cuota anual para ser su propietario.

Subdominio
==========

Un subdominio forma parte de un dominio más grande. Por ejemplo,
mail.google.com, www.google.com y docs.google.com son todos los subdominios del
dominio google.com. El propietario de un dominio puede crear subdominios en su
dominio de nivel superior para que cada uno de sus servicios o páginas web tenga
una dirección fácil de recordar.

Dominio simple
==============

Un dominio simple es sencillamente una dirección de dominio sin el prefijo
"www", como google.com (simple) en lugar de www.google.com (no tan simple).

Dominio principal
=================

Con los servicios de Google Cloud, tu dominio principal es el que usaste cuando
te registraste para obtener tu cuenta de empresa. Podrás añadir otros dominios
a tu cuenta más adelante. Para obtener más información, consulta el artículo
Seleccionar el dominio principal.

Dominio secundario
==================

Además de tu dominio principal, puedes añadir otros dominios a tu cuenta para
que los usuarios de esos dominios puedan utilizar también tus servicios. Cuando
añades un dominio que tiene sus propios usuarios, nos referimos a él como
dominio secundario.

Importante: Los dominios secundarios dependen por completo del dominio
principal. Si eliminas o suspendes el dominio principal, ocurrirá lo mismo con
los secundarios.

Alias de dominio
================

Un alias de dominio es un nombre de dominio que actúa como alias de otro
dominio. Puedes añadir un alias de dominio para proporcionar a todos los
usuarios de tu dominio otra dirección de correo electrónico en el alias de
dominio. Los correos que se envíen a cualquiera de las direcciones de un
usuario se mostrarán en la misma bandeja de entrada.

Dirección IP
============

Una dirección de protocolo de Internet (IP) es un conjunto de números que
identifica la ubicación física de un determinado dispositivo en la Web. Este es
un ejemplo de dirección IP: 74.125.19.147.

Como un nombre de dominio puede tener asociadas una o varias direcciones IP,
Google no permite configurar la publicación web y el correo electrónico solo
mediante direcciones IP.

Registrador de dominios
=======================

Un registrador de dominios es una empresa que vende nombres de dominio que aún
no son propiedad de nadie y que, por lo tanto, se pueden registrar. La mayoría
de estas empresas también ofrecen alojamiento de dominios.

Puedes registrar un dominio a través de Google Domains (versión beta) o con
alguno de nuestros partners de alojamiento de dominios. Puedes comprar un nombre
de dominio a través de un partner cuando te registras para obtener una cuenta de
 Google Cloud. Si compras un dominio al registrarte en Google Workspace,
 activaremos de forma automática Gmail en el dominio y crearemos direcciones web
 personalizadas. Si te registras con un nombre de dominio del que ya eres el
 propietario, tendrás que hacer estas operaciones tú mismo cambiando los
 registros DNS en el host de tu dominio.

Host de dominios
================

Un host de dominios es una empresa que ejecuta los servidores DNS de tu dominio
y gestiona sus registros DNS, entre ellos, los registros MX para configurar
Gmail (si utilizas Google Workspace), los registros CNAME para crear direcciones
web, etc. La mayoría de los hosts de dominios también ofrecen el servicio de
registro de nombres de dominio.

Para modificar los registros DNS, debes iniciar sesión en la cuenta de tu
dominio y a través de su host. Si el host de tu dominio es Google Domains,
puedes gestionar tus registros DNS en domains.google.com. Si no recuerdas cuál
es tu host, consulta el artículo Identificar el host de un dominio.

Servidor de nombres
===================

Un servidor de nombres es un punto de referencia de los datos DNS de tu dominio
y generalmente lo gestiona una empresa de host de dominios. Cuando se produce un
error en el servidor de nombres, es posible que tu correo experimente retrasos o
que tu sitio web deje de estar disponible. Por este motivo, deberías tener al
menos dos servidores de nombres que sean físicamente distintos para evitar que
haya un único punto de fallo. En algunos países, los servidores de nombres se
deben ubicar en redes IP diferentes para ofrecer mayor fiabilidad. Cada servidor
de nombres debe devolver registros idénticos de tu dominio. El orden en que se
devuelven los registros es irrelevante.

Directorio WHOIS

El directorio WHOIS es una lista pública de nombres de dominio que muestra las
personas y las organizaciones asociadas con cada nombre.

Como medida de privacidad, algunos propietarios de nombres de dominio prefieren
que su información personal no aparezca en el directorio WHOIS, de la misma
manera que podrías no querer que tu número de teléfono personal aparezca listado
en una agenda telefónica local.

Puedes usar el directorio WHOIS para determinar quién es el propietario de los
nombres de dominio y las direcciones IP. En Internet existen muchas versiones
web gratuitas de directorios. La información proporcionada por el directorio
WHOIS incluye una dirección de correo y un número de teléfono.

Fuente
======

https://support.google.com/a/answer/2573637?hl=es

============
¿Qué es DNS?
============

El sistema de nombres de dominio (DNS) es el directorio telefónico de Internet.
Las personas acceden a la información en línea a través de nombres de dominio
como nytimes.com o espn.com. Los navegadores web interactúan mediante
direcciones de Protocolo de Internet (IP). El DNS traduce los nombres de dominio
a direcciones IP para que los navegadores puedan cargar los recursos de
Internet.

Cada dispositivo conectado a Internet tiene una dirección IP única que otros
equipos pueden usar para encontrarlo. Los servidores DNS suprimen la necesidad
de que los humanos memoricen direcciones IP tales como 192.168.1.1 (en IPv4) o
nuevas direcciones IP alfanuméricas más complejas, tales como
2400:cb00:2048:1::c629:d7a2 (en IPv6). DNS: la lupa examina las direcciones IP,
encuentra www.example.com

¿Cómo funciona DNS?
===================

El proceso de solución de DNS supone convertir un nombre de servidor
(como www.ejemplo.com) en una dirección IP compatible con el ordenador
(como 192.168.1.1). Se da una dirección IP a cada dispositivo en Internet, y esa
dirección será necesaria para encontrar el dispositivo apropiado de Internet, al
igual que se usa la dirección de una calle para encontrar una casa concreta.
Cuando un usuario quiere cargar una página, se debe traducir lo que el usuario
escribe en su navegador web (ejemplo.com) a una dirección que el ordenador pueda
entender para poder localizar la página web de ejemplo.com.

Para entender el proceso de la resolución de DNS, es importante conocer los
diferentes componentes de hardware por los que debe pasar una consulta de DNS.
Para el navegador web, la búsqueda de DNS se produce "en segundo plano" y no
requiere ninguna interacción del ordenador del usuario, aparte de la solicitud
inicial.

Fuente
======

https://www.cloudflare.com/es-es/learning/dns/what-is-dns/

====================
Cookie (informática)
====================

El anglicismo cookie, usado también galleta o galleta informática, es un término
que hace referencia a una pequeña información enviada por un sitio web y
almacenada en el navegador del usuario, de manera que el sitio web puede
consultar la actividad previa del navegador. Si se ha realizado un curso desde
un inicio o una nueva aplicación se pueden realizar con la misma contraseña o no
en su sistema

Sus principales funciones son:

Recordar accesos: conocer si ya se ha visitado la página para actuar en
consecuencia, por ejemplo mostrando o no cierto contenido, recordar a un
usuario, etc. Cuando un usuario introduce su nombre de usuario y contraseña, se
almacena una cookie para que no tenga que estar introduciéndolas para cada
página del servidor. Sin embargo, una cookie no identifica a una persona, sino a
una combinación de computadora de la clase de computación-navegador-usuario.

Esto significa que la persona que crea la cuenta no se puede presentar con esta
cuenta y ser reconocido.

Conocer información sobre los hábitos de navegación, e intentos de spyware
(programas espía), por parte de agencias de publicidad y otros. Esto puede
causar problemas de privacidad y es una de las razones por la que las cookies
tienen sus detractores.

Originalmente, solo podían ser almacenadas por petición de un CGI desde el
servidor, pero Netscape dio a su lenguaje JavaScript la capacidad de
introducirlas directamente desde el cliente, sin necesidad de los CGLI. En un
principio, debido a errores del navegador, esto dio algunos problemas de
seguridad. Las cookies pueden ser borradas, aceptadas, ignoradas o bloqueadas.

Fuente
======

https://es.wikipedia.org/wiki/Cookie_(inform%C3%A1tica)

===================================
Códigos de estado de respuesta HTTP
===================================

Los códigos de estado de respuesta HTTP indican si se ha completado
satisfactoriamente una solicitud HTTP específica. Las respuestas se agrupan en
cinco clases:

Respuestas informativas (100-199),

Respuestas satisfactorias (200-299),

Redirecciones (300-399),

Errores de los clientes (400-499),

y errores de los servidores (500-599).

Los códigos de estado se definen en la sección 10 deRFC 2616. Puedes obtener las
especificaciones actualizadas en RFC 7231.

Respuestas informativas
=======================

100 Continue

    Esta respuesta provisional indica que todo hasta ahora está bien y que el
    cliente debe continuar con la solicitud o ignorarla si ya está terminada.

101 Switching Protocol

    Este código se envía en respuesta a un encabezado de solicitud Upgrade
    (en-US) por el cliente e indica que el servidor acepta el cambio de
    protocolo propuesto por el agente de usuario.

102 Processing (en-US) (WebDAV (en-US))

    Este código indica que el servidor ha recibido la solicitud y aún se
    encuentra procesandola, por lo que no hay respuesta disponible.

103 Early Hints (en-US)

    Este código de estado está pensado principalmente para ser usado con el
    encabezado Link, permitiendo que el agente de usuario empiece a pre-cargar
    (en-US) recursos mientras el servidor prepara una respuesta.

Respuestas satisfactorias
=========================

GET: El recurso se ha obtenido y se transmite en el cuerpo del mensaje.

HEAD: Los encabezados de entidad están en el cuerpo del mensaje.

PUT o POST: El recurso que describe el resultado de la acción se transmite en el
cuerpo del mensaje.

TRACE: El cuerpo del mensaje contiene el mensaje de solicitud recibido por el
servidor.

200 OK

    La solicitud ha tenido éxito. El significado de un éxito varía dependiendo
    del método HTTP:

201 Created

    La solicitud ha tenido éxito y se ha creado un nuevo recurso como resultado
    de ello. Ésta es típicamente la respuesta enviada después de una petición
    PUT.

202 Accepted

    La solicitud se ha recibido, pero aún no se ha actuado. Es una petición "sin
    compromiso", lo que significa que no hay manera en HTTP que permite enviar
    una respuesta asíncrona que indique el resultado del procesamiento de la
    solicitud. Está pensado para los casos en que otro proceso o servidor maneja
    la solicitud, o para el procesamiento por lotes.

203 Non-Authoritative Information

    La petición se ha completado con éxito, pero su contenido no se ha obtenido
    de la fuente originalmente solicitada, sino que se recoge de una copia local
    o de un tercero. Excepto esta condición, se debe preferir una respuesta de
    200 OK en lugar de esta respuesta.

204 No Content (en-US)

    La petición se ha completado con éxito pero su respuesta no tiene ningún
    contenido, aunque los encabezados pueden ser útiles. El agente de usuario
    puede actualizar sus encabezados en caché para este recurso con los nuevos
    valores.

205 Reset Content (en-US)

    La petición se ha completado con éxito, pero su respuesta no tiene
    contenidos y además, el agente de usuario tiene que inicializar la página
    desde la que se realizó la petición, este código es útil por ejemplo para
    páginas con formularios cuyo contenido debe borrarse después de que el
    usuario lo envíe.

206 Partial Content

    La petición servirá parcialmente el contenido solicitado. Esta
    característica es utilizada por herramientas de descarga como wget para
    continuar la transferencia de descargas anteriormente interrumpidas, o para
    dividir una descarga y procesar las partes simultáneamente.

207 Multi-Status (en-US) (WebDAV (en-US))

    Una respuesta Multi-Estado transmite información sobre varios recursos en
    situaciones en las que varios códigos de estado podrían ser apropiados. El
    cuerpo de la petición es un mensaje XML.

208 Multi-Status (en-US) (WebDAV (en-US))

    El listado de elementos DAV ya se notificó previamente, por lo que no se van
    a volver a listar.

226 IM Used (en-US) (HTTP Delta encoding)

    El servidor ha cumplido una petición GET para el recurso y la respuesta es
    una representación del resultado de una o más manipulaciones de instancia
    aplicadas a la instancia actual.

Redirecciones
=============

300 Multiple Choice (en-US)

    Esta solicitud tiene más de una posible respuesta. User-Agent o el usuario
    debe escoger uno de ellos. No hay forma estandarizada de seleccionar una de
    las respuestas.

301 Moved Permanently (en-US)

    Este código de respuesta significa que la URI del recurso solicitado ha sido
    cambiado. Probablemente una nueva URI sea devuelta en la respuesta.

302 Found

    Este código de respuesta significa que el recurso de la URI solicitada ha
    sido cambiado temporalmente. Nuevos cambios en la URI serán agregados en el
    futuro. Por lo tanto, la misma URI debe ser usada por el cliente en futuras
    solicitudes.

303 See Other (en-US)

    El servidor envía esta respuesta para dirigir al cliente a un nuevo recurso
    solicitado a otra dirección usando una petición GET.

304 Not Modified

    Esta es usada para propósitos de "caché". Le indica al cliente que la
    respuesta no ha sido modificada. Entonces, el cliente puede continuar usando
    la misma versión almacenada en su caché.

305 Use Proxy Obsoleto

    Fue definida en una versión previa de la especificación del protocolo HTTP
    para indicar que una respuesta solicitada debe ser accedida desde un proxy.
    Ha quedado obsoleta debido a preocupaciones de seguridad correspondientes a
    la configuración de un proxy.

306 unused

    Este código de respuesta ya no es usado más. Actualmente se encuentra
    reservado. Fue usado en previas versiones de la especificación HTTP1.1.

307 Temporary Redirect (en-US)

    El servidor envía esta respuesta para dirigir al cliente a obtener el
    recurso solicitado a otra URI con el mismo método que se usó la petición
    anterior. Tiene la misma semántica que el código de respuesta HTTP 302
    Found, con la excepción de que el agente usuario no debe cambiar el método
    HTTP usado: si un POST fue usado en la primera petición, otro POST debe ser
    usado en la segunda petición.

308 Permanent Redirect (en-US)

    Significa que el recurso ahora se encuentra permanentemente en otra URI,
    especificada por la respuesta de encabezado HTTP Location:. Tiene la misma
    semántica que el código de respuesta HTTP 301 Moved Permanently, con la
    excepción de que el agente usuario no debe cambiar el método HTTP usado: si
    un POST fue usado en la primera petición, otro POST debe ser usado en la
    segunda petición.

Errores de cliente
==================

400 Bad Request

    Esta respuesta significa que el servidor no pudo interpretar la solicitud
    dada una sintaxis inválida.

401 Unauthorized

    Es necesario autenticar para obtener la respuesta solicitada. Esta es
    similar a 403, pero en este caso, la autenticación es posible.

402 Payment Required

    Este código de respuesta está reservado para futuros usos. El objetivo
    inicial de crear este código fue para ser utilizado en sistemas digitales de
    pagos. Sin embargo, no está siendo usado actualmente.

403 Forbidden

    El cliente no posee los permisos necesarios para cierto contenido, por lo
    que el servidor está rechazando otorgar una respuesta apropiada.

404 Not Found

    El servidor no pudo encontrar el contenido solicitado. Este código de
    respuesta es uno de los más famosos dada su alta ocurrencia en la web.

405 Method Not Allowed

    El método solicitado es conocido por el servidor pero ha sido deshabilitado
    y no puede ser utilizado. Los dos métodos obligatorios, GET y HEAD, nunca
    deben ser deshabilitados y no deberían retornar este código de error.

406 Not Acceptable (en-US)

    Esta respuesta es enviada cuando el servidor, después de aplicar una
    negociación de contenido servidor-impulsado (en-US), no encuentra ningún
    contenido seguido por la criteria dada por el usuario.

407 Proxy Authentication Required (en-US)

    Esto es similar al código 401, pero la autenticación debe estar hecha a
    partir de un proxy.

408 Request Timeout

    Esta respuesta es enviada en una conexión inactiva en algunos servidores,
    incluso sin alguna petición previa por el cliente. Significa que el servidor
    quiere desconectar esta conexión sin usar. Esta respuesta es muy usada desde
    algunos navegadores, como Chrome, Firefox 27+, o IE9, usa mecanismos de
    pre-conexión HTTP para acelerar la navegación. También hay que tener en
    cuenta que algunos servidores simplemente desconecta la conexión sin enviar
    este mensaje.

409 Conflict (en-US)

    Esta respuesta puede ser enviada cuando una petición tiene conflicto con el
    estado actual del servidor.

410 Gone (en-US)

    Esta respuesta puede ser enviada cuando el contenido solicitado ha sido
    borrado del servidor.

411 Length Required (en-US)

    El servidor rechaza la petición porque el campo de encabezado Content-Length
    no esta definido y el servidor lo requiere.

412 Precondition Failed (en-US)

    El cliente ha indicado pre-condiciones en sus encabezados la cual el
    servidor no cumple.

413 Payload Too Large

    La entidad de petición es más larga que los límites definidos por el
    servidor; el servidor puede cerrar la conexión o retornar un campo de
    encabezado Retry-After.

414 URI Too Long (en-US)

    La URI solicitada por el cliente es más larga de lo que el servidor está
    dispuesto a interpretar.

415 Unsupported Media Type (en-US)

    El formato multimedia de los datos solicitados no está soportado por el
    servidor, por lo cual el servidor rechaza la solicitud.

416 Requested Range Not Satisfiable (en-US)

    El rango especificado por el campo de encabezado Range en la solicitud no
    cumple; es posible que el rango está fuera del tamaño de los datos objetivo
    del URI.

417 Expectation Failed (en-US)

    Significa que la expectativa indicada por el campo de encabezado Expect
    solicitada no puede ser cumplida por el servidor.

418 I'm a teapot

    El servidor se rehúsa a intentar hacer café con una tetera.

421 Misdirected Request (en-US)

    La petición fue dirigida a un servidor que no es capaz de producir una
    respuesta. Esto puede ser enviado por un servidor que no está configurado
    para producir respuestas por la combinación del esquema y la autoridad que
    están incluidos en la URI solicitada.

422 Unprocessable Entity (en-US) (WebDAV (en-US))

    La petición estaba bien formada pero no se pudo seguir debido a errores de
    semántica.

423 Locked (en-US) (WebDAV (en-US))

    El recurso que está siendo accedido está bloqueado.

424 Failed Dependency (en-US) (WebDAV (en-US))

    La petición falló debido a una falla de una petición previa.

426 Upgrade Required (en-US)

    El servidor se rehúsa a aplicar la solicitud usando el protocolo actual pero
    puede estar dispuesto a hacerlo después que el cliente se actualice a un
    protocolo diferente. El servidor envía un encabezado Upgrade en una
    respuesta para indicar los protocolos requeridos.

428 Precondition Required (en-US)

    El servidor origen requiere que la solicitud sea condicional. Tiene la
    intención de prevenir problemas de 'actualización perdida', donde un cliente
    OBTIENE un estado del recurso, lo modifica, y lo PONE devuelta al servidor,
    cuando mientras un tercero ha modificado el estado del servidor, llevando a
    un conflicto.

429 Too Many Requests (en-US)

    El usuario ha enviado demasiadas solicitudes en un periodo de tiempo dado.

431 Request Header Fields Too Large (en-US)

    El servidor no está dispuesto a procesar la solicitud porque los campos de
    encabezado son demasiado largos. La solicitud PUEDE volver a subirse después
    de reducir el tamaño de los campos de encabezado solicitados.

451 Unavailable For Legal Reasons (en-US)

    El usuario solicita un recurso ilegal, como alguna página web censurada por
    algún gobierno.

Errores de servidor
===================

500 Internal Server Error

    El servidor ha encontrado una situación que no sabe cómo manejarla.

501 Not Implemented (en-US)

    El método solicitado no está soportado por el servidor y no puede ser
    manejado. Los únicos métodos que los servidores requieren soporte (y por lo
    tanto no deben retornar este código) son GET y HEAD.

502 Bad Gateway

    Esta respuesta de error significa que el servidor, mientras trabaja como una
    puerta de enlace para obtener una respuesta necesaria para manejar la
    petición, obtuvo una respuesta inválida.

503 Service Unavailable

    El servidor no está listo para manejar la petición. Causas comunes puede ser
    que el servidor está caído por mantenimiento o está sobrecargado. Hay que
    tomar en cuenta que junto con esta respuesta, una página usuario-amigable
    explicando el problema debe ser enviada. Estas respuestas deben ser usadas
    para condiciones temporales y el encabezado HTTP Retry-After: debería, si es
    posible, contener el tiempo estimado antes de la recuperación del servicio.
    El webmaster debe también cuidar los encabezados relacionados al caché que
    son enviados junto a esta respuesta, ya que estas respuestas de condición
    temporal deben usualmente no estar en el caché.

504 Gateway Timeout

    Esta respuesta de error es dada cuando el servidor está actuando como una
    puerta de enlace y no puede obtener una respuesta a tiempo.

505 HTTP Version Not Supported

    La versión de HTTP usada en la petición no está soportada por el servidor.

506 Variant Also Negotiates (en-US)

    El servidor tiene un error de configuración interna: negociación de
    contenido transparente para la petición resulta en una referencia circular.

507 Insufficient Storage (en-US)

    El servidor tiene un error de configuración interna: la variable de recurso
    escogida está configurada para acoplar la negociación de contenido
    transparente misma, y no es por lo tanto un punto final adecuado para el
    proceso de negociación.

508 Loop Detected (en-US) (WebDAV (en-US))

    El servidor detectó un ciclo infinito mientras procesaba la solicitud.

510 Not Extended (en-US)

    Extensiones adicionales para la solicitud son requeridas para que el
    servidor las cumpla.

511 Network Authentication Required (en-US)

    El código de estado 511 indica que el cliente necesita autenticar para
    obtener acceso a la red.

Fuente
======

https://developer.mozilla.org/es/docs/Web/HTTP/Status

========
API REST
========

API REST (Representational State Transfer) es una arquitectura que permite la
comunicación y transferencia de datos entre sistemas a través del protocolo
HTTP.

Fuente
======

LuzIA

=========================================
Arquitectura monolitica vs microservicios
=========================================

Arquitectura monolitica en el software
======================================

Un enfoque monolítico en el software se refiere a un tipo de arquitectura en la
que toda la aplicación se desarrolla como una sola unidad, es decir, todos los
componentes y funcionalidades están integrados y desplegados juntos. Esto puede
hacer que la aplicación sea más sencilla de desarrollar e implementar, pero
también puede tener limitaciones en cuanto a escalabilidad y flexibilidad.

Arquitectura de microservicios
==============================

En este enfoque, la aplicación se descompone en pequeños servicios
independientes, cada uno con su propia lógica. Estos servicios pueden
comunicarse entre sí a través de interfaces bien definidas. La ventaja de
esta arquitectura es que permite una mayor escalabilidad, flexibilidad y
mantenimiento de la aplicación. Cada enfoque tiene sus ventajas y desventajas, y
la elección depende de las necesidades específicas del proyecto.

Fuente
======

LuzIA

================
¿Qué es sidebar?
================

El sidebar, conocido en castellano como barra lateral, es el espacio que está al
lado del contenido de una página web (especialmente en un blog) tanto a la
izquierda como a la derecha.

Se utiliza normalmente para mostrar elementos que queremos que estén a la vista
del usuario, como pueden ser un formulario de suscripción, las últimas entradas
del blog, o una imagen que enlace a algún producto o servicio que se venda en la
web, entre otras cosas. Como su propio nombre indica, se muestra en forma de
"barra".

Aunque es muy normal encontrar blogs con elementos en el sidebar, en los últimos
años hay una clara tendencia de no incluir nada en ellos.

Esto ocurre por dos motivos:

El propietario del blog quiere que el usuario se concentre en la lectura del
artículo sin que haya nada que le distraiga de ella.

Cada vez hay más gente que navega desde dispositivos móviles, y los sidebars se
suelen mostrar al final del todo en las versiones móviles de las webs, por lo
que el usuario en raras ocasiones llega a bajar hasta ellos.

Fuente
======

https://lawebdetuvida.com/que-es-un-sidebar/

=====================
¿Qué es el Tethering?
=====================

El "Tethering", del verbo inglés "Tether" , se refiere (traducido literalmente
al castellano) a "atar o fijar". En nuestro caso, y aplicado a internet y la
telefonía móvil, es el término que utilizamos para dar nombre a la función de
compartir la conexión a internet 4G/5G de nuestros smartphones. Así, otros
dispositivos (PC´s, tablets, consolas, etc.) podrán "navegar" utilizando el bono
de datos de nuestra línea móvil de Orange.

Tipos de Tethering
==================

Existen varios métodos para compartir la conexión a internet 4G/5G de nuestros
smartphones con otros dispositivos. Entre estos se encuentran:

* Conexión por Bluetooth: puede ser necesario instalar drivers en PC/MAC.

* Conexión por cable USB: es necesario instalar drivers en PC/MAC y llevar un
cable siempre encima.

* Conexión punto de acceso Wi-Fi: la más utilizada, en la que nuestro móvil se
convierte en un punto de acceso Wi-Fi, y mediante la que podremos conectar
varios dispositivos (tablets, PCs, consolas, etc.) a internet de forma simultánea.

El punto de acceso Wi-Fi, es la forma más sencilla de compartir la conexión de
nuestro bono de datos móvil 4G/5G a través de nuestro smartphone.

Fuente
======

https://ayuda.orange.es/particulares/movil/mi-movil/configurar/2038-que-es-el
-tethering-y-como-puedo-compartir-la-conexion-a-internet-movil-4g-5g-de-mi
-smartphone

=======================
Latencia en informática
=======================

La latencia se refiere al tiempo que tarda un dispositivo en responder a una
solicitud después de recibirla. Por ejemplo, en el contexto de internet, la
latencia es el tiempo que tarda en llegar un paquete de datos desde tu
dispositivo a su destino y de vuelta. Una baja latencia significa una
respuesta más rápida, mientras que una alta latencia puede causar retrasos en
la comunicación.

Fuente
======

LuzIA

=============================
Carga diferida o lazy loading
=============================

Es una técnica de optimización utilizada en desarrollo web y aplicaciones que
retrasa la carga de ciertos recursos hasta que sean realmente necesarios, en
lugar de cargarlos de inmediato. Esto mejora el rendimiento y reduce el tiempo
de carga inicial de una página o aplicación.

Por ejemplo, en una aplicación web, si una página tiene muchas imágenes o
recursos multimedia, el lazy loading solo cargará aquellas imágenes que sean
visibles en la pantalla del usuario (en el viewport). A medida que el usuario
hace scroll y más imágenes se vuelven visibles, estas se irán cargando
dinámicamente.

Ventajas del lazy loading
=========================

-Mejora el tiempo de carga inicial: Como solo se cargan los recursos necesarios
al principio, la página carga más rápido.

-Optimiza el uso de ancho de banda: Evita cargar recursos que el usuario podría
no llegar a ver, ahorrando ancho de banda tanto en el servidor como en el
cliente.

-Mejor experiencia de usuario: Al mejorar el rendimiento, la página es más
receptiva y fluida, lo que genera una mejor interacción para el usuario.

Ejemplo:

Si una página tiene 50 imágenes, en lugar de cargar todas de una vez, se cargan
solo las primeras visibles. El resto se irán cargando conforme el usuario haga
scroll hacia abajo.

En JavaScript o frameworks como Vue.js o React, el lazy loading se utiliza para
cargar dinámicamente componentes o recursos en lugar de hacerlo al inicio, lo
que es especialmente útil para aplicaciones grandes o con muchos módulos.

Fuente
======

ChatGPT