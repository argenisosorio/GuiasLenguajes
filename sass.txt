==================
Guía de SCSS by dM
==================

Documentacion completa en: http://sass-lang.com/

// Comentarios de una línea en SCSS

/* Comentarios de varias
   líneas
   en SCSS
*/

==================================
Sass (lenguaje de hojas de estilo)
==================================

Sass (Syntactically Awesome Stylesheets) es un lenguaje de hoja de estilos.

Sass es un metalenguaje de Hojas de Estilo en Cascada (CSS). Es un lenguaje de
script que es traducido a CSS. SassScript es el lenguaje de script en sí mismo.

Sass consiste en una sintaxis de bloques como CSS. Éste usa llaves para denotar
bloques de código y punto y coma (;) para separar las líneas dentro de un
bloque.

La sintaxis indentada y los ficheros SCSS tienen las extensiones .sass y .scss
respectivamente.

CSS3 consiste en una serie de selectores y pseudo-selectores que agrupan las
reglas que son aplicadas.

Sass (en el amplio contexto de ambas sintaxis) extiende CSS proveyendo de varios
mecanismos que están presentes en los lenguajes de programación tradicionales,
particularmente lenguajes orientados a objetos, pero éste no está disponible
para CSS3 como tal.

La implementación oficial de Sass es open-source y escrita en Ruby.

SCSS es un metalenguaje anidado, lo que es válido en CSS es válido en SCSS con
la misma semántica. Sass soporta la integración con la extensión de Firefox
Firebug.

SassScript proporciona los mecanismos siguientes: variables, nesting
(anidamiento), mixins, y herencia de los selectores.

----- Variables -----

Sass permite la definición de variables.
Las variables comienzan con el signo de dólar ($).
La asignación de variables se hace con los dos puntos (:).

SassScript permite 4 tipos de datos:6

-Números (incluyendo las unidades)
-Strings (con comillas o sin ellas)
-Colores (código, o nombre)
-Booleanos

Las variables pueden ser resultados o argumentos de varias funciones
disponibles.

Durante el proceso de traducción, los valores de las variables son insertados en
el documento CSS de salida.

En el estilo SCSS

$blue: #3bbfce;
$margin: 16px;

.content-navigation {
  border-color: $blue;
  color:
    darken($blue, 9%);
}

.border {
  padding: $margin / 2;
  margin: $margin / 2;
  border-color: $blue;
}

O el estilo SASS

$blue: #3bbfce
$margin: 16px

.content-navigation
  border-color: $blue
  color: darken($blue, 9%)

.border
  padding: $margin/2
  margin:  $margin/2
  border-color: $blue

Debe compilar a:

.content-navigation {
  border-color: #3bbfce;
  color: #2b9eab;
}

.border {
  padding: 8px;
  margin: 8px;
  border-color: #3bbfce;
}

----- Nesting (Anidamiento) -----

CSS soporta anidamiento lógico, pero los bloques de código no son anidados.

Sass permite que el código anidado sea insertado dentro de cualquier otro
bloque.

table.hl {
  margin: 2em 0;
  td.ln {
    text-align: right;
  }
}

li {
  font: {
    family: serif;
    weight: bold;
    size: 1.2em;
  }
}

Debe compilar a:

table.hl {
  margin: 2em 0;
}
table.hl td.ln {
  text-align: right;
}

li {
  font-family: serif;
  font-weight: bold;
  font-size: 1.2em;
}

Otros tipos de anidado más complejos incluyendo namespace anidamiento y
referencias al padre son discutidos en la documentación de Sass.

----- Mixins -----

CSS no soporta mixins. Cualquier código duplicado debe ser repetido en cada
lugar.

Un mixin es una sección de código que contiene código Sass. Cada vez que se
llama un mixin en el proceso de conversión el contenido del mismo es insertado
en el lugar de la llamada. Los mixin permiten una solución limpia a las
repeticiones de código, así como una forma fácil de alterar el mismo.

@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td, th {padding: 2px}
}

#data {
  @include table-base;
}

Debe compilar a:

#data th {
  text-align: center;
  font-weight: bold;
}
#data td, #data th {
  padding: 2px;
}

----- Argumentos -----

Los mixins también soportan argumentos.

@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
}

Debe compilar a:

#data {
  float: left;
  margin-left: 10px;
}

En combinación

@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td, th {padding: 2px}
}

@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
  @include table-base;
}

Debe compilar a:

#data {
  float: left;
  margin-left: 10px;
}
#data th {
  text-align: center;
  font-weight: bold;
}
#data td, #data th {
  padding: 2px;
}

----- Herencia de selectores -----

Mientras CSS3 soporta la jerarquía Document Object Model (DOM), éste no permite
la herencia de selectores. La herencia se logra insertando una línea dentro de
un bloque de código que use la palabra clave @extend y haga referencia a otro
selector. Los atributos del selector extendido serán aplicados al selector que
hace la llamada.

.error {
  border: 1px #f00;
  background: #fdd;
}
.error.intrusion {
  font-size: 1.3em;
  font-weight: bold;
}

.badError {
  @extend .error;
  border-width: 3px;
}

Debe compilar a:

.error, .badError {
  border: 1px #f00;
  background: #fdd;
}

.error.intrusion,
.badError.intrusion {
  font-size: 1.3em;
  font-weight: bold;
}

.badError {
  border-width: 3px;
}

*Sass soporta multiple inheritance (herencia multiple).