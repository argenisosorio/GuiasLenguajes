===================
Guía MariaDB by dM
===================

Nota:
-Usaremos $ para describir los comandos que se usaran con usuario regular.
-Usaremos # para describir los comandos que se usaran con superusuario.

===========
Instalación
===========

Actualizar los repositorios

$ sudo apt update

Instalar MariaDB

$ sudo apt install mariadb-server

Luego de la instalación nos pedirá que escribamos una contraseña para el usuario
root de mariadb.

-----

Chequear la instalación con:

$ mysql -V

mysql  Ver 15.1 Distrib 10.0.30-MariaDB, for debian-linux-gnu (x86_64) using 
eadline 5.2

================================
Acceder a la consola de MariaDB
================================

Nos logeamos en MariaDB using el usuario root de MariaDB, nos pedirá el password
del usuario root.

$ mysql -u root -p

ó

$ sudo mysql -u root

Nos pedirá el password del usuario que tengamos configurado con sudo.

-----

Para salir de la consola de MariaDB usamos:

> exit
> \q
Ctrl + D

-----

Para ver los comandos disponibles

> \h

==================
Gestión de MariaDB
==================

Iniciar el servidor de MariaDB

$ sudo systemctl start mariadb

-----

Detener el servidor de MariaDB

$ sudo systemctl stop mariadb

-----

Reiniciar el servidor de MariaDB

$ sudo systemctl restart mariadb

-----

Chequear el estaus del servidor de MariaDB

$ sudo systemctl status mariadb

===================
Gestión de usuarios
===================

Crear un usuario y asignarle el password.

> CREATE USER 'user_name' IDENTIFIED BY 'user123456';

-----

Crea un nuevo usuario con host localhost

> CREATE USER 'username'@'localhost' IDENTIFIED BY 'tu_contraseña';

-----

Eliminar un usuario creado.

> DROP USER user_name;

-----

Eliminar un usuario creado especificando el host.

> DROP USER 'admin'@'localhost';

-----

Mostrar la lista de usuarios con todos sus campos

> SELECT * FROM mysql.user;

-----

Mostrar la lista de usuarios con campos relevantes

> SELECT host, USER, password FROM mysql.user;

=========================
Gestión de bases de datos
=========================

Crear una base de datos y asignarele un dueño

> CREATE DATABASE db_name;

Sobre la base de datos recién creada le asignamos el usuario:

> GRANT ALL PRIVILEGES ON db_name.* TO 'user_name'@'localhost';

Refrescamos el esquema de las tablas de MySQL.

> FLUSH PRIVILEGES;

-----

Listas las bases de datos disponibles.

> show databases;

-----

Listas las bases de datos disponibles con sus dueños.

> SELECT Db AS `Database`, User AS `Owner`, Host FROM mysql.db WHERE User != '';

-----

Listar todas las tablas de una base de datos:

> SHOW FULL TABLES FROM mi_base_de_datos;

-----

Listar todas las tablas de una base de datos ya seleccionada:

> USE test_db;
Database changed

MariaDB [test_db]> SHOW FULL TABLES;

-----

Borrar una base de datos específica:

> DROP DATABASE db_name;

Si la base de datos no existe va a dar error, podemos usar el parámeteo IF
EXISTS para que no de error.

> DROP DATABASE IF EXISTS db_name;

-----

Ver todos los campos de una tabla, debe estar selecciona la base de datos, por
ejemplo test_db:

> DESCRIBE nombre_de_la_tabla;

Ejemplo:

MariaDB [test_db]> DESCRIBE users;

+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int(11)     | NO   | PRI | NULL    | auto_increment |
| username | varchar(50) | NO   |     | NULL    |                |

Tambien podermos usar este otro comando:

> SHOW COLUMNS FROM nombre_de_la_tabla;

Ejemplo:

MariaDB [test_db]> SHOW COLUMNS FROM users;

==============================
Desinstalar e instalar MariaDB
==============================

$ sudo apt purge mariadb-server

$ sudo rm -rf /var/lib/mysql/

$ sudo apt-get autoremove --purge mariadb-server

$ sudo apt install mariadb-server

========================================================================
ERROR 1396 (HY000): Operation CREATE USER failed for 'admin'@'localhost'
========================================================================

> drop user admin@localhost;

> flush privileges;

> CREATE USER 'user'@'localhost' IDENTIFIED BY 'admin_password';

======================================
Hacer un respaldo de una base de datos
======================================

$ mysqldump -u nombre_de_usuario -p nombre_base_de_datos > nombredelarchivo.sql

===========================
Restaurar una base de datos
===========================

$ mysql -u usuario -p nombre_base_de_datos < nombre_base_de_datos.sql

Ejemplo de archivo .sql para probar la importación correcta, crear un archivo
.sql con el siguiente contenido, para la importación correcta la base de datos
debe estar creada y vacía dentro de MaríaDB:

-- Crear base de datos
CREATE DATABASE IF NOT EXISTS cine_db;
USE cine_db;

-- Tabla de categorías
CREATE TABLE categorias (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL UNIQUE
);

-- Tabla de directores
CREATE TABLE directores (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    nacionalidad VARCHAR(50)
);

-- Tabla de películas
CREATE TABLE peliculas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    titulo VARCHAR(150) NOT NULL,
    año YEAR,
    duracion INT, -- en minutos
    categoria_id INT,
    director_id INT,
    FOREIGN KEY (categoria_id) REFERENCES categorias(id),
    FOREIGN KEY (director_id) REFERENCES directores(id)
);

-- Insertar categorías
INSERT INTO categorias (nombre) VALUES
('Drama'),
('Ciencia Ficción'),
('Acción'),
('Comedia'),
('Terror'),
('Romance'),
('Aventura'),
('Animación'),
('Thriller'),
('Fantasía');

-- Insertar directores
INSERT INTO directores (nombre, nacionalidad) VALUES
('Christopher Nolan', 'Británico'),
('Steven Spielberg', 'Estadounidense'),
('Hayao Miyazaki', 'Japonés'),
('James Cameron', 'Canadiense'),
('Quentin Tarantino', 'Estadounidense'),
('Guillermo del Toro', 'Mexicano'),
('Martin Scorsese', 'Estadounidense'),
('Alfonso Cuarón', 'Mexicano'),
('Jane Campion', 'Neozelandesa'),
('Denis Villeneuve', 'Canadiense');

-- Insertar películas
INSERT INTO peliculas (titulo, año, duracion, categoria_id, director_id) VALUES
('El Origen', 2010, 148, 2, 1),
('La Lista de Schindler', 1993, 195, 1, 2),
('El Viaje de Chihiro', 2001, 125, 8, 3),
('Avatar', 2009, 162, 2, 4),
('Pulp Fiction', 1994, 154, 9, 5),
('El Laberinto del Fauno', 2006, 118, 10, 6),
('El Irlandés', 2019, 209, 1, 7),
('Gravity', 2013, 91, 2, 8),
('El Piano', 1993, 121, 1, 9),
('Dune', 2021, 155, 2, 10);

-- Consulta para verificar los datos
SELECT
    p.titulo AS 'Película',
    p.año AS 'Año',
    p.duracion AS 'Duración (min)',
    c.nombre AS 'Categoría',
    d.nombre AS 'Director',
    d.nacionalidad AS 'Nacionalidad'
FROM peliculas p
LEFT JOIN categorias c ON p.categoria_id = c.id
LEFT JOIN directores d ON p.director_id = d.id
ORDER BY p.año DESC;

====================================
Crear una tabla en una base de datos
====================================

1- Lo primero que debemos hacer es seleccionar la base de datos con la cual
vamos a trabajar, hacemos uso de la directiva USE, supongamos que tenemos una
base de datos llamada test_db:

> USE test_db;
Database changed

Al seleccionar a test_db el prompt nos debe quedar así:

MariaDB [test_db]>

2- Ahora vamos a crear la tabla users dentro de test_db:

MariaDB [test_db]> CREATE TABLE users;
ERROR 1113 (42000): A table must have at least 1 column

Nos da un error porque al momento de crear una tabla esta debe contener al menos
un campo o columna, entonces corregimos la sentencia para agregar los campos id
y username:

MariaDB [test_db]> CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL);
Query OK, 0 rows affected (0,015 sec)

3- Ahora chequeamos que se haya creado la tabla con:

MariaDB [test_db]> SHOW FULL TABLES;

+-------------------+------------+
| Tables_in_test_db | Table_type |
+-------------------+------------+
| users             | BASE TABLE |
+-------------------+------------+
1 row in set (0,001 sec)

==================================
Agregar un nuevo campo a una tabla
==================================

La base de datos debe estar seleccionada. En este ejemplo vamos a agregar el
campo age de tipo int y que por defecto sea null.

MariaDB [test_db]> ALTER TABLE users ADD COLUMN age INT DEFAULT NULL;

Query OK, 0 rows affected (0,007 sec)
Records: 0  Duplicates: 0  Warnings: 0

MariaDB [test_db]> DESCRIBE users;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int(11)     | NO   | PRI | NULL    | auto_increment |
| username | varchar(50) | NO   |     | NULL    |                |
| age      | int(11)     | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
3 rows in set (0,001 sec)

==============================
Eliminar un campo de una tabla
==============================

La base de datos debe estar seleccionada:

> ALTER TABLE nombre_de_la_tabla DROP COLUMN nombre_del_campo;

Ejemplo:

> ALTER TABLE users DROP COLUMN age;

============================================
Insertar información en un campo de la tabla
============================================

La base de datos debe estar seleccionada:

> INSERT INTO nombre_de_la_tabla (nombre_del_campo) VALUES ('dato_a_guardar');

Ejemplo:

> INSERT INTO users (username) VALUES ('pedroperez');

================================
Insertar un registro en la tabla
================================

Ahora vamos a insetar información en varios campos a la vez:

MariaDB [test_db]> INSERT INTO users (username, age) VALUES ('pedroperez', 20);

=====================
Error MySQL extension
=====================

Your PHP installation appears to be missing the MySQL extension which is required by WordPress.

$ sudo apt install php-mysql

$ sudo systemctl restart apache2

Fuente
======

ChatGPT

=============================================================================================
Error de Ninguna de las extensiones PHP soportadas (MySQLi, MySQL, PDO_MySQL) está disponible
=============================================================================================

Colocar la versión de PHP que está configurada:

$ sudo apt install php7.4-mysql

$ sudo systemctl restart apache2
