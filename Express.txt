=====================
Guía de Express by dM
=====================

==============
Qué es Express
==============

Express es un framework de aplicaciones web minimalista y flexible para Node.js. 
Se ha convertido en el estándar de facto para construir aplicaciones web y APIs 
(interfaces de programación de aplicaciones) con Node.js.

Características principales de Express:
=======================================

-Minimalista y no opinionado: Express proporciona las funcionalidades esenciales 
para construir una aplicación web sin imponer una estructura o decisiones 
arquitectónicas específicas. Esto te da mucha libertad para elegir las 
herramientas y la organización que mejor se adapten a tu proyecto.

-Sistema de enrutamiento robusto: Permite definir cómo la aplicación responde a 
las peticiones de los clientes (navegadores, otras aplicaciones) a diferentes 
URLs (rutas) y con diferentes métodos HTTP (GET, POST, PUT, DELETE, etc.).

-Middleware: Es una de las características más potentes de Express. El 
middleware son funciones que tienen acceso al objeto de la petición (req), al 
objeto de la respuesta (res) y a la siguiente función de middleware en el ciclo 
de petición-respuesta de la aplicación. Esto permite realizar tareas como:
    
-Autenticación y autorización.

-Análisis del cuerpo de la petición (por ejemplo, datos de formularios o 
JSON).

-Registro de logs.

-Compresión de respuestas.

-Servir archivos estáticos.

-Manejo de errores.

-Sistema de plantillas (Templating): Soporta varios motores de plantillas (como 
EJS, Handlebars, Pug) que facilitan la generación dinámica de páginas HTML en el 
servidor.

-Manejo de archivos estáticos: Permite servir fácilmente archivos como CSS, 
JavaScript, imágenes, etc.

-Fácil extensibilidad: Su naturaleza minimalista permite extender sus 
funcionalidades a través de una gran cantidad de middleware de terceros 
disponibles a través de npm (Node Package Manager).

-Alto rendimiento: Al estar construido sobre Node.js, hereda su naturaleza no 
bloqueante y orientada a eventos, lo que lo hace adecuado para aplicaciones de 
alto tráfico.

¿Por qué usar Express?
======================

-Simplicidad y rapidez de desarrollo: Facilita la creación de servidores web y 
APIs de manera rápida y con menos código en comparación con el uso directo de 
los módulos HTTP de Node.js.

-Gran comunidad y ecosistema: Cuenta con una comunidad activa y una gran 
cantidad de recursos, documentación y middleware disponibles.

-Ampliamente utilizado: Es la base de muchos otros frameworks y herramientas de 
Node.js, lo que significa que hay mucha experiencia y soporte disponible.

-Parte de stacks populares: Es un componente fundamental de stacks de desarrollo 
full-stack como MEAN (MongoDB, Express.js, Angular, Node.js), MERN (MongoDB, 
Express.js, React, Node.js) y MEVN (MongoDB, Express.js, Vue.js, Node.js).

En resumen, Express.js simplifica la construcción de aplicaciones web y APIs en 
Node.js, proporcionando las herramientas esenciales para manejar rutas, 
middleware, plantillas y archivos estáticos, a la vez que ofrece la flexibilidad 
para adaptarse a las necesidades específicas de cada proyecto.

Fuente
======

Gemini IA

===========================================
Probar node como sistema backend o API REST
===========================================

Versiones usadas:

NodeJS: v20.11.0
NPM: v10.2.4

Ejemplo práctico paso a paso para crear un servidor API REST básico con Node.js
(usando Express, el framework más popular).

1- Inicializa tu proyecto:

Crea carpeta y entra en ella

$ mkdir mi-backend && cd mi-backend

Inicializa proyecto Node (crea package.json)

$ npm init -y

-2 Instala Express:

Instala el framework web

$ npm install express

3- Crea el archivo principal

Crea un archivo llamado server.js y pega este código:

-----

const express = require('express');
const app = express();
const PORT = 3000;

// Middleware para parsear JSON
app.use(express.json());

// Ruta GET de ejemplo
app.get('/', (req, res) => {
  res.send('¡Hola desde Node.js! 🌟');
});

// Ruta POST para recibir datos
app.post('/saludar', (req, res) => {
  const { nombre } = req.body;
  res.json({ mensaje: `Hola, ${nombre || 'desconocido'}!` });
});

// Inicia el servidor
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT} 🚀`);
});

-----

4- Ejecuta el servidor

$ node server.js

Verás este mensaje en consola:

Servidor corriendo en http://localhost:3000 🚀

5- Prueba tu API

GET: Abre tu navegador en http://localhost:3000

Verás: ¡Hola desde Node.js! 🌟

POST: Usa Postman o curl para enviar datos:

$ curl -X POST http://localhost:3000/saludar -H "Content-Type: application/json" -d '{"nombre":"TuNombre"}'

Respuesta:

{ "mensaje": "Hola, TuNombre!" }

Fuente
======

Deepseek
