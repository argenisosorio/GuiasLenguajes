======================
Guía de Guía PHP by dM
======================

====
Nota
====

Usaremos $ para describir los comandos que se usaran con usuario regular.

Usaremos # para describir los comandos que se usaran con superusuario.

=====================================
Instalar php 8 en GNU/Linux Debian 11
=====================================

$ sudo apt-get install apt-transport-https lsb-release ca-certificates

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

$ echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list

$ sudo apt-get update

Si da problema con la firma, volver a ejecutar:

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
--2019-03-18 21:28:18--  https://packages.sury.org/php/apt.gpg

y probar de nuevo el update, luego:

$ sudo apt-get install php8

============================================
Instalar php 7.4 en GNU/Linux Debian 10 y 11
============================================

$ sudo apt-get install apt-transport-https lsb-release ca-certificates

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

$ echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list

$ sudo apt-get update

Si da problema con la firma, volver a ejecutar:

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
--2019-03-18 21:28:18--  https://packages.sury.org/php/apt.gpg

y probar de nuevo el update, luego:

$ sudo apt-get install php7.4

$ sudo apt remove php7.3*

$ sudo apt-get purge php7.3*

===================================================
Instalar y configurar PHP 7.2 en GNU/Linux Debian 9
===================================================

$ sudo apt-get install apt-transport-https lsb-release ca-certificates

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

$ echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list

$ sudo apt-get update

$ sudo apt-get install php7.2-cli

===========================================
Instalar php 7.4 y 8 en GNU/Linux Debian 11
===========================================

$ sudo apt-get install apt-transport-https lsb-release ca-certificates

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

$ echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list

$ sudo apt-get update

Si da problema con la firma, volver a ejecutar:

$ sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
--2019-03-18 21:28:18--  https://packages.sury.org/php/apt.gpg

y probar de nuevo el update, luego:

$ sudo apt-get install php7.4 php8.1

Al ejecutar:

$ php -v

Nos mostrará que la versión por defecto es la 8, pero ejecutando el siguiente
comando podemos elegir la versión que queremos por defecto:

$ sudo update-alternatives --config php

-----

Verificar la versión de php que se instaló.

$ php -v

====================
Servidor web interno
====================

Advertencia
===========

Este servidor web ha sido diseñado para ayudar al desarrollo de aplicaciones.
También puede ser útil para propósitos de prueba o para demostraciones de
aplicaciones que se ejecutan en entornos controlados. No se pretende que sea un
servidor web con todas las funciones. No debe ser utilizado en una red pública.

Iniciando el servidor web:

$ php -S localhost:8000
[Tue May 10 19:51:42 2022] PHP 7.4.25 Development Server (http://localhost:8000) started

$ php8.1 -S localhost:8000
[Tue May 10 19:51:58 2022] PHP 8.1.5 Development Server (http://localhost:8000) started

Si ejecutamos eso en /var/www/html y tenemos un index.php por ejemplo, nos lo
abre automáticamente con el servidor que está corriendo.

============================================
Paquetes de PHP para usar con mysql y apache
============================================

# aptitude install php7.0-gd php7.0-mysql libapache2-mod-php7.0 php7.0-mbstring

===============
Desinstalar php
===============

$ sudo apt remove php7.2*

$ sudo apt-get purge php7.2*

============================
Probar la instalación de PHP
============================

Para probar que tu servicio esta trabajando puedes crear un pequeño archivo y
verlo en tu navegador.

Para hacer esto vamos a crear un archivo en la ruta /var/www/html/:

$ nano /var/www/html/testphp.php

Agrega las lineas siguientes

<?php
// Muestra toda la información, por defecto INFO_ALL
phpinfo();
?>

Para ver este archivo abre tu navegador web y teclea la IP de tu servidor
seguido del archivo que acabas de crear, por ejemplo:

http://127.0.0.1/testphp.php

Si aparece la pagina azul pastel de PHP donde muestra detalles de la versión,
etc, entonces se instalo correctamente.

----------

<!-- Bloque de código php -->

<?php # Comienzo del código php

echo "xxxxx"; # Contenido del bloque

?> <!-- Final del código php -->

-----

<?php

// Comentarios de línea en PHP

# Comentarios de una línea en PHP

/*
Comentario de varias
líneas, igual a C++
*/

?>

=========
Variables
=========

Guardar valores en las variables

$nombre="Olivier";

$apellido="Dacourt";

$edad=24;

======================
Operadores aritméticos
======================

$a + $b Suma las dos variables.
$a - $b Resta las dos variables.
$a * $b Multiplicación de las variables.
$a / $b División entre las dos variables.
$a % $b Módulo Resto de la división de $a entre $b

=========================
Operadores de comparación
=========================

$a == $b Igualdad Devuelve true si $a y $b son iguales.
$a === $b Identidad Verdadero si son iguales y del mismo tipo.
$a != $b Distinto True si son distintos.
$a <> $b Distinto True si son distintos.
$a < $b Menor que Cierto si $a es menor que $b
$a > $b Mayor que Cierto si $a es mayor que $b
$a <= $b Menor o igual Correcto si $a es menor o igual que $b
$a >= $b Mayor o igual Correcto si $a es mayor o igual que $b

===============
El operador !==
===============

El operador !== se utiliza para comprobar si dos valores son diferentes tanto en
valor como en tipo de dato. A diferencia del operador !=, que solo verifica la
igualdad de valor sin tener en cuenta el tipo de dato.

En resumen, la expresión $a !== $b en un if evaluará como verdadera si $a y $b
son diferentes en valor o en tipo de dato. Si son iguales tanto en valor como en
tipo de dato, la expresión evaluará como falsa.

Ejemplos:

$a = 5;
$b = '5';

if ($a !== $b) {
    echo '$a y $b son diferentes en valor o tipo de dato';
} else {
    echo '$a y $b son iguales en valor y tipo de dato';
}
// Salida: $a y $b son diferentes en valor o tipo de dato

$c = 10;
$d = 10;

if ($c !== $d) {
    echo '$c y $d son diferentes en valor o tipo de dato';
} else {
    echo '$c y $d son iguales en valor y tipo de dato';
}
// Salida: $c y $d son iguales en valor y tipo de dato

En el primer ejemplo, aunque $a y $b tienen el mismo valor (5), la expresión $a
!== $b evalúa como verdadera porque tienen diferentes tipos de dato ($a es de
tipo entero y $b es de tipo cadena).

En el segundo ejemplo, tanto $c como $d tienen el mismo valor (10) y también son
del mismo tipo de dato (ambos son enteros), por lo tanto, la expresión $c !== $d
evalúa como falsa.

Fuente
======

ChatGPT

========================
Operadores de asignación
========================

$a++ Incremento $a = $a +1
$a~ Decremento $a = $a -1
++$a Incremento $a = $a +1
~$a Decremento $a = $a -1
$a += $b Suma $a = $a + $b
$a -= $b Resta $a = $a - $b
$a *= $b Multiplicación $a = $a * $b
$a /= $b División $a = $a / $b
$a %= $b Módulo $a = $a % $b
$a &= $b Y $a = $a & $b
$a |= $b O $a = $a | $b
$a A= $b O exclusiva $a = $a A $b
$a .= $b Concatenación $a = $a . $b
$a >>= $b Desplazamiento a la derecha $a = $a >> $b
$a <<= $b Desplazamiento a la izquierda $a = $a << $b

================
Tipos de valores
================

$bool = TRUE; // un valor booleano
$str = "foo"; // una cadena
$int = 12; // un entero
echo gettype($bool); // imprime "boolean"
echo gettype($str); // imprime "string"

-----

PHP nota la diferencia entre mayúsculas y minúsculas en la declaración de
variables.

$var = "Bob";

$Var = "Joe";

echo "$var, $Var";

outputs "Bob, Joe"

-----

Declaraciones válidas e inválidas:

$4site = 'not yet'; // invalid; starts with a number

$_4site = 'not yet'; // valid; starts with an underscore

$tÃƒÂ¤yte = 'mansikka'; // valid; 'ÃƒÂ¤' is ASCII 228 (Extendido)

====
echo
====

Sirve para imprimir por pantalla

Las '' simples, permiten imprimir el contenido literal de caracteres que esté
entre las comillas.

echo '$nombre <br /> $apellido ';

-----

Las "" dobles, permiten incluir variables para imprimirlas junto al texto.

echo "El autor de esta página es: ";

-----

Usando la forma echo() original de la función;

echo ("$nombre $apellido de $edad años");

echo ("xxxx <br /> xxxxxxx");

-----

$a=2;
$b=3;
echo $a + $b; // Imprime 5

-----

$a=2;
$b="3";
echo $a + $b; // Imprime 5

-----

$a=2;
$b="3a";
echo $a + $b; //Imprime 5

-----

$a=2;
$b="a3";
echo $a + $b; //Imprime 2

======================
Variables predefinidas
======================

PHP proporciona una gran cantidad de variables predefinidas a cualquier script
que se ejecute.

Algunas son:

$GLOBALS // Contiene una referencia a cada variable disponible en el espectro de
las variables del script.

$_GET // Variables proporcionadas al script por medio de HTTP GET.

$_POST // Variables proporcionadas al script por medio de HTTP POST.

$_COOKIE // Variables proporcionadas al script por medio de HTTP cookies.

$_SESSION // Variables registradas en la sesión del script.

===============
Suma de enteros
===============

$cifra1=7;
$cifra2=8;
$suma=$cifra1+$cifra2;
echo "La suma de $cifra1 y de $cifra2 es igual a: $suma";

========================
Concatenación de cadenas
========================

$cadena1 = "Hola ";
$cadena2 = "Mundo";
$cadena = $cadena1 . $cadena2;
echo $cadena;

-----

$cadenal = "Troya es ";
$cadena2 = "madre de todos, ";
$cadena3 = "peleen por ella!";
$supercadena = $cadenal . $cadena2 . $cadena3;
echo $supercadena;
echo "<br />";
echo $cadenal . $cadena2 . $cadena3;

==============================
Sintáxis para múltiples líneas
==============================

Existe en PHP una forma más de introducir cadenas, aparte de las comillas, muy
recomendable para largos textos o un considerable conjunto de etiquetas HTML. La
sintaxis es muy sencilla y comienza con el operador (<<<) seguido de una
etiqueta que indica el principio del texto. Después de esto podemos escribir un
conjunto de caracteres muy numerosos y, para finalizar, la etiqueta de fin.

$texto = <<<INICIO
sssssssssss, sssssssssss, dsdasd da das asd ds
sssssssssss, sssssssssss, dsdasd da das asd ds
sssssssssss, sssssssssss, dsdasd da das asd ds
sssssssssss, sssssssssss, dsdasd da das asd ds
INICIO;
echo $texto;

-----

$texto = <<<INICIO
<h1>xxxx<h1>
<br />
<h2>xxxx<h2>
<br />
<h3>xxxx<h3>
INICIO;
echo $texto;

=======
if else
=======

$a=15;
$b=10;
if ($a>=$b) {
    echo ("Verdadero $a es mayor que $b <p>");
}
else {
    echo ("Falso $a es menor que $b <p>");
}

-----

$dia=5;
if ($dia == 1) {
    echo "El día es Lunes";
}
else { if ($dia == 2) {
    echo "El día es Martes";
}
else {if ($dia == 3) {
    echo "El día es Miércoles";
}
else {if ($dia == 4) {
    echo "El día es Jueves";
}
else {if ($dia == 5) {
    echo "El día es Viernes";
}    
}
}
}
}

-----

$day=1;
if ($day == 1) {
    echo "El día es Lunes";
} elseif ($day == 2) {
    echo "El día es Martes";
} elseif ($day == 3) {
    echo "El día es Miércoles";
} elseif ($day == 4) {
    echo "El día es Jueves";
} elseif ($day == 5) {
    echo "El día es Viernes";
}

-----

$num=2;
$num2=4;
$num3=6;
echo "El numero mayor es: ";
if($num > $num2) {
    if($num > $num3) {
        echo $num;
    }
}
if($num2 > $num) {
    if($num2 > $num3) {
        echo $num2;
    }
}
if($num3 > $num2) {
    if($num3 > $num) {
    echo $num3;
    }
}

==========
Constantes
==========

Una constante es un identificador para expresar un valor simple. Como el nombre
sugiere, este valor no puede variar durante la ejecución del script.

El nombre de una constante sigue las mismas reglas que cualquier etiqueta en
PHP. Un nombre de constante válido empieza con una letra o un caracter de
subrayado, seguido por cualquier número deletras, números, o subrayados.

Se puede definir una constante usando la función define(). Una vez definida, no
puede ser modificada ni eliminada.

Solo se puede definir como constantes valores escalares (boolean, integer, float
y string).

Para obtener el valor de una constante solo es necesario especificar su nombre.
A diferencia de las variables, no se tiene que especificar el prefijo $.

Las contantes y las variables (globales) se encuentran en un espacio de nombres
distinto. Esto implica que por ejemplo TRUE y $TRUE son diferentes.

Las contantes solo pueden ser definidas usando la función define(), nunca por
simple
asignación

define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
echo Constant; // outputs "Constant" and issues a notice.

-----

Definimos primero la constante y su contenido:

define ("CONSTANTE","Contenido_constante");
echo CONSTANTE;

Hay que destacar que el signo de $ no hace falta ponerlo.

-----

Agregando un texto largo y etiquetas html

define ("CONSTANTE","El lenguaje SQL permite la comunicación con el sistema
gestor de base de datos. Fue desarrollado<br> sobre un prototipo de gestor de
b.d.d relacionales denominados system r<br> Diseñado por IBM desarrollado en los
años 70, alrededor del 1979 oracle corp. Presento la primera<br> implementación
comercial de SQL.<br>");
echo CONSTANTE;

======
switch
======

$dia = 7 ;
switch ($dia) {
    case 1:
        echo "El día es Lunes";
        break;
    case 2 :
        echo "El día es Martes";
        break;
    case 3 :
        echo "El día es Miércoles";
        break;
    case 4 :
        echo "El día es Jueves";
        break;
    case 5:
        echo "El día es Viernes";
        break;
    case 6 :
        echo "El día es Sábado";
        break;
    case 7:
        echo "El día es Domingo" ;
        break;
    default:
    echo "El día de la semana es incorrecto";
}

===
for
===

#Imprimir los números del 1 al 19
for ($x = 1; $x < 20; $x++) {
    echo "$x<br>";
}

-----

#Imprimir los números del 1 al 9
for ($x = 1; $x < 20; $x++) {
    if ($x == 10) {
        break;
    }
    else {
        echo "$x<br>";
    }
}

=====
while
=====

#Imprimir los números del 1 al 10
$num=1;
while ($num <= 10) {
    echo $num . "<br />";
    $num++;
}

=========
Funciones
=========

function miFuncion() {
    $a = 6; // Declaración de variable
    $b = 11; // Declaración de variable
    $c = $a + $b; // Operación con las variables
    echo $c; // Imprimir el resultado
}
miFuncion(); // Llamado de la función

============================
Variables globales y locales
============================

$a = 6; // Variable global
$b = 12; // Variable global
function miFuncion() {
    global $a, $b; // Declaración de variables globales dentro de la función
    $c = 1; // Variable local
    $d = $a + $b + $c;
    echo $d;
}
miFuncion();

-----

$a = 5; // Variable global
$b = 10; // Variable global
function miFuncion() {
    $c = $GLOBALS["a"] + $GLOBALS["b"]; // Declarando variables globales dentro de la función
    echo $c;
}
miFuncion();

=========================
Parámetros en una función
=========================

Pasando valores por parámetros a una función:

function miFuncion($x) {
    echo $x;
}
miFuncion(5);

-----

Pasando valores por parámetros a una función:

function miFuncion($a,$b) {
    $c = $a + $b;
    echo $c;
}
miFuncion(3,9);

-----

Pasando valores por parámetros a una función con parámetros opcionales

function miFuncion($nombre, $apellido = 'Parra') {
    echo $nombre . " " . $apellido;
    echo "<br>";
}

// Llamada a la función con un solo parámetro
miFuncion("José");  // Esto imprimirá "José Parra"

// Llamada a la función con dos parámetros
miFuncion("José", "García");  // Esto imprimirá "José García"

=======================================
Argumentos por defecto de las funciones
=======================================

function capitales($Pais,$Capital = "Madrid",$habitantes = "muchos") {
    return ("La capital de $Pais es $Capital y tiene $habitantes habitantes.<br>") ;
}
echo capitales("España");
echo capitales("Portugal","Lisboa");
echo capitales("Francia","Paris","muchísimos");

=====================
Funciones matemáticas
=====================

echo sqrt(9); // Raíz cuadrada de 9 es 3
echo "<br />";
echo rand(1,20); // Número aleatorio entre 1 y 20
echo "<br />";
echo pi(); // Número pi

================================
Obtener fecha actual del sistema
================================

a Imprime "am" o "pm" 
A "AM" o "PM"
h La hora en formato (01-12).
H Hora en formato 24 (00-23).
g Hora de 1 a 12 sin un cero delante.
G Hora de 1 a 23 sin cero delante.
i Minutos de 00 a 59.
s Segundos de 00 a 59.
d Día del mes (01 a 31).
j Día del mes sin cero (1 a 31).
w Día de la semana (0 a 6). El 0 es el domingo.
m Mes actual (01 al 12).
n Mes actual sin ceros (1 a 12).
Y Año con 4 dígitos (2004).
y Año con 2 dígitos (04).
z Día del año (0 a 365).
t Número de días que tiene el mes actual.

echo date ("d");
echo "/";
echo date ("m");
echo "/";
echo date ("Y");

-----

echo "Fecha actual: " . date("d-m-Y") . "<br>";
echo "Día del año: " . date("z") . "<br>";

======================
Comparación de cadenas
======================

$cadenal = "Prueba";
$cadena2 = "Prueba";
if (strcmp($cadenal,$cadena2) == 0) { 
    echo "Las dos cadenas son iguales";
}

-----

$cadenal = "Prueba";
$cadena2 = "prueba";
if (strcasecmp($cadenal,$cadena2) == 0) { # strcasecmp no hace distinción entre mayúsculas y minúsculas
    echo "Las dos cadenas son iguales";
}

======================
Sustitución de cadenas
======================

$cadena = "Esta cadena tiene muchas letras";
$cadena = str_replace("Esta","Este",$cadena);
echo str_replace("cadena","conjunto",$cadena);

=====
array
=====

Un array puede ser creado por la construcción de lenguaje array(). Ésta toma un
cierto número de parejas clave => valor separadas con coma.

$matriz = array("foo" => "bar", 12 => true);
echo $matriz["foo"]; // Imprime bar.
echo $matriz[12]; // Imprime 1.

-----

$arreglo = array(5,1,4,2,3);
print_r($arreglo); // print_r() Función que permite imprimir matrices o arreglos

-----

Declaración de un arreglo, imprimir el contenido del arreglo, por posición

$arreglo = array(5,1,4,2,3);
echo $arreglo[0]."<br />";
echo $arreglo[1]."<br />";
echo $arreglo[2]."<br />";
echo $arreglo[3]."<br />";
echo $arreglo[4]."<br />";

-----

Recorrer e imprimir el contenido de un arreglo

$arreglo = array(5,1,4,2,3);
for ($x = 0; $x <= 4; $x++) {
    echo $arreglo[$x];
}

-----

Array como mapa de propiedades

$mapa = array(
        'version' => 5,
        'SO' => 'Linux',
        'idioma' => 'Español',
        'etiquetas_cortas' => true
    );
print_r($mapa);

-----

foreach() para recorrer matrices o arrays

$colores = array('rojo', 'azul', 'verde', 'amarillo');
foreach ($colores as $color) {
    echo "$color <br />";
}

=======
Objetos
=======

Inicialización de Objetos

Para inicializar un objeto, use la sentencia new, lo que instancia el objeto a
una variable.

<?php
class saludo {
  function saludar() {
    echo "Hola esto es un saludo.";
  }
  function saludar2() {
    echo "Hola esto es otro saludo.";
  }
}
$objeto = new saludo; // Creando el objeto
$objeto->saludar(); // Llamando al método de la clase.
$objeto->saludar2();
?>

======
Clases
======

Una clase es una colección de variables y de funciones que acceden a esas
variables.

<?php
class saludo {
  function saludar($cadena) { // Método de la clase que recibe una cadena como parámetro.
    echo $cadena; // Imprimiendo el valor recibido
  }
}
$objeto = new saludo; // Creando el objeto
$objeto->saludar("Esto es un saludo"); // Llamando al método de la clase y pasandole un valor como parámetro.
?>

----

<?php
/* Clase Calculadora con dos metodos para sumar y restar los valores recibidos por
parametros */
class Calculadora {
  function sumar($a,$b) {
    echo $c = $a + $b . "<br />";
  }
  function restar($a,$b) {
    echo $c = $a - $b;
  }
}
$object = new Calculadora;
$object->sumar(10,6);
$object->restar(10,6);
?>

----------

<!-- Guardar datos de un formulario en una variable -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
    </head>
<body>
<form action="#" method="POST">
    Username: <input type="text" name="username"><br />
    <input type="submit" name="submit" value="Submit">
</form>
<?php
$username = $_POST['username'];
echo $username;
?>
</body>
</html>

----------

<!-- Cargar variables con datos de un formulario e imprimirlas -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>  
<form action="#" method="post">
  Cifra 1: <input type="text" name="a"/>
  <br />
  Cifra 2: <input type="text" name="b"/>
  <br />
  <input type="submit" value="Enviar"/>
</form>
<?php
   $a = $_REQUEST['a'];
   $b = $_REQUEST['b'];
   echo $a;
   echo $b;
?>
</body>
</html>

----------

<!-- Capturar datos desde un formulario y escribirlos en el documento -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>
<form action="index.php" method="post">
    Cifra 1: <input type="text" name="cifra1" required>
    <p />
    Cifra 2: <input type="text" name="cifra2" required>
    <p />
    <input type="submit" value="Registrar">
    <input type="reset" value="Limpiar">
</form>
<?php
if (array_key_exists('cifra1',$_POST) and array_key_exists('cifra2',$_POST)
    and $_POST['cifra1']!="" and $_POST['cifra2']!="") {
        $cifra1=$_POST['cifra1'];
        $cifra2=$_POST['cifra2'];
        echo $cifra1."<p />";
        echo $cifra2;
}
?>
</body>
</html>

----------

<!-- Capturar datos desde un formulario y realizar operaciones con los datos -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>
<form action="index.php" method="post">
    Suma de dos cifras:
    <p />
    Cifra 1: <input type="text" name="cifra1" required>
    <p />
    Cifra 2: <input type="text" name="cifra2" required>
    <p />
    <input type="submit" value="Enviar">
    <input type="reset" value="Limpiar">
</form>
<?php
if (array_key_exists('cifra1',$_POST) and array_key_exists('cifra2',$_POST)
    and $_POST['cifra1']!="" and $_POST['cifra2']!="") {
        $cifra1=$_POST['cifra1'];
        $cifra2=$_POST['cifra2'];
        $resultado = $cifra1 + $cifra2;
        echo "El resultado es: ".$resultado;
}
?>
</body>
</html>

----------

<!-- Capturar datos desde un formulario y realizar operaciones con los datos, pasando valores por parámetro a una función -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>
<form action="index.php" method="post">
    Suma de dos cifras:
    <p />
    Cifra 1: <input type="text" name="cifra1" required>
    <p />
    Cifra 2: <input type="text" name="cifra2" required>
    <p />
    <input type="submit" value="Enviar">
    <input type="reset" value="Limpiar">
</form>
<?php
if (array_key_exists('cifra1',$_POST) and array_key_exists('cifra2',$_POST)
    and $_POST['cifra1']!="" and $_POST['cifra2']!="") {
        $cifra1=$_POST['cifra1'];
        $cifra2=$_POST['cifra2'];
        function miFuncion($cifra1,$cifra2) {
            $resultado = $cifra1 + $cifra2;
            echo $resultado;
        }
        miFuncion($cifra1,$cifra2);
}
?>
</body>
</html>

----------

<!-- Capturar datos de un formulario para realizar operaciones (suma y multiplicacion) pasando valores por parámetro a una función -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>
<form action="index.php" method="post">
    Escribir dos cifras:
    <p />
    Cifra 1: <input type="text" name="cifra1" required>
    <p />
    Cifra 2: <input type="text" name="cifra2" required>
    <p />
    Escoja la operación:
    <select name="var_select">
      <option value="suma">suma</option>
      <option value="multiplicacion">multiplicación</option>
    </select>
    <p />
    <input type="submit" value="Enviar">
    <input type="reset" value="Limpiar">
</form>
<?php
if (array_key_exists('cifra1',$_POST) and array_key_exists('cifra2',$_POST) and array_key_exists('var_select',$_POST)
    and $_POST['cifra1']!="" and $_POST['cifra2']!="" and $_POST['var_select']!="") {
        $cifra1=$_POST['cifra1'];
        $cifra2=$_POST['cifra2'];
        $var_select=$_POST['var_select'];
        if ($var_select=="suma") {
            function suma($cifra1,$cifra2) {
                $resultado = $cifra1 + $cifra2;
                echo "El resultado es: ".$resultado;
            }
            suma($cifra1,$cifra2);
        }
        else {
            function multiplicacion($cifra1,$cifra2) {
                $resultado = $cifra1 * $cifra2;
                echo "El resultado es: ".$resultado;
            }
            multiplicacion($cifra1,$cifra2);
        }
}
?>
</body>
</html>

----------

<!-- Calculadora básica en php, capturar datos de un formulario para realizar operaciones basicas pasando valores por parámetro a una función -->
<!doctype html>
<html lang="en">
    <head>
        <title>XXX</title>
        <meta charset="UTF-8">
        <script src="jquery-1.9.1.js" type="text/javascript"></script>
        <link rel="stylesheet" href="styles.css" type="text/css"/>
    </head>
<body>
<form action="index.php" method="post">
    Escribir dos cifras:
    <p />
    Cifra 1: <input type="text" name="cifra1" required>
    <p />
    Cifra 2: <input type="text" name="cifra2" required>
    <p />
    Escoja la operación:
    <select name="var_select">
      <option value="suma">suma</option>
      <option value="resta">resta</option>
      <option value="multiplicacion">multiplicación</option>
      <option value="division">division</option>
    </select>
    <p />
    <input type="submit" value="Enviar">
    <input type="reset" value="Limpiar">
</form>
<?php
if (array_key_exists('cifra1',$_POST) and array_key_exists('cifra2',$_POST) and array_key_exists('var_select',$_POST)
    and $_POST['cifra1']!="" and $_POST['cifra2']!="" and $_POST['var_select']!="") {
        $cifra1=$_POST['cifra1'];
        $cifra2=$_POST['cifra2'];
        $var_select=$_POST['var_select'];
        if ($var_select=="suma") {
            function suma($cifra1,$cifra2) {
                $resultado = $cifra1 + $cifra2;
                echo "El resultado es: ".$resultado;
            }
            suma($cifra1,$cifra2);
        }
        else { if ($var_select=="resta") {
            function resta($cifra1,$cifra2) {
                $resultado = $cifra1 - $cifra2;
                echo "El resultado es: ".$resultado;
            }
            resta($cifra1,$cifra2);
        }
        else {if ($var_select=="multiplicacion") {
            function multiplicacion($cifra1,$cifra2) {
                $resultado = $cifra1 * $cifra2;
                echo "El resultado es: ".$resultado;
            }
            multiplicacion($cifra1,$cifra2);
        }
        else {if ($var_select=="division") {
            function division($cifra1,$cifra2) {
                $resultado = $cifra1 / $cifra2;
                echo "El resultado es: ".$resultado;
            }
            division($cifra1,$cifra2);
        }
        }
        }
        }
}
?>
</body>
</html>

===================================
El fichero de configuración php.ini
===================================

El fichero de configuración (php.ini) es leído al arrancar PHP. En las versiones
en que PHP funciona como módulo de servidor, esto sucede únicamente cuando se
inicia el servidor. En las versiones CGI y CLI, esto ocurre en cada ejecución.

Lo primero que se debe hacer es ejecutar el comando php -v para que te de la
versión de php que estas usando.

De acuerdo a eso buscas el php.ini en la ruta /etc/php/7.x/cli/php.ini

Aqui puedes ver que el php.ini esta en la carpeta "cli" que es donde busca la
configuración cuando estas ejecutando php por consola.

La ruta seria entonces /etc/php/7.4/cli/php.ini

Cuando se está usando el servidor http apache, el busca la configuración en esta
ruta:

/etc/php/7.4/apache2/php.ini

Cuando se está usando el servidor http nginx, el busca la configuración en esta
ruta:

/etc/php/7.2/fpm/php.ini

Reiniciar el servicio
=====================

Chequear el estatus, esto debe mostrar la hora desde que php está corriendo
en la línea Active: active (running)

$ sudo systemctl status php8.2-fpm

-----

Luego de reiniciar con el siguiente comando la línea de Active: active (running)
debe mostrar la fecha y hora actual luego de la ejecución del comando

$ sudo systemctl restart php8.2-fpm

Fuente
======

Deepseek

================================
Instalar y configurar phpMyAdmin
================================

Instalar

# aptitude install phpmyadmin

Acceder al servicio

http://localhost/phpmyadmin

After the installation has completed, add phpmyadmin to the apache
configuration.**

Agregar en este archivo la configuracion de abajo

# sudo nano /etc/apache2/apache2.conf

Add the phpmyadmin config to the file.

Esta íinea se agrega al final de la configuracion del apache para que reconozca
el phpMyAdmin

Include /etc/phpmyadmin/apache.conf

xxx mysql, apache etc... restart

/etc/init.d/xxx restart

================
xampp en windows
================

Los proyectos se copian en -->  xampp/htdocs/

Panel de administracion de xampp --> http://127.0.0.1/xampp/

En el navegador para ver los proyectos --> 127.0.0.1/name_project

Dashboard del PhpMyAdmin --> http://127.0.0.1/phpmyadmin/

================
Funciones de PHP
================

======
list()
======

Asignar variables como si fueran un array, se utiliza para asignar una lista de
variables en una sola operación.

Ejemplo:

<?php

$info = array('café', 'marrón', 'cafeína');

// Enumerar todas las variables
list($bebida, $color, $energía) = $info;
echo "El $bebida es $color y la $energía lo hace especial. <br>";

// Enumerar algunas de ellas
list($bebida, , $energía) = $info;
echo "El $bebida tiene $energía. <br>";

// U omitir solo la tercera
list( , , $energía) = $info;
echo "Necesito $energía! <br>";

// list() no funciona con cadenas
list($bar) = "abcde";
var_dump($bar); // NULL
?>

Fuente
======

-https://www.php.net

=========
explode()
=========

Divide un string en varios string. Devuelve un array de string, siendo cada uno
un substring del parámetro string formado por la división realizada por los
delimitadores indicados en el parámetro delimiter.

Ejemplo:

<?php
// Ejemplo 1, el delimitador es " ".
$pizza  = "porción1 porción2 porción3 porción4 porción5 porción6";
$porciones = explode(" ", $pizza);
echo $porciones[0]; // porción1
echo $porciones[1]; // porción2
echo "<br><br>";

// Ejemplo 2, el delimitador es ":"
$datos = "foo:*:1023:1000:/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $datos);
echo $user;
echo "<br>";
echo $pass;
echo "<br>";
echo $uid;
echo "<br>";
echo $gid;
echo "<br>";
echo $gecos;
echo "<br>";
echo $home;
echo "<br>";
echo $shell;
?>

Fuente
======

-https://www.php.net

=========
ucfirst()
=========

Convierte el primer caracter de una cadena a mayúsculas. Devuelve una cadena con
el primer caracter str en máyusculas, si el caracter es alfabético.

Nótese que 'alfabético' se determina por la localización actual.

Ejemplo:

<?php
$foo = 'hello world!';
$foo = ucfirst($foo);
echo $foo; // Hello world!
echo "<br>";

$bar = 'HELLO WORLD!';
$bar = ucfirst($bar);
echo $bar; // HELLO WORLD!
?>

Fuente
======

-https://www.php.net

============
strtolower()
============

Convierte un string a minúsculas. Devuelve un string con todos los caracteres
alfabéticos convertidos a minúsculas.

Ejemplo:

<?php
$foo = 'hello world!';
$foo = strtolower($foo);
echo $foo; // hello world!
echo "<br>";

$bar = 'HELLO WORLD!';
$bar = strtolower($bar);
echo $bar; // hello world!
?>

Fuente
======

-https://www.php.net

============
strtoupper()
============

Convierte una cadena de caracteres a mayúsculas.

Por ejemplo:

$str = "Hola Mundo";
echo strtoupper($str); // imprime "HOLA MUNDO"

Fuente
======

ChatGPT

==========
var_dump()
==========

Muestra información sobre una variable. Esta función muestra información
estructurada sobre una o más expresiones incluyendo su tipo y valor. Las
matrices y los objetos son explorados recursivamente con valores sangrados para
mostrar su estructura.

Ejemplo:

<?php
$a = array(1, 2, array("a", "b", "c"));
var_dump($a);
?>

Salida:

array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
}

==================================
public, protected y private en PHP
==================================

-public hace que la variable/función se pueda acceder desde cualquier lugar,
como por ejemplo otras clases y otras instancias de esa misma clase.

-private hace que la variable/función solamente se pueda utilizar desde la misma
clase que las define.

-protected hace que la variable/función se puede acceder desde la clase que las
define y también desde cualquier otra clase que herede de ella.

En otras palabras:

-private = solo tú
-protected = tú y tus descendientes
-public = cualquiera.

Ejemplo:

// Variables y funciones public
public $variable;
public function loQueSea() {
    // código ...
}

// Variables y funciones private
private $variable;
private function loQueSea() {
    // código ...
}

// Variables y funciones protected
protected $variable;
protected function loQueSea() {
    // código ...
}

Fuente
======

-https://uniwebsidad.com/foro/pregunta/255/cual-es-la-diferencia-entre-public-protected-y-private-en-php/

============================
Salto de línea en PHP con \n
============================

print("\n Hello world!!! \n\n");

Esto imprime:

Hello world!!!

Otro ejemplo:

echo "Soy una línea de código\nSoy otra línea de código";

Esto imprime:

Soy una línea de código
Soy otra línea de código

==================
La función isset()
==================

Nos permite evaluar si una variable está definida o no.

Cuando me refiero a "definida" en el contexto de isset(), significa que la
variable existe y no es nula. En otras palabras, para que isset() devuelva true,
la variable debe estar declarada y tener un valor asignado que no sea null.

Ejemplo:

$var1 = 'oscar';

if ( isset($var1) ){
    echo "La variable \$var1 está definida.<br />";
} else {
    echo "La variable \$var1 no está definida.<br />";
}

Si una variable no está declarada o no tiene ningún valor asignado, isset()
devolverá false. Veamos algunos ejemplos para aclarar esto:

Otro ejemplo:

$variable1 = 10;
$variable2 = null;
$variable3;

// Verificar si las variables están definidas
if (isset($variable1)) {
    echo "La variable1 está definida.";
} else {
    echo "La variable1 no está definida.";
}

echo "<br>";

if (isset($variable2)) {
    echo "La variable2 está definida.";
} else {
    echo "La variable2 no está definida.";
}

echo "<br>";

if (isset($variable3)) {
    echo "La variable3 está definida.";
} else {
    echo "La variable3 no está definida.";
}

echo "<br>";

if (isset($variable4)) {
  echo "La variable4 está definida.";
} else {
  echo "La variable4 no está definida.";
}

Fuente
======

ChatGPT

=====================
Función array_merge()
=====================

Combina dos o más arrays

Combina los elementos de uno o más arrays juntándolos de modo que los valores de
uno se anexan al final del anterior. Retorna el array resultante.

array_merge(array $array1, array $... = ?): array

Ejemplo:

$array1    = array(1, 2, 3);
$array2    = array(4, 5, 6);
$resultado = array_merge($array1, $array2);
echo $resultado[0]."<br />";
echo $resultado[1]."<br />";
echo $resultado[2]."<br />";
echo $resultado[3]."<br />";
echo $resultado[4]."<br />";
echo $resultado[5]."<br />";

Resultado:

1
2
3
4
5
6

=====================
Funcion json_encode()
=====================

Codificar una matriz asociativa en un objeto JSON:

<?php
$age = array("Peter"=>35, "Ben"=>37, "Joe"=>43);
echo json_encode($age);
?>

Resultado:

{"Peter":35,"Ben":37,"Joe":43}

Otro ejemplo:

<?php
$cars = array("Volvo", "BMW", "Toyota");
echo json_encode($cars);
?>

Resultado:

["Volvo","BMW","Toyota"]

=====================
Funcion json_decode()
=====================

Almacene datos JSON en una variable PHP y luego decodifíquelos en un objeto PHP.

Ejemplo:

<?php
$jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';
var_dump(json_decode($jsonobj));
?>

Resultado:

object(stdClass)#1 (3) {["Peter"]=> int(35) ["Ben"]=> int(37) ["Joe"]=> int(43)}

Otro ejemplo:

<?php
$jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';
var_dump(json_decode($jsonobj, true));
?>

Resultado:

array(3) {["Peter"]=> int(35) ["Ben"]=> int(37) ["Joe"]=> int(43)}

===================
Barra invertida o \
===================

Si necesita usar \ por ejemplo en un explode, tal que

$a = explode("\", $b);

Esto va a fallar, la manera correcta es usar doble \, tal que

$a = explode("\\", $b);

$c = "\"; // Mal

$c = "\\"; // Bien

=================================
Obtener el útimo ítem del arreglo
=================================

end(); Avanza el puntero interno del array hasta su último elemento y
devuelve su valor.

/* Obtenemos el último ítem del arreglo */
$audit_auditable_type = explode("\\", $audit->auditable_type);
$end_audit_auditable_type = end($audit_auditable_type);

-----

Guardar datos de formulario en archivo csv.

<!doctype html>
<html lang="en">
  <head>
    <title>Guardar datos de formulario en archivo csv</title>
    <meta charset="UTF-8">
  </head>
<body>
<form method="POST">
  <label>Nombre:</label>
  <input type="text" name="name">
  <br /><br />
  <label>Apellido:</label>
  <input type="text" name="last_name">
  <br /><br />
  <label>Cédula:</label>
  <input type="text" name="dni">
  <br /><br />
  <input type="submit" name="submit" value="Guardar">
</form>
<?php
  // Recibimos los datos del formulario
  $datos = array(
    $_POST['name'],
    $_POST['last_name'],
    $_POST['dni']
  );
  /* Creamos y abrimos un archivo con el nombre 'data.csv' para escribir los
  datos que recibimos del formulario */
  $fp = fopen('data.csv', 'a');

  // Escribimos los datos en el archivo 'data.csv'
  fputcsv($fp, $datos);

  // Después de terminar de escribir los datos, cerramos el archivo 'data.csv'
  fclose($fp);
?>
</body>
</html>

===========================
Qué es el operador ternario
===========================

El operador ternario es la forma corta de la sentencia if { ... } else { ... },
por lo que en lugar de escribir el código del siguiente ejemplo:

if ($condicion) {
    $resultado = 'verdadero';
} else {
    $resultado = 'falso';
}

Podríamos usar el operador ternario de este modo:

$resultado = $condicion ? 'verdadero' : 'falso';

Si la variable $condicion se evalúa como true, el operando de la izquierda
'verdadero' será asignado a la variable $resultado. Si por el contrario la
variable $condicion se evalúa como false, se asignará el operando de la derecha
'falso'.

Fuente
======

https://www.neoguias.com/if-abreviado-en-php-el-operador-ternario/

===========================================================
Calcular la edad en PHP a partid de una fecha de nacimiento
===========================================================

function calculaedad($fechanacimiento){
    list($ano,$mes,$dia) = explode("-",$fechanacimiento);
    $ano_diferencia  = date("Y") - $ano;
    $mes_diferencia = date("m") - $mes;
    $dia_diferencia   = date("d") - $dia;
    if ($dia_diferencia < 0 || $mes_diferencia < 0) $ano_diferencia--;
    return $ano_diferencia;
}
// echo calculaedad ('1998-01-25');
echo calculaedad ('1989-09-13');

Fuente
======

https://www.baulphp.com/calcular-edad-en-php-ejemplos-completos

=======
Adminer
=======

Gestión de base de datos en un solo archivo PHP

1) Descargar el archivo .php desde https://www.adminer.org/#download en este
ejemplo se descargo el archivo adminer-4.8.1.php.

2) Pegar el archvo php descargado (adminer-4.8.1.php) en la carpeta del servidor
http de preferencia.

3) Desde el navegador web, abrir el archivo adminer-4.8.1.php, realizar la
configuración de la conexión y darle a Login.

=========================================
Consumir un endpoint que devuelve un JSON
=========================================

Para consumir un endpoint que devuelve un JSON desde una plantilla de PHP y
HTML, puedes utilizar la función file_get_contents() de PHP para obtener el
contenido de la URL del endpoint y la función json_decode() para decodificar el
JSON.

Aquí te dejo un ejemplo de cómo podrías hacerlo:

<?php
// URL del endpoint
$url = 'https://ejemplo.com/endpoint';

// Obtener el contenido de la URL
$json = file_get_contents($url);

// Decodificar el JSON
$data = json_decode($json);

// Recorrer los datos y mostrarlos en pantalla
foreach ($data as $item) {
    echo $item->nombre;
    echo $item->descripcion;
    // ...
}
?>

En el ejemplo anterior, $url es la URL del endpoint que devuelve el JSON.
file_get_contents() se encarga de obtener el contenido de la URL y almacenarlo
en $json. Luego, json_decode() se utiliza para decodificar el JSON y almacenar
los datos en $data.

Por último, se puede recorrer $data con un bucle foreach para mostrar los datos
en pantalla. En este caso, se asume que los datos tienen propiedades llamadas
"nombre" y "descripcion", pero esto puede variar dependiendo de la estructura
del JSON que devuelve el endpoint que estás consultando.

=============================================================================
Validar que un RIF guardado sea igual o diferente de uno que vien por request
=============================================================================

la cadena que viene por request y la que está guardada en base de datos
se convierten en minúsculas para hacer la comparación.

public function compararRifs(Request $request)
{
    $purchaseSupplier = PurchaseSupplier::whereRaw("LOWER(rif) = ?", strtolower($request->rif))->first();

    if ($purchaseSupplier) {
        dd("El rif es igual al rif en la base de datos.");
    } else {
        dd("El rif es diferente al rif en la base de datos.");
    }
}

==============================================
Detectar la primera letra de una cadena en PHP
==============================================

Para detectar la primera letra de una cadena en PHP, puedes usar la función
substr para extraer el primer carácter. El código sería así:

$cadena = "Ejemplo de cadena";
$primera_letra = substr($cadena, 0, 1);

echo $primera_letra; // Imprime "E"

La función substr toma tres parámetros: la cadena original, el índice inicial
(en este caso, 0 para la primera letra) y la longitud del substring a extraer
(en este caso, 1 para extraer solo la primera letra).

Con este código, $primera_letra contendrá la primera letra de la cadena original
$cadena. En este ejemplo, $primera_letra contendrá la letra "E".

Fuente
======

ChatGPT

================
Que es un trait?
================

Un trait en PHP es una unidad de código que se utiliza para compartir
funcionalidades entre clases, sin necesidad de crear una jerarquía de herencia
compleja. En otras palabras, un trait es una colección de métodos que puede ser
utilizada por múltiples clases sin tener que repetir el mismo código en cada una
de ellas.

Para usar un trait, se utiliza la palabra clave use en la declaración de la
clase y se especifica el nombre del trait que se desea utilizar. El código de
los métodos definidos en el trait se incorpora al cuerpo de la clase que lo usa,
como si fuera parte del mismo.

Aquí hay un ejemplo simple de cómo se puede definir y utilizar un trait en PHP:

trait Saludar {
    public function saludar() {
        echo "Hola, ¿cómo estás?";
    }
}

class Persona {
    use Saludar;

    public function __construct($nombre) {
        $this->nombre = $nombre;
    }
}

$persona = new Persona("Juan");
$persona->saludar(); // Imprime "Hola, ¿cómo estás?"

En este ejemplo, se define un trait llamado Saludar que contiene un método
llamado saludar(). Luego, se define una clase Persona que utiliza el trait
Saludar. Al instanciar un objeto de la clase Persona y llamar al método
saludar(), se llama al método definido en el trait y se imprime "Hola,
¿cómo estás?" en la salida.

Fuente
======

ChatGPT

=======
round()
=======

Tiene como funcionalidad redondear los decimales resultantes de una división.

round(numero,precision,modo);

-número (Obligatorio): Es el número que queremos redondear.

-precisión: En este parámetro se especifican el número de decimales a redondear.

-modo: modo de redondeo.

Los diferentes modos de redondeo de decimales son los siguientes:

PHP_ROUND_HALF_UP: Redondeo hacia arriba, ej: 1.5 redondea a 2, y -1.5 a -2.

PHP_ROUND_HALF_DOWN: Redondeo hacia abajo, ej: 1.5 redondea a 1, y -1.5 a -1.

PHP_ROUND_HALF_EVEN: Redondeo de decimales hacia el siguiente valor par.

PHP_ROUND_HALF_ODD: Redondeo de decimales hacia el siguiente valor impar.

Ejemplo:

echo round(1.917, 2);
echo round(1.005, 2);
echo round(1.5, 0, PHP_ROUND_HALF_UP);
echo round(1.5, 0, PHP_ROUND_HALF_DOWN);

En el primer ejemplo redondeamos 2 decimales, siendo el resultado 1.92.

En el segundo redondeamos otros 2 siendo el resultado 1.01.

En el tercero y cuarto redondeamos hacia arriba y abajo siendo los resultados 2
y 1.

Fuente
======

https://www.anerbarrena.com/php-round-redondeo-decimales-6994/

=========================================================================
Crear un archivo con la extensión que se requiera en el directorio actual
=========================================================================

<?php
// Verificar si se han enviado los datos del formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Obtener los valores del formulario
    $fileName = $_POST['file_name'];
    $fileExtension = $_POST['file_extension'];

    // Obtener la ruta actual del script
    $currentPath = __DIR__;

    // Ruta completa del archivo a crear
    $filePath = $currentPath . '/' . $fileName . '.' . $fileExtension;

    // Ejecutar el comando 'touch' para crear el archivo
    $command = 'touch ' . escapeshellarg($filePath);

    $output = shell_exec($command);
    $returnStatus = $output === null ? 0 : 1;

    if ($returnStatus === 0) {
        echo "El archivo '$fileName.$fileExtension' ha sido creado exitosamente en la ruta '$filePath'.";
    } else {
        echo "Ocurrió un error al crear el archivo. Detalles del error:<br>";
        echo nl2br($output);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Crear archivo</title>
</head>
<body>
    <h2>Crear archivo</h2>
    <form method="POST" action="">
        <label for="file_name">Nombre del archivo:</label>
        <input type="text" name="file_name" required><br>

        <label for="file_extension">Extensión del archivo:</label>
        <input type="text" name="file_extension" required><br>

        <input type="submit" value="Crear">
    </form>
</body>
</html>

====================================================================
Probar la conexión exitosa o no con una base de datos ded PostgreSQL
====================================================================

<?php
// Inicializa variables
$databaseName = '';
$username = '';
$password = '';
$connectionStatus = '';

// Verifica si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Recupera los datos del formulario
    $databaseName = $_POST['database_name'];
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Construye el comando de conexión a la base de datos
    $command = "PGPASSWORD='$password' psql -h 127.0.0.1 -p 5432 -U $username -d $databaseName -c 'SELECT 1'";

    // Ejecuta el comando y verifica la salida
    exec($command, $output, $returnCode);

    if ($returnCode === 0) {
        $connectionStatus = 'Conexión exitosa';
    } else {
        $connectionStatus = 'Error al conectar';
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Prueba de Conexión a PostgreSQL</title>
</head>
<body>
    <h1>Prueba de Conexión a PostgreSQL</h1>
    <form method="post">
        <label for="database_name">Nombre de la base de datos:</label>
        <input type="text" id="database_name" name="database_name" value="<?php echo $databaseName; ?>" required><br><br>

        <label for="username">Nombre de usuario:</label>
        <input type="text" id="username" name="username" value="<?php echo $username; ?>" required><br><br>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" value="<?php echo $password; ?>" required><br><br>

        <input type="submit" value="Probar Conexión">
    </form>

    <h2>Estado de la Conexión:</h2>
    <p><?php echo $connectionStatus; ?></p>
</body>
</html>

Fuente
======

ChatGPT

======================================
Borrar una base de datos de PostgreSQL
======================================

<?php
// Inicializa variables
$databaseName = '';
$username = '';
$password = '';
$deleteStatus = '';

// Verifica si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Recupera los datos del formulario
    $databaseName = $_POST['database_name'];
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Construye el comando para borrar la base de datos
    $command = "PGPASSWORD='$password' dropdb -h 127.0.0.1 -U $username $databaseName";

    // Ejecuta el comando y verifica la salida
    exec($command, $output, $returnCode);

    if ($returnCode === 0) {
        $deleteStatus = "La base de datos '$databaseName' ha sido borrada exitosamente.";
    } else {
        $deleteStatus = "Error al borrar la base de datos '$databaseName'.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Borrar Base de Datos PostgreSQL</title>
</head>
<body>
    <h1>Borrar Base de Datos PostgreSQL</h1>
    <form method="post">
        <label for="database_name">Nombre de la base de datos a borrar:</label>
        <input type="text" id="database_name" name="database_name" value="<?php echo $databaseName; ?>" required><br><br>

        <label for="username">Nombre de usuario:</label>
        <input type="text" id="username" name="username" value="<?php echo $username; ?>" required><br><br>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" value="<?php echo $password; ?>" required><br><br>

        <input type="submit" value="Borrar Base de Datos">
    </form>

    <h2>Estado del Borrado:</h2>
    <p><?php echo $deleteStatus; ?></p>
</body>
</html>

Fuente
======

ChatGPT

===========================================
Crear una nueva base de datos de PostgreSQL
===========================================

<?php
// Inicializa variables
$databaseName = '';
$username = '';
$password = '';
$createStatus = '';

// Verifica si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Recupera los datos del formulario
    $databaseName = $_POST['database_name'];
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Construye el comando para crear la nueva base de datos
    $command = "PGPASSWORD='$password' createdb -h 127.0.0.1 -U $username $databaseName";

    // Ejecuta el comando y verifica la salida
    exec($command, $output, $returnCode);

    if ($returnCode === 0) {
        $createStatus = "La base de datos '$databaseName' ha sido creada exitosamente.";
    } else {
        $createStatus = "Error al crear la base de datos '$databaseName'.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Crear Nueva Base de Datos PostgreSQL</title>
</head>
<body>
    <h1>Crear Nueva Base de Datos PostgreSQL</h1>
    <form method="post">
        <label for="database_name">Nombre de la nueva base de datos:</label>
        <input type="text" id="database_name" name="database_name" value="<?php echo $databaseName; ?>" required><br><br>

        <label for="username">Nombre de usuario:</label>
        <input type="text" id="username" name="username" value="<?php echo $username; ?>" required><br><br>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" value="<?php echo $password; ?>" required><br><br>

        <input type="submit" value="Crear Nueva Base de Datos">
    </form>

    <h2>Estado de la Creación:</h2>
    <p><?php echo $createStatus; ?></p>
</body>
</html>

Fuente
======

ChatGPT

====================================================================
Crear respaldo de una base de datos de PostgreSQL en un archivo .sql
====================================================================

<?php
// Inicializa variables
$databaseName = '';
$username = '';
$password = '';
$backupName = '';
$backupStatus = '';

// Verifica si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Recupera los datos del formulario
    $databaseName = $_POST['database_name'];
    $username = $_POST['username'];
    $password = $_POST['password'];
    $backupName = $_POST['backup_name'];

    // Añade la extensión .sql al nombre del archivo si no está presente
    if (!pathinfo($backupName, PATHINFO_EXTENSION)) {
        $backupName .= '.sql';
    }

    // Construye el comando para crear el respaldo (dump) en un archivo .sql
    $command = "PGPASSWORD='$password' pg_dump -h 127.0.0.1 -U $username $databaseName > $backupName";

    // Ejecuta el comando y verifica la salida
    exec($command, $output, $returnCode);

    if ($returnCode === 0) {
        $backupStatus = "El respaldo de la base de datos '$databaseName' se ha creado exitosamente en '$backupName'.";
    } else {
        $backupStatus = "Error al crear el respaldo de la base de datos '$databaseName'.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Crear Respaldo .sql de Base de Datos PostgreSQL</title>
</head>
<body>
    <h1>Crear Respaldo .sql de Base de Datos PostgreSQL</h1>
    <form method="post">
        <label for="database_name">Nombre de la base de datos a respaldar:</label>
        <input type="text" id="database_name" name="database_name" value="<?php echo $databaseName; ?>" required><br><br>

        <label for="username">Nombre de usuario:</label>
        <input type="text" id="username" name="username" value="<?php echo $username; ?>" required><br><br>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" value="<?php echo $password; ?>" required><br><br>

        <label for="backup_name">Nombre del archivo de respaldo (con extensión .sql):</label>
        <input type="text" id="backup_name" name="backup_name" value="<?php echo $backupName; ?>" required><br><br>

        <input type="submit" value="Crear Respaldo .sql">
    </form>

    <h2>Estado de la Creación del Respaldo:</h2>
    <p><?php echo $backupStatus; ?></p>
</body>
</html>

Fuente
======

ChatGPT

============================================================================
Restaurar una base de datos de PostgreSQL a través de un archivo .sql previo
============================================================================

Nota: Hay una limitación y es que si el archivo es muy grande la solicitud
fallara por el tamaño del archivo.

<?php
// Inicializa variables
$databaseName = '';
$username = '';
$password = '';
$restoreStatus = '';

// Verifica si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['sql_file'])) {
    // Recupera los datos del formulario
    $databaseName = $_POST['database_name'];
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Verifica si se subió un archivo .sql
    if ($_FILES['sql_file']['error'] === 0 && pathinfo($_FILES['sql_file']['name'], PATHINFO_EXTENSION) === 'sql') {
        $sqlFileName = $_FILES['sql_file']['tmp_name'];

        // Construye el comando para restaurar la base de datos desde el archivo .sql
        $command = "PGPASSWORD='$password' psql -h 127.0.0.1 -U $username -d $databaseName < $sqlFileName";

        // Ejecuta el comando y verifica la salida
        exec($command, $output, $returnCode);

        if ($returnCode === 0) {
            $restoreStatus = "La base de datos '$databaseName' se ha restaurado exitosamente desde el archivo .sql.";
        } else {
            $restoreStatus = "Error al restaurar la base de datos '$databaseName' desde el archivo .sql.";
        }
    } else {
        $restoreStatus = "Por favor, seleccione un archivo .sql válido.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Restaurar Base de Datos PostgreSQL desde Archivo .sql</title>
</head>
<body>
    <h1>Restaurar Base de Datos PostgreSQL desde Archivo .sql</h1>
    <form method="post" enctype="multipart/form-data">
        <label for="database_name">Nombre de la base de datos a restaurar:</label>
        <input type="text" id="database_name" name="database_name" value="<?php echo $databaseName; ?>" required><br><br>

        <label for="username">Nombre de usuario:</label>
        <input type="text" id="username" name="username" value="<?php echo $username; ?>" required><br><br>

        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" value="<?php echo $password; ?>" required><br><br>

        <label for="sql_file">Seleccione un archivo .sql para restaurar:</label>
        <input type="file" id="sql_file" name="sql_file" accept=".sql" required><br><br>

        <input type="submit" value="Restaurar Base de Datos">
    </form>

    <h2>Estado de la Restauración de la Base de Datos:</h2>
    <p><?php echo $restoreStatus; ?></p>
</body>
</html>

Fuente
======

ChatGPT

=======================================
Operador de fusión null-coalescing (??)
=======================================

El operador de fusión null-coalescing (??) se utiliza principalmente para
verificar si el primer valor es nulo y, en caso afirmativo, asignar un valor
predeterminado. Sin embargo, su funcionalidad no se limita únicamente a la
verificación de nulidad.

El operador ?? evalúa si el primer operando es nulo o no. Si el primer operando
no es nulo, se devuelve ese valor. En caso de que el primer operando sea nulo,
se devuelve el segundo operando, que actúa como un valor predeterminado.

El operador de fusión null-coalescing es útil cuando se desea asignar un valor
por defecto a una variable en caso de que el valor original sea nulo o no
exista. Esto puede ser útil en diferentes situaciones, como la manipulación de
datos recibidos desde fuentes externas, la asignación de valores en casos donde
puede haber valores nulos o la simplificación de código evitando condicionales
largos.

En resumen, el operador ?? se utiliza para proporcionar un valor predeterminado
cuando el primer operando es nulo, pero también se puede usar en combinación con
otros operadores y expresiones para lógica más compleja.

Ejemplo:

<?php
// Ejemplo 1: Valor no nulo
$number = 42;
$defaultValue = 0;

$result = $number ?? $defaultValue;
echo $result; // Salida: 42

echo "<br>";

// En este caso, $number no es nulo, por lo tanto, se asigna su valor a $result.

// Ejemplo 2: Valor nulo
$number = null;
$defaultValue = 0;

$result = $number ?? $defaultValue;
echo $result; // Salida: 0

// En este caso, $number es nulo, por lo tanto, se asigna el valor
// predeterminado $defaultValue a $result.
?>

=================================================================
Validaciones de una variable, si está presente, o su tipo y valor
=================================================================

if (isset($xxx)) {
    if ($xxx === null) {
        echo "La variable es nula";
    } elseif (is_string($xxx)) {
        echo "La variable es una cadena: " . $xxx;
    } elseif (is_numeric($xxx)) {
        echo "La variable es un número: " . $xxx;
    } else {
        echo "La variable tiene un tipo de dato desconocido";
    }
} else {
    echo "La variable no está presente";
}

Fuente
======

ChatGPT

=============================
La función array_key_exists()
=============================

En PHP, la función array_key_exists() se utiliza para comprobar si una clave
determinada existe en un array. Toma dos argumentos: la clave que se desea
comprobar y el array en el cual se realizará la búsqueda. Devuelve true si la
clave existe en el array y false en caso contrario.

Aquí tienes un ejemplo de uso de array_key_exists():

$miArray = array(
    "clave1" => "valor1",
    "clave2" => "valor2",
    "clave3" => "valor3"
);

// Verificar si una clave existe en el array
if (array_key_exists("clave2", $miArray)) {
    echo "La clave2 existe en el array.";
} else {
    echo "La clave2 no existe en el array.";
}

En este ejemplo, el array $miArray contiene tres pares clave-valor.
array_key_exists("clave2", $miArray) verifica si la clave "clave2" existe en el
array. Como la clave "clave2" está presente en el array, se muestra el mensaje
"La clave2 existe en el array".

Es importante tener en cuenta que array_key_exists() verifica solo la existencia
de la clave y no se preocupa por el valor asociado a dicha clave. Si se
necesita verificar tanto la existencia de la clave como el valor asociado, se
puede utilizar la combinación de array_key_exists() y la sintaxis de acceso a
elementos de array ($miArray['clave']) para obtener el valor y luego realizar
las comprobaciones necesarias.

Fuente
======

ChatGPT

===============
PHP_CodeSniffer
===============

Es un conjunto de dos scripts PHP, el script phpcbf principal que tokeniza los
archivos PHP, JavaScript y CSS para detectar violaciones de un estándar de
codificación definido, y un segundo script phpcbf para corregir automáticamente
las violaciones del estándar de codificación.

PHP_CodeSniffer es una herramienta de desarrollo esencial que garantiza que su
código permanezca limpio y consistente.

1- Instalación

Lo usaremos de manera global

$ composer global require "squizlabs/php_codesniffer=*"

2- Verificamos la ruta de composer:

$ composer global config bin-dir --absolute

Changed current directory to /home/user/.config/composer
/home/user/.config/composer/vendor/bin

3- Agregar la siguiente línea en el archivo .bashrc del directorio /home/user
segun la ruta de composer del comando anteior:

export PATH="$PATH:/home/user/.config/composer/vendor/bin"

4- Actualizar los cambios:

$ source .bashrc

5- Verificar que el comando phpcs se ejecuta con éxito:

$ phpcs --help

6- Verificar el estandar de un archivo:

$ phpcs --standard=PSR12 /path/to/code-directory

Para el kavac sería:

$ phpcs --standard=PSR12 kavac/modules/Purchase/Http/Controllers/PurchaseRequirementController.php

Fuentes
=======

https://github.com/squizlabs/PHP_CodeSniffer
ChatGPT

======================
Función anónima en PHP
======================

Una función anónima en PHP es una función que no tiene un nombre asociado y se
define utilizando la sintaxis function () { ... }. También se les conoce como
"closures" o "funciones lambda". Estas funciones son útiles cuando necesitas
pasar lógica o comportamiento como argumento a otra función, o cuando necesitas
definir una función de una sola vez sin asignarle un nombre.

La sintaxis básica de una función anónima es la siguiente:

$miFuncionAnonima = function ($parametro1, $parametro2, ...) {
    // Código de la función
    // Puedes hacer lo que desees con los parámetros y retornar un valor si es
    // necesario
};

Ejemplo de una función anónima sencilla que suma dos números:

$sumar = function ($a, $b) {
    return $a + $b;
};

$resultado = $sumar(5, 3); // Llamamos a la función como si fuera una función normal
echo $resultado; // Imprimirá: 8

Las funciones anónimas son especialmente útiles en contextos donde se requiere
una función temporal y no es necesario asignarle un nombre o si solo se
utilizará dentro de un ámbito específico.

Aquí tienes un ejemplo práctico de cómo se utilizan las funciones anónimas con
el método array_map() para aplicar una función a cada elemento de un array:

$datos = [1, 2, 3, 4];

// Utilizamos una función anónima para elevar cada elemento al cuadrado
$resultado = array_map(function ($numero) {
    return $numero * $numero;
}, $datos);

print_r($resultado); // Imprimirá: [1, 4, 9, 16]

En este ejemplo, la función anónima se utiliza para elevar cada número del array
$datos al cuadrado.

Las funciones anónimas también pueden capturar variables definidas fuera de
ellas (variables en el ámbito padre), lo que las hace poderosas y flexibles.
Por ejemplo:

$factor = 10;

$calcularMultiplicacion = function ($numero) use ($factor) {
    return $numero * $factor;
};

echo $calcularMultiplicacion(5); // Imprimirá: 50

En este caso, la función anónima calcularMultiplicacion captura la variable
$factor definida fuera de ella.

Las funciones anónimas son muy útiles en PHP para mejorar la legibilidad y
modularidad del código, especialmente en situaciones donde se necesitan
funciones pequeñas y de uso temporal.

Fuente
======

ChatGPT

===
EOT
===

En PHP, EOT se refiere a la sintaxis de "End of Text" (Fin de Texto) y se
utiliza para definir cadenas de texto largas y formateadas en bloques de código.
Es una forma de crear cadenas de texto delimitadas que no requieren escapar
caracteres especiales y permiten mantener el formato sin tener que concatenar
múltiples líneas con el operador '.'.

La sintaxis general de EOT se ve así:

$string = <<<EOT
Texto aquí
Puede incluir saltos de línea,
variables como $variable,
y cualquier otro contenido.
EOT;

En este ejemplo, EOT es el delimitador que marca el inicio y el fin de la
cadena. Puedes reemplazar EOT por cualquier etiqueta de tu elección, siempre y
cuando uses la misma etiqueta para marcar el inicio y el fin de la cadena.

Esta forma de definir cadenas es especialmente útil cuando necesitas crear
bloques de texto largo que contienen HTML, SQL u otros tipos de contenido que
normalmente requerirían muchos caracteres de escapado si se usara la sintaxis de
comillas simples o dobles.

Aquí tienes un ejemplo práctico:

$html = <<<HTML
<div class="container">
    <h1>Bienvenido a mi sitio web</h1>
    <p>Este es un ejemplo de cómo usar EOT en PHP.</p>
</div>
HTML;

echo $html;

Esto imprimirá el contenido HTML formateado dentro del bloque div.container.

En resumen, EOT en PHP se utiliza para definir cadenas de texto multilínea y
formateadas de manera legible, especialmente cuando se necesita mantener el
formato y evitar el escapado excesivo de caracteres especiales.

Fuente
======

ChatGPT

================
El método trim()
================

El método trim() en PHP se utiliza para eliminar espacios en blanco u otros
caracteres específicos desde el principio y el final de una cadena (string). Es
útil para limpiar y formatear cadenas de texto, especialmente cuando se están
manipulando datos de formularios o de entrada de usuario.

La sintaxis básica de trim() es la siguiente:

string trim ( string $cadena [, string $caracteres = " \t\n\r\0\x0B" ] )

$cadena: La cadena de texto que deseas recortar, es decir, eliminar los
caracteres de espacios en blanco al principio y al final.

$caracteres (opcional): Una cadena que contiene los caracteres que deseas
eliminar. Por defecto, se eliminan espacios en blanco (incluyendo espacio,
tabulación, nueva línea, retorno de carro, nulo y tabulación vertical).

Ejemplo de uso básico:

$texto = "   Hola, soy una cadena con espacios en blanco al principio y al final.   ";
$limpio = trim($texto);
echo $limpio;

Esto eliminará los espacios en blanco al principio y al final de la cadena, y el
resultado será:

Hola, soy una cadena con espacios en blanco al principio y al final.

trim() es muy útil para normalizar datos de entrada, ya que asegura que no haya
espacios en blanco innecesarios que puedan afectar la manipulación de los datos
o la presentación en una aplicación PHP. También puedes utilizar variantes de
esta función como ltrim() (eliminar espacios en blanco al principio) y rtrim()
(eliminar espacios en blanco al final) si solo necesitas realizar la operación
en una dirección específica de la cadena.

Si hay espacios en blanco entre las palabras en la cadena, trim() no los
eliminará porque solo elimina espacios en blanco al principio y al final de la
cadena, no en el medio.

Fuente
======

ChatGPT

=====================
El método get_class()
=====================

Es una función en PHP que se utiliza para obtener el nombre de la clase de un
objeto dado. En el contexto de Laravel y la mayoría de las aplicaciones
orientadas a objetos en PHP, puedes usar este método para obtener el nombre de
la clase de un objeto para realizar tareas específicas basadas en la clase a la
que pertenece un objeto.

Por ejemplo, si tienes un objeto $model y deseas saber a qué clase pertenece,
puedes hacer lo siguiente:

$class_name = get_class($model);

Después de ejecutar esto, $class_name contendrá el nombre de la clase del
objeto $model. Esto puede ser útil para tomar decisiones basadas en la clase de
un objeto, como lo hicimos en tu código anterior para verificar si la clase de
$model coincide con las clases en el arreglo $getModels.

En resumen, get_class() es una función útil para obtener el nombre de la clase
de un objeto en PHP, lo que permite la programación orientada a objetos más
dinámica y la toma de decisiones basada en las clases de los objetos.

Ejemplo:

Ejemplo simple para ilustrar el uso de get_class() en PHP. Supongamos que
tenemos una clase Car y creamos una instancia de ella. Luego, utilizamos
get_class() para obtener el nombre de la clase de esa instancia.

<?php
class Car {
    public $brand;
    public $model;

    public function __construct($brand, $model) {
        $this->brand = $brand;
        $this->model = $model;
    }
}

// Crear una instancia de la clase Car
$myCar = new Car("Toyota", "Camry");

// Obtener el nombre de la clase de $myCar
$className = get_class($myCar);

// Mostrar el nombre de la clase
echo "La instancia de \$myCar pertenece a la clase: " . $className;
?>

Esto imprime: La instancia de $myCar pertenece a la clase: Car

En este ejemplo, hemos creado una instancia de la clase Car llamada $myCar y
luego hemos utilizado get_class($myCar) para obtener el nombre de la clase de
$myCar. El resultado mostrará que la instancia de $myCar pertenece a la clase
Car.

Fuente
======

ChatGPT

==================
La función ini_get
==================

La función ini_get en PHP se utiliza para obtener el valor de una configuración
específica en el archivo de configuración de PHP (php.ini) o en la configuración
del servidor. Esta función toma como argumento el nombre de la configuración que
deseas consultar y devuelve su valor actual.

Por ejemplo, si deseas obtener el valor de la configuración upload_max_filesize
que establece el tamaño máximo de archivo que se puede cargar al servidor,
puedes usar ini_get de la siguiente manera:

$maxFileSize = ini_get('upload_max_filesize');

$maxFileSize contendría el valor actual de la configuración upload_max_filesize
en el formato que se encuentra en el archivo de configuración de PHP (por
ejemplo, "2M" para 2 megabytes).

Esta función es útil cuando necesitas acceder a valores de configuración
específicos en tiempo de ejecución, lo que te permite ajustar el comportamiento
de tu aplicación en función de la configuración actual.

Fuente
======

ChatGPT

========================================================
Obtener el valor de la configuración upload_max_filesize
========================================================

Obtener el valor de la configuración upload_max_filesize que establece el tamaño
máximo de archivo que se puede cargar al servidor, puedes usar ini_get de la
siguiente manera:

$maxFileSize = ini_get('upload_max_filesize');

Fuente
======

ChatGPT

==================
El método strpos()
==================

El método strpos() de PHP se utiliza para encontrar la posición de la primera
aparición de una cadena dentro de otra cadena.

Ejemplo:

$frase = "La casa es de color azul";
$palabra = "casa";

$posicion = strpos($frase, $palabra);

if ($posicion !== false) {
    echo "La palabra '$palabra' se encuentra en la posición $posicion de la frase.";
} else {
    echo "La palabra '$palabra' no se encuentra en la frase.";
}

En este ejemplo, la función strpos() busca la posición de la palabra "casa"
dentro de la frase "La casa es de color azul".

Si encuentra la palabra, devuelve la posición en la que se encuentra. Si no la
encuentra, devuelve false. En este caso, mostraría el mensaje "La palabra 'casa'
se encuentra en la posición 3 de la frase".

¿Y por que en la posición 3?

En PHP, las posiciones de los caracteres comienzan desde 0. En el ejemplo dado,
la letra "c" de la palabra "casa" se encuentra en la posición 3 de la frase
"La casa es de color azul", osea el ejemplo dado, en la posición 0 se encuentra
la letra "L", en la posición 1 se encuentra la letra "a", en la posición 2 se
encuentra un espacio en blanco y en la posición 3 se encuentra la letra "c" de
la palabra "casa".

Fuente
======

LuzIA

==================
Método array_map()
==================

Se utiliza para aplicar una función a cada elemento de una matriz (array) y
crear una nueva matriz con los resultados transformados.

Aquí tienes un ejemplo sencillo de cómo puedes usar array_map() en PHP:

$numbers = [1, 2, 3, 4, 5];

// Utiliza array_map() para elevar al cuadrado cada número en la matriz.
$squaredNumbers = array_map(function($number) {
    return $number * $number;
}, $numbers);

print_r($squaredNumbers);

En este ejemplo, la función array_map() se utiliza para elevar al cuadrado cada
número en el arreglo $numbers, y el resultado se almacena en la variable
$squaredNumbers. Luego, se muestra el contenido de $squaredNumbers, que será
[1, 4, 9, 16, 25], ya que cada número se ha elevado al cuadrado.

<?php
$numbers = [1, 2, 3, 4, 5];

// Utiliza array_map() para elevar al cuadrado cada número en la matriz.
$squaredNumbers = array_map(function($number) {
  return $number * $number;
}, $numbers);

print_r($squaredNumbers);
?>

Fuente
======

ChatGPT

================================================================
Leer la informacion de un certificado digital con extensión .p12
================================================================

Se usa la función openssl_pkcs12_read() de PHP.

<?php
if (!$almacén_cert = file_get_contents("pedrito.p12")) {
    echo "Error: No se puede leer el fichero del certificado\n";
    exit;
}

if (openssl_pkcs12_read($almacén_cert, $info_cert, "123456")) {
    echo "Información del certificado\n";
    print_r($info_cert);
} else {
    echo "Error: No se puede leer el almacén de certificados.\n";
    exit;
}
?>

Fuente
======

https://www.php.net/manual/es/function.openssl-pkcs12-read.php

=================
Función strtotime
=================

(PHP 4, PHP 5, PHP 7, PHP 8)

Convierte una descripción de fecha/hora textual en Inglés a una fecha Unix

Esta función espera que se proporcione una cadena que contenga un formato de
fecha en Inglés US e intentará convertir ese formato a una fecha Unix (el número
de segundos desde el 1 de Enero del 1970 00:00:00 UTC), relativa a la marca de
tiempo dada en now, o la marca de tiempo actual si now no se proporciona.

Cada parámetro de esta función utiliza la zona horaria predeterminada a menos
que se especifique una en ese parámetro. Se ha de tener cuidado de no usar
diferentes zonas horarias en cada parámetro a menos que sea esa la intención.

Ejemplo:

<?php
    // Ver la fecha y hora actual;
    echo strtotime("now");
    echo "<br>";
    // Ver la fecha actual con formato d/m/Y;
    echo date("d/m/Y", strtotime("now"));
    echo "<br>";
    // Ver una fecha específica con formato d/m/Y;
    echo date("d/m/Y", strtotime("22-12-01 17:51:03"));
?>

Salida del comando:

1708975613
26/02/2024
01/12/2022

Fuente
======

https://www.php.net/manual/es/function.strtotime.php


<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

==============================================================================
Script de php que permite hacer la conversión de un monto de una moneda a otra
==============================================================================

/**
 * Clase que representa una tasa de cambio entre dos monedas.
 */
class ExchangeRate
{
    public $from_currency_id;
    public $to_currency_id;
    public $amount;
    public $start_at;
    public $end_at;

    /**
     * Constructor de la clase ExchangeRate
     *
     * @param int $from_currency_id ID de la moneda de origen
     * @param int $to_currency_id ID de la moneda de destino
     * @param float $amount Tasa de cambio
     * @param string $start_at Fecha de inicio de la tasa de cambio
     * @param string|null $end_at Fecha de fin de la tasa de cambio (opcional)
     */
    public function __construct($from_currency_id, $to_currency_id, $amount, $start_at, $end_at = null)
    {
        $this->from_currency_id = $from_currency_id;
        $this->to_currency_id = $to_currency_id;
        $this->amount = $amount;
        $this->start_at = $start_at;
        $this->end_at = $end_at;
    }
}

/**
 * Clase que representa una moneda.
 */
class Currency
{
    public $id;
    public $decimal_places;

    /**
     * Constructor de la clase Currency
     *
     * @param int $id ID de la moneda
     * @param int $decimal_places Número de decimales para la moneda
     */
    public function __construct($id, $decimal_places)
    {
        $this->id = $id;
        $this->decimal_places = $decimal_places;
    }
}

/**
 * Convierte una cantidad de una moneda a otra
 *
 * @param float $amount Cantidad a convertir
 * @param string $date Fecha de la conversión
 * @param int $fromCurrencyId ID de la moneda de origen
 * @param Currency $toCurrency Objeto de la moneda de destino
 * @return float|null Cantidad convertida o null si no se encuentra la tasa de cambio
 */
function currency_converter($amount, $date, $fromCurrencyId, $toCurrency)
{
    // Verificar si la moneda de destino es válida
    if (!$toCurrency) {
        return null;
    }

    // Si las monedas son iguales, no es necesario convertir
    if ($fromCurrencyId == $toCurrency->id) {
        return $amount;
    }

    // Simulación de la consulta a la base de datos
    $exchangeRates = [
        new ExchangeRate(1, 2, 0.85, '2025-01-01', '2025-12-31'), // 1 USD = 0.85 EUR
        new ExchangeRate(1, 3, 0.75, '2025-01-01', '2025-12-31'), // 1 USD = 0.75 GBP
        new ExchangeRate(4, 1, 1/70, '2025-01-01', '2025-12-31'), // 1 Bs = 1/70 USD
    ];

    // Buscar la tasa de cambio correspondiente
    $exchangeRate = null;
    foreach ($exchangeRates as $rate) {
        if ($rate->from_currency_id == $fromCurrencyId &&
            $rate->to_currency_id == $toCurrency->id &&
            $rate->start_at <= $date &&
            ($rate->end_at >= $date || $rate->end_at === null)
        ) {
            $exchangeRate = $rate;
            break;
        }
    }

    // Si no se encuentra una tasa de cambio, devolver null
    if (!$exchangeRate) {
        return null;
    }

    // Realizar la conversión y formatear el resultado
    return number_format($amount * $exchangeRate->amount, $toCurrency->decimal_places, '.', '');
}

// Datos de prueba
$amount = 70; // Monto a convertir (ejemplo: 70 Bs)
$date = '2025-03-25'; // Fecha de la conversión
$fromCurrencyId = 4; // ID de la moneda de origen (Bs)

// Moneda de destino (USD)
$toCurrency = new Currency(1, 2); // ID: 1, Decimales: 2

// Llamar al método
$convertedAmount = currency_converter($amount, $date, $fromCurrencyId, $toCurrency);

// Mostrar el resultado
echo "<h1>Prueba de Conversión de Moneda</h1>";
echo "<p>Monto original: $amount Bs</p>";
echo "<p>Monto convertido: $convertedAmount USD</p>";

?>

Fuente
======

Juan R.
Deepseek

==================
Error de PDO_PgSQL
==================

No hay extensión
Ninguna de las extensiones PHP soportadas (PgSQL, PDO_PgSQL) está disponible.

Este error ocurre cuando PHP no tiene instaladas o habilitadas las extensiones
necesarias para conectarse a una base de datos PostgreSQL (PgSQL o PDO_PgSQL).
Es común en aplicaciones web (como WordPress, Drupal, o sistemas personalizados)
que requieren PostgreSQL como backend.

Solución en Debian:

Sigue estos pasos para instalar y habilitar las extensiones PHP para PostgreSQL:

1. Instalar las extensiones PHP-PostgreSQL

$ sudo apt update

$ sudo apt install php-pgsql

2. Reiniciar el servidor web, en este caso Apache.

$ sudo systemctl restart apache2

Fuente
======

DeepSeek
