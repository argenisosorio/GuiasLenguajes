===================================================
Guía Instalación y Configuración de Wordpress by dM
===================================================

WordPress es ( en inglés, Content Management System o CMS) un sistema de gestión
de contenidos lanzado el 27 de mayo de 2003, enfocado a la creación de cualquier
tipo de página web. Originalmente alcanzó una gran popularidad en la creación de
blogs, para luego convertirse, en una de las principales herramientas para la
creación de páginas web comerciales.

============================================
Descargar versiones específicas de Wordpress
============================================

https://wordpress.org/download/releases/

===================================
Usando wordpress con servidor nginx
===================================

Nota:

Usaremos $ para describir los comandos que se usaran con usuario regular.
Usaremos # para describir los comandos que se usaran con superusuario.

Instalamos MySQL server y lo configuramos la clave del usuario de mysql que nos
la pedirá desde la consola.

# apt-get install mysql-server

Instalamos php.

# apt-get install php5 php5-mysql php5-gd php5-fpm

Instalamos Nginx server

# apt-get install nginx

Vamos a /var/www/html y dentro descargamos la última versión de Wordpress

$ wget http://wordpress.org/latest.tar.gz

Extraemos el contenido del fichero, nos debe quedar una carpeta llamada
wordpress.

# tar -xzvf latest.tar.gz

Acceder a la consola de mysql, nos pedirá la contraseña solamente.

$ sudo mysql -p

Dentro de la consola de MySQL creamos el usuario y la contraseña del sistema de
wordpress:

> CREATE USER 'user'@'localhost' IDENTIFIED BY '123456';

Creamos la base de datos del sistema wordpress.

> CREATE DATABASE wordpress_db;

Sobre la base de datos recién creada le asignamos el usuario:

> GRANT ALL PRIVILEGES ON wordpress_db.* TO 'user'@'localhost';

Refrescamos el esquema de las tablas de MySQL.

> FLUSH PRIVILEGES;

Renombramos el archivo de configuración por defecto de wp-config-sample.php a
wp-config.php

# mv /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php

Editamos el fichero y agregamos la db_name, user y password que creamos en el
paso anterior y guardamos.

# vim /var/www/html/wordpress/wp-config.php

Configuramos el fichero /etc/nginx/sites-available/default con lo siguiente:

server {
  listen   80;
  #root /usr/share/nginx/html;
  ### Aqui va la ruta donde tenemos el directorio wordpress
  root /var/www/html;
  index index.php index.html index.htm;
  server_name example.com;
  location / {
    try_files $uri $uri/ /index.html;
  }
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/www;
  }
  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
  }
}

Probamos la configuración de nginx que acabamos de hacer, si dice:OK segimos.

# nginx -t

Reiniciamos el servicio de nginx.

# service nginx restart

Visitamos la url http://127.0.0.1/wordpress/

Con esto ya deberíamos ver nuestra interfáz de inicio de wordpress, donde
llenaremos los campos del nombre del sitio, usuario, contraseña, correo, otros.

====================================
Usando wordpress con servidor apache
====================================

Instalamos apache server

# apt-get install apache2

Instalamos MySQL server y lo configuramos

# apt-get install mysql-server

Instalamos php, en este caso el 5

# apt-get install php5 php5-gd php5-mysql libapache2-mod-php5

$ sudo apt install libapache2-mod-php && mysql-server && php-bcmath && php-curl
&& php-imagick && php-intl && php-json && php-mbstring && php-mysql && php-xml
&& php-zip

Vamos a /var/www/html que se creo luego de instalar apache y dentro descargamos
la última versión de Wordpress

$ wget http://wordpress.org/latest.tar.gz

Extraemos el contenido del fichero, nos debe quedar una carpeta llamada wordpress.

# tar -xzvf latest.tar.gz

Acceder a la consola de mysql, nos pedirá la contraseña solamente.

$ mysql -p

ó

$ mysql -u root -p

ó

$ sudo mysql -u root

Dentro de la consola de MySQL creamos el usuario y la contraseña del sistema de
wordpress:

> CREATE USER 'user'@'localhost' IDENTIFIED BY '123456';

Creamos la base de datos del sistema wordpress.

> CREATE DATABASE wordpress_db;

Sobre la base de datos recién creada le asignamos el usuario:

> GRANT ALL PRIVILEGES ON wordpress_db.* TO 'user'@'localhost';

Refrescamos el esquema de las tablas de MySQL.

> FLUSH PRIVILEGES;

Renombramos el archivo de configuración por defecto de wp-config-sample.php a
wp-config.php

$ mv /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php

Editamos el fichero y agregamos la db_name, user y password que creamos en el
paso anterior y guardamos.

$ vim /var/www/html/wordpress/wp-config.php

Reiniciamos el servicio de apache para que todo ande calidad.

$ sudo service apache2 restart

Visitamos la url http://127.0.0.1/wordpress/

Con esto ya deberíamos ver nuestra interfáz de inicio de wordpress, donde
llenaremos los campos del nombre del sitio, usuario, contraseña, correo, otros.

=================================================
Usando wordpress con servidor apache en Debian 11
=================================================

Instalamos apache server

# apt-get install apache2

Instalamos php, en este caso el 7.4

$ sudo apt install php7.4 php7.4-gd php7.4-mysql libapache2-mod-php7.4 php7.4-fpm

Actualizar los repositorios

# apt update

Instalar MariaDB

$ sudo apt install mariadb-server

Chequear la instalación con:

$ mysql -V

Nos logeamos en MariaDB using el usuario root de MariaDB, nos pedirá el
password.

$ sudo mysql -u root

Dentro de la consola de MySQL creamos el usuario y la contraseña del sistema de
wordpress:

> CREATE USER 'user'@'localhost' IDENTIFIED BY '123456';

Creamos la base de datos del sistema wordpress.

> CREATE DATABASE wordpress_db;

Sobre la base de datos recién creada le asignamos el usuario:

> GRANT ALL PRIVILEGES ON wordpress_db.* TO 'user'@'localhost';

Refrescamos el esquema de las tablas de MySQL.

> FLUSH PRIVILEGES;

Renombramos el archivo de configuración por defecto de wp-config-sample.php a
wp-config.php

$ mv /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php

Editamos el fichero y agregamos la db_name, user y password que creamos en el
paso anterior y guardamos.

$ vim /var/www/html/wordpress/wp-config.php

Reiniciamos el servicio de apache para que todo ande calidad.

$ sudo service apache2 restart

Visitamos la url http://127.0.0.1/wordpress/

Con esto ya deberíamos ver nuestra interfáz de inicio de wordpress, donde
llenaremos los campos del nombre del sitio, usuario, contraseña, correo, otros.

==========================
Poner wordpress en español
==========================

Hay dos maneras de hacerlo.

1) La primera es bajarse el wordpress en español directamente.

2) La segunda es:

Ir a https://translate.wordpress.org/projects/wp/dev

Escoger el lenguaje, Spanish (Venezuela) por ejemplo, sería este:
https://translate.wordpress.org/projects/wp/dev/es-ve/default/

Bajar al final de la página.

Seleccionar exportar los archivos .po y .mo, al descargarlos obtendremos estos
archivos: wp-dev-es-ve.mo y wp-dev-es-ve.po.

Ahora vamos a /var/www/html/wordpress/wp-content/ y creamos la carpeta languages
si no existe y copiamos dentro los 2 archivos descargados.

Ahora vamos al panel de Wordpress en Settings > General cambiamos el Site languajes
a español.

La manera manual sería:

Luego de copiar los contenidos en la carpeta languajes quedaría así:

/var/www/html/wordpress/wp-content/languages
  admin-es_ES.mo
  admin-network-es_ES.mo
  continents-cities-es_ES.mo
  es_ES.mo  plugins
  admin-es_ES.po
  admin-network-es_ES.po
  continents-cities-es_ES.po
  es_ES.po  themes

Ahora editamos el fichero de configuraión de wordpress
/var/www/html/wordpress/wp-config.php

Despues de la 62 o 63, donde quepa, y antes del la variable debub, declaramos la
variable del lenguaje

define('WPLANG', 'es_ES');

Listo, si recargamos nuestro sitio ya debería estar en español, tanto la
interfaz de administrador como el sitio en general.

=====================
Modificar/Crear temas
=====================

Por defecto hay tres temas predeterminados, que están en:

/var/www/html/wordpress/wp-content/themes/twentyfifteen/
/var/www/html/wordpress/wp-content/themes/twentyseventeen/
/var/www/html/wordpress/wp-content/themes/twentysixteen/

Si se quieren hacer pruebas o modificar un tema se puede crear una copia de la
carpeta o cambiarle el nombre y activar el tema en el panel de administración,
también está el caso de instalar o copiar un tema externo y solamente se deberá
activar desde el panel de administración.

Ademas se debe editar el fichero:

/var/www/html/wordpress/wp-content/themes/mi_tema/style.css

Editamos la línea que dice Theme Name y ponemos el nombre de nuestro tema, y así
aparecera en el panel de administración:

Theme Name: mi_tema

==================
Plugins para temas
==================

Duplicate Theme: Choose an existing theme, duplicate it or create a child while
giving it a new name.

Download Plugins and Themes from Dashboard: Download installed plugins and
themes ZIP files directly from your admin dashboard without using FTP.

=============================
Inlcluir bootstrap en un tema
=============================

Agregar al final de functions.php

add_action ('wp_enqueue_scripts',function () {
  wp_enqueue_style ('bootstrap', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css');
});

Esto hará que en nuestra plantilla se llame a bootstrap con:

<link rel='stylesheet' id='bootstrap-css'  href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css?ver=5.2.4' type='text/css' media='all' />

=============
La otra forma
=============

1) Descargar el bootstrap.min.css y el bootstrap.min.js de la página de
bootstrap.

2) pegarlos en la carpeta:

wp-content/themes/twentyseventeen/assets/css

y

wp-content/themes/twentyseventeen/assets/js

3) Ir a /wp-content/themes/mi_tema/functions.php y pegar al final el siguiente
código para incluir Bootstrap CSS y JS:

function bootstrap_css() {
  wp_enqueue_style('bootstrap_css',get_stylesheet_directory_uri().'/assets/css/bootstrap.min.css',array(),'4.5.0');
}
add_action('wp_enqueue_scripts','bootstrap_css');

function bootstrap_js() {
  wp_enqueue_script('bootstrap_js',get_stylesheet_directory_uri().'/assets/js/bootstrap.min.js',array(),'4.5.0',true);
}
add_action('wp_enqueue_scripts','bootstrap_js');

===========================
Tips sobre gestión de temas
===========================

=====
hooks
=====

¿Qué son y para qué te sirven los hooks de WordPress?

Si estás aprendiendo WordPress y quieres crear plugins o desarrollar un tema
completo entonces deberías saber qué son los hooks y aprender a dominarlos.

Invariablemente, y sin importar el tipo o magnitud del proyecto al que te
enfrentes, los hooks de WordPress te serán siempre de gran ayuda, sin embargo el
concepto puede ser un poco intimidante para aquellos usuarios que apenas
empiezan en el desarrollo en esta plataforma.

¿Qué son exactamente los hooks de WordPress?

Hook es un termino genérico en WordPress, que se usa como referencia en lugares
estratégicos dentro del core para poder inyectar código propio y agregar
comportamientos o cambiar el funcionamiento por defecto de WordPress.

Un hook puede ser declarado en dos lugares, dependiendo del tipo de desarrollo
que estés haciendo, function.php si estás trabajando con un tema o tema hijo, o
directamente en un plugin.

===========
child theme
===========

¿Qué es un child theme de WordPress y por qué es importante usarlos? o
¿Qué es un child theme o tema hijo de WordPress?

Si eres usuario de WordPress ya sabrás que el theme, tema o la plantilla es el
conjunto de archivos que determina la organización externa y el look de tu
página web: colores, distribución de elementos, tipografías, navegación,
localización de los widgets, estructura de las páginas, etc.

Un child theme (tema hijo) es un tema desarrollado a partir de un tema padre
(parent theme), que hereda su funcionalidad básica. Aunque el child theme recoge
la mayoría de características de su tema padre, es un tema que no se actualiza
directamente. Al trabajar con un child theme en tu web están instalados tanto el
tema padre como el hijo, pero solo el padre se actualiza.

¿Para qué sirve un child theme?

Cuando desarrollas una página web con WordPress, aunque hayas elegido un tema
maravilloso con todas las características que buscabas, es posible que por
diferentes razones acabes queriendo o necesitando modificar el código del tema
para hacer algún cambio, como por ejemplo:

-Pequeñas modificaciones en el css de tu tema para personalizar su aspecto.

-Introducir algún pedazo de código que añada alguna funcionalidad.

-Añadir algún código necesario para funcionar con alguna aplicación externa…

Pero si tú modificas o añades este código dentro de los archivos de tu tema, te
encontrarás con que ya no puedes volver a actualizarlo, porque si lo haces, se
perderán los cambios. Este es un problema muy habitual con el que se encuentran
muchas personas.

============
Los usuarios
============

=================
Roles de usuarios
=================

WordPress usa el concepto de Roles, y ofrece algunos prediseñados para dar a los
administradores del blog la capacidad de controlar los poderes de lo que puede
hacerse en el sitio, que poseen distintas usuarios. Un administrador puede
otorgar acceso a las funciones de escribir y editar entradas, crear páginas,
crear enlaces, crear categorías, moderar comentarios, administrar plugins,
administrar temas y administrar usuarios. Una forma lógica y sencilla de asignar
estas capacidades, es la capacidad de asignar Roles a las usuarios.

WordPress tiene cinco Roles prediseñados: Administrador, Editor, Autor,
Colaborador y Suscriptor. A cada rol se le permite realizar una serie de tareas
llamadas Capacidades. Hay muchas Capacidades incluyendo publish_posts (publicar
entradas), moderate_comments ((moderar comentarios), y edit_users
(editar usuarias).

Hay un conjunto de Capacidades preasignadas a cada Rol.

Quienes tienen el Rol de Administrador se les otorga todas las Capacidades. Cada
uno de los otros Roles tienen un número decreciente de Capacidades asignadas.
Por ejemplo, el Rol de Suscriptor tan solo tiene la capacidad de lectura. Un Rol
en particular no debería ser considerado como superior a otro Rol. Es mejor,
considerar que los Roles definen las responsabilidades de los usuarios dentro
del blog. 

================
Sumario de Roles
================

-Super Admin - Quien cuenta con acceso a la característica de administración de
la red de blogs completa. (Referencia: Crear una red -en inglés).

-Administrador - Quien tiene acceso a todas las características de
administración de un sitio en particular.

-Editor - Quien puede publicar y editar entradas propias y de otros usuarios así
como crear y editar páginas.

-Autor - Quien puede publicar y editar sus propias entradas.

-Colaborador - Quien puede escribir y editar sus propias entradas pero no
publicarlas.

-Subscriptor - Quien solamente puede editar su perfil.

Al momento de instalar WordPress, una cuenta e Administrador con todas las
Capacidades es creada automáticamente.

============================================
Cómo crear roles personalizados en WordPress
============================================

¿No te convencen los roles de usuario que muestra WordPress por defecto? En
muchas ocasiones necesitas crear roles personalizados, especialmente si tu web
es gestionada por muchos usuarios.

Imagínate que para las tareas de SEO quieres crear un usuario que pueda editar o
eliminar entradas de tu blog y, además, acceder a la gestión de ciertos plugins
relacionados con analítica, optimización web o posicionamiento, pero no quieres
que pueda actualizar o instalar otros plugins. ¿Cómo puedes hacerlo? Creando
roles de usuario personalizados.

Ya vimos que, por defecto, WordPress solamente muestra cinco tipos de roles
(administrador, editor, autor, colaborador y suscriptor), pero tú podrás crear
los tuyos propios mediante la instalación de algún plugin como User Role Editor
o User Roles and Capabilities.

Como con cualquiera de ellos vas a poder crear roles personalizado en WordPress,
en este post vamos a centrarnos en User Role Editor, que es el más utilizado
(con más de 500.000 instalaciones activas) y tiene muy buena valoración en el
repositorio oficial de WordPress.

======================================
Instalar y configurar User Role Editor
======================================

Para crear roles personalizados en WordPress en base a las necesidades de tu web
y tu negocio, sigue estos pasos:

1) Instala el plugin

En el menú lateral de WordPress pulsa sobre “Plugins” > “Añadir nuevo”. Busca
User Role Editor e instálalo y actívalo en tu web.

2) Configúralo

Una vez que hayas instalado y activado el plugin, accede al apartado "Ajustes" >
"User Role Editor" y, en la pestaña "General" selecciona la opción “Mostrar
perfil del administrador en el editor de perfiles de usuario”.

3) Crea perfiles personalizados o edita los ya existentes

Ahora que tienes el plugin configurado, ya puedes empezar a crear tus propios
perfiles y asignar roles personalizados desde el apartado “"Usuarios". Puedes
crear un nuevo rol o modificar los ya existentes seleccionado las capacidades
que se muestra el plugin.

=======
Fuentes
=======

-https://www.lucushost.com/blog/roles-wordpress-que-son-como-gestionarlos/#Como_crear_roles_personalizados_en_WordPress

=============================
Incluir una imagen en un tema
=============================

Se debe guardar la imagen en: wp-content/themes/my_theme/assets/images/my_image.png

y luego ya se puede llamar en alguna de las plantillas, como index.php por
ejemplo, con:

<img src="<?php echo esc_url( get_template_directory_uri() . '/assets/images/my_image.png' );?>" class="xxx">

======================================================
¿Qué es el nombre de host de MySQL y cómo encontrarlo?
======================================================

Tu nombre de host de MySQL define la ubicación donde se aloja tu base de datos
MySQL. Si quieres conectarte a tu base de datos, necesitas especificar el nombre
de host MySQL para que tu aplicación sepa dónde conectarse.

En la mayoría de las situaciones, incluyendo el hospedaje de un sitio de
WordPress en servicios de hosting, su nombre de host de MySQL será localhost.

Esencialmente, esto significa que tu base de datos MySQL se ejecuta en el mismo
servidor que la aplicación con la que estás trabajando (como tu sitio de
WordPress).

En un sitio de WordPress, tu nombre de host MySQL está definido en el archivo
wp-config.php de tu sitio.

==========================
search form en el template
==========================

La plantilla searchform.php contiene el formulario de búsqueda que puede ser
llamado en index.php con:

<?php get_search_form(); ?>

La plantilla search.php es la que se renderiza luego de hacer unas búsqueda.

========================
Publicaciones o entradas
========================

¿Qué es un extracto?

Es un campo para las publicaciones, es un texto opcional asociado a una entrada.
La mayoría de las veces, se usa como el resumen de la entrada.

=======
sidebar
=======

El sidebar o la columna de la derecha donde se nos muestran algunos witgets
como Meta, Categorías o el formulario de busqueda se llama en la plantilla
con la función.

<?php get_sidebar(); ?>

Si queremos desactivarlo podemos comentar su línea en los siguientes templates:

page-templates/right-sidebar.php:34:                <?php get_sidebar(); ?>
page-templates/left-sidebar.php
search.php
page.php
single.php
archive.php
index.php
404.php

Y si queremos que nuestra columna central ocupe el 100% de la página solo
debemos jugar con los anchos de las columnas en las plantillas.

==============================
Agregar Google Fonts en página
==============================

1) Seleccionando las Fuentes a usar desde https://fonts.google.com/

2) Agregar archivo de estilos externo, en paso ejemplo anterior Google nos ha
generado el siguiente código:

<link href="https://fonts.googleapis.com/css?family=Roboto:400,700|Ubuntu:500,700" rel="stylesheet">

De este código sólo necesitamos la url con sus parámetros, es decir esta url:

https://fonts.googleapis.com/css?family=Roboto:400,700|Ubuntu:500,700

3) Luego en el archivo functions.php de tu theme puedes agregar el siguiente
al final código:

add_action("wp_enqueue_scripts", "dcms_insertar_google_fonts");

function dcms_insertar_google_fonts(){
    $url = "https://fonts.googleapis.com/css?family=Roboto:400,700|Ubuntu:500,700";
    wp_enqueue_style('google_fonts', $url);
}

4) Modificamos el CSS, ya incluiste el tipo de letra, ahora la puedes usar en
tu sitio, esto a través de CSS. Google también te proporciona las reglas CSS que
puedes usar:

font-family: 'Roboto', sans-serif;
font-family: 'Ubuntu', sans-serif;

Sin embargo para asignar esto a tu theme tienes que incluirlas dentro de una
clase CSS o tag, por ejemplo:

body {
  font-family: 'Ubuntu', sans-serif;
}

ó

html * { font-family: 'Ubuntu', sans-serif; }

================================
Agregar font-awesome a la página
================================

Agregar en el archivo functions.php de tu theme puedes lo siguiente al final
código:

add_action( 'wp_enqueue_scripts', 'enqueue_load_fa' );

function enqueue_load_fa() {
    wp_enqueue_style( 'load-fa', 'https://pro.fontawesome.com/releases/v5.15.4/css/all.css' );
}

y lo podemos llamar en la plantilla con:

<i class="fab fa-wordpress"></i>

Lista de íconos pro > https://fontawesome.com/v5/search

===========================
Llamada desde los estáticos
===========================

Guardar la font-awesome/ que contiene a css/ y fonts/ en assets/ y luego lo
llamamos en el template, en header.php tal que:

<head>
    <meta charset="<?php bloginfo( 'charset' ); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="profile" href="http://gmpg.org/xfn/11">
    <?php wp_head(); ?>
    <link rel="stylesheet" href="<?php echo esc_url( get_template_directory_uri().'/assets/font-awesome/css/font-awesome.min.css' ); ?>" />
</head>

================================
Llamar estáticos en la plantilla
================================

Guardar el fichero que se quiere llamar, style.css por ejemplo, en assets/ y
luego lo llamamos en el template, en header.php tal que:

<head>
    <meta charset="<?php bloginfo( 'charset' ); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="profile" href="http://gmpg.org/xfn/11">
    <?php wp_head(); ?>
    <link rel="stylesheet" href="<?php echo esc_url( get_template_directory_uri().'/assets/style.css' ); ?>" />
</head>

==============================
While de los post en index.php
==============================

La página que contiene la lista de post de index.php está en:

/wp-content/themes/wp-bootstrap-4/template-parts/content.php

=======
Fuentes
=======

-https://es.wikipedia.org/wiki/WordPress
-https://kinsta.com/es/base-de-conocimiento/nombre-host-mysql/
-https://codex.wordpress.org/Creating_a_Search_Page
-https://wpinsideout.com/quitar-barra-lateral-sidebar-wordpress/

==================
Instalar un plugin
==================

1) Instalación desde el repositorio de WordPress

WordPress dispone de un repositorio oficial de plugins donde los desarrolladores
que quieren compartirlo con la comunidad, lo suben y lo ponen a nuestra
disposición, tras pasar por una serie de controles de calidad y seguridad.

Para instalar un plugin en WordPress desde el repositorio, sigue estos sencillos
pasos:

Ve al menú de administración y allí selecciona Plugins > Añadir nuevo

En el buscador, escribe el nombre o palabra clave para buscar el plugin

Da al botón «Instalar ahora». Una vez instalado, en este mismo botón pondrá
«Activar». Haz clic

Después de activar el plugin, deberás comprobar si necesitas realizar algún tipo
de ajuste o, por el contrario el plugin viene ya configurado para que se ejecute
sin necesidades de modificar ningún parámetro.

2) Actualizar plugins del repositorio

Con frecuencia, los desarrolladores actualizarán sus plugins para incluir
mejoras o corregir errores. En este caso bastará con hacer clic sobre el enlace
de "actualizar" que te aparecerá debajo del plugin, en el listado de plugis de
tu instalación de WordPress.

3) Instalar un plugin adquirido en terceros

También cabe la posibilidad de que estés utilizando un plugin con opciones
premium y que lo hayas comprado directamente en la web del desarrollador.

En este caso te habrán proporcionado un fichero comprimido .ZIP

Ahora tendrás que subir ese archivo hasta tu hosting, instalándolo dentro de
WordPress. Esto suena muy complicado pero es tan secillo como seguir estos
pasos:

Plugins > Añadir nuevo

En la parte superior de la pantalla haz clic en el botón "Subir plugin"

Selecciona el archivo en tu disco duro

Pulsa el botón "Instalar ahora"

Una vez que ya lo tengas instalado, en el aviso que te da WordPress confirmando
esa instalación, aparece un enlace debajo que te invita a instalar el plugin que
acabas de instalar. Recuerda que tendrás que activarlo para que ejecute su
función. Pero esto no me funciono a mí porque la prueba la estaba haciendo
desde localhost y le pide a uno los datos del Servidor, Usuario FTP, Contraseña
FTP.

4) Instalar un plugin manualmente

También cabe la posibilidad, si dispones del fichero .ZIP, de instalarlo de
forma totalmente manual

Para hacerlo, sigue estos pasos:

Descomprime el fichero .zip en el disco duro de tu ordenador

busca la carpeta wp-content/plugins

Sube ahí la carpeta completa que has descomprimido antes en tu disco duro.
Cuidado con no subir los archivos sueltos, tienen que ir dentro de una carpeta
que se llamará como el plugin.

Vuelve al backend de WordPress > Plugins > Plugins instalados > activa el plugin
que acabas de subir.

=================================================================
Añadir manualmente campos personalizados a los posts de wordpress
=================================================================

Añadir campos personalizados de WordPress manualmente es más fácil de lo que te
imaginas. Lo difícil es configurar tu tema para que muestre los metadatos que
agregues usando estos campos. Por ahora, vamos a ver el proceso desde el inicio.

Para agregar un campo personalizado a una de tus páginas o posts, tendrás que
abrir el editor de WordPress, como creando una nueva entrada. Una vez allí,
busca la pestaña Opciones de pantalla en la parte superior de la pantalla y haz
clic en ella. Dentro de esta, puedes elegir qué campos de WordPress se mostrarán
por defecto.

Notarás que hay una opción llamada Campos personalizados; esta es la que debes
marcar. Luego de hacerlo, aparecerá un cuadro de Campos personalizados en la
parte inferior de la pantalla.

Agregar un nuevo campo personalizado es fácil. Solo debes crear un nombre para
el campo, y luego agregar un valor correspondiente en el campo a la derecha.

Después de ingresar ambos valores, presiona el botón Añadir un campo
personalizado en la parte inferior del cuadro, esto los guardará y te permitirá
crear más campos personalizados de WordPress (si lo deseas).

Los metadatos que ingreses aquí se guardarán junto con tu post. Sin embargo, aún
no aparecerán cuando alguien mire tu contenido en tu sitio publicado. Para que
esto suceda, debes decirle a tu tema: «Quiero que busques el campo personalizado
que cree y muestres su contenido en esta ubicación».

En este ejmplo, desde la interfaz creamos un campo llamado "Precio"

Ahora hay que editar el código fuente de wordpress para que muestre los valores
que estamos guardando en este nuevo campo.

Notese que se debe hacer la modificación en el tema de wordpress que se esté
utilizando, en este caso es wp-bootstrap-4, por lo que fuí a editar el contenido
de un post cuya while de los postes está en:

wp-content/themes/wp-bootstrap-4/single.php

y cuyo contenido individual está en:

wp-content/themes/wp-bootstrap-4/template-parts/content.php

Es en esta plantilla que agregué:

<h1>Precio: <?php echo get_post_meta($post->ID, 'Precio', true); ?></h1>

Y pude visualizar el valor guardado en la base de datos.

Otro ejemplo, desde la interfaz creamos un campo llamado "Ubicación"

<h1>Ubicación: <?php echo get_post_meta($post->ID, 'Ubicación', true); ?></h1>

Al utilizar el plugin advanced-custom-fields también se muestran los valores
editando wp-content/themes/wp-bootstrap-4/template-parts/content.php de la misma
manera.

=======
Fuentes
=======

-https://www.hostinger.es/tutoriales/campos-personalizados-wordpress/#2-Anadir-manualmente-los-campos-personalizados-de-WordPress-y-editar-el-tema-para-mostrarlos

=============================
Plugin advanced custom fields
=============================

Luego de instalarlo, configurarlo y crear un nuevo campo "precio" por ejemplo
se puede hacer que se vea en la página mediante modificación de código fuente
o mediante un shortcode, es decir, editamos el html de una entrada que contenga
el campo creado, y agregamos la etiqueta

[acf field="precio"]

Guardamos, y listo, debemos visualizar el valor desde la entrada publicada

=======
Fuentes
=======

-https://www.advancedcustomfields.com/resources/displaying-custom-field-values-in-your-theme/

===================
¿Qué es el hosting?
===================

La palabra Hosting es un término anglosajón que traducido al castellano sería
algo así como “Alojamiento, hospedaje“.

Por deducción, el alojamiento de un sitio web, no es otra cosa que el espacio
dentro de un ordenador donde estarán “guardados” los archivos de tu página web.

Imagínate por un momento que tus archivos son un huésped al que tienes que
buscarle una habitación en un hotel, y que esté disponible en cualquier momento,
a cualquier hora.

Para que estos archivos estén disponibles prácticamente siempre y se puedan
consultar en cualquier momento, necesitamos que ese ordenador donde los vamos a
guardar esté en un Centro de Datos, con una serie de medidas de seguridad y
acondicionamiento específico de temperatura, conexión, etc. A este ordenador se
le conoce con el nombre de Servidor.

Por tanto, cuando te hablo de hosting, me estoy refiriendo al espacio que
tendrás que alquilar dentro de un ordenador (que está en un Centro de Datos),
para guardar tus archivos y poder mostrarlos al mundo.

Volvamos al ejemplo del Hotel. Imagina que una empresa se dedica a alquilar
plantas enteras de habitaciones de ese hotel, y a su vez re-alquilan las
habitaciones a un tercero: a tu huésped (tus archivos).

Hay empresas que se dedican a alquilar espacios grandes dentro de un ordenador
ubicado en un Centro de Datos y trocear ese espacio en otros más pequeños y
realquilarlos: es lo que ocurre con algunos proveedores de hosting. A esto se
le llama Servidor Compartido.

=========================================
¿De qué se compone un paquete de hosting?
=========================================

Un paquete de hosting, por norma general, suele estar compuesto, básicamente
por:

-Espacio en disco dentro de un Servidor compartido (en Gb)
-Ancho de Banda o Transferencia de datos mensual (en Gb)
-Cuentas de Email
-Cuentas de FTP
-Panel de Control

Después, dependiendo del proveedor, irá añadiendo a este paquete básico otras
opciones para hacerlo más útil y diferenciarlo así de su competencia.

====================================
Requisitos de hosting para WordPress
====================================

Los requisitos mínimos que debe tener un paquete de hosting para que WordPress
funcione de forma adecuada son:

-PHP versión 7.3 o superior.
-MySQL versión 5.6 o superior O MariaDB versión 10.1 o superior.
-Compatible con HTTPS

=======
Fuentes
=======

-https://wpnovatos.com/mejor-hosting-para-wordpress/

=======================
Editando el widget meta
=======================

Los archivos que nos serviran son:

Desde

/wordpress/wp-includes/default-widgets.php

se llama a

/wordpress/wp-includes/widgets/class-wp-widget-meta.php

Que contiene el código del widget

========================
La función wp_loginout()
========================

La función wp_loginout es la encargada de renderizar en la plantilla un enlace
para iniciar sesión y también para cerrar la sesión, dependiendo si el usuario
se encuentra o no autenticado muestra uno y otro enlace.

Se encuentra en: /wordpress/wp-includes/general-template.php

==========================
Plantilla register y login
==========================

Se encuentran en:

/compra_venta/wordpress/wp-login.php

============================================
Función que lleva al home o inicio del sitio
============================================

<a href="<?php echo esc_url( home_url( '/' ) ); ?>">Home</a>

=============================
Función que lleva al register
=============================

<a href="<?php echo esc_url( wp_registration_url() ); ?>">Registrarse</a>

==========================
Función que lleva al login
==========================

<a href="<?php echo esc_url( wp_login_url ); ?>">Acceder</a>

===============================
Funcion hola mundo en WordPress
===============================

En este ejemplo se copiara la final al final del archivo
/wordpress/wp-content/themes/my-theme/functions.php

function hola_mundo() {
  $mensaje = 'Hola mundo!!!';
  echo $mensaje;
}

La podemos imprimir en el archivo /wordpress/wp-content/themes/my-theme/index.php

<h1><?php hola_mundo(); ?></h1>

==================================
¿Qué es un shortcode de WordPress?
==================================

Los shortcodes o códigos cortos son una de las pequeñas maravillas de este
popular CMS y su uso te hará la vida más fácil.

Son pequeñas líneas de código, simples y fáciles de memorizar, que sustituyen a
otro código mucho más largo, complejo y difícil de realizar. Se incluyen a
partir de WordPress 2.5 para permitir ejecutar código sin tener que escribirlo
directamente.

La estructura básica de un shortcode es:

[nombre_shortcode]

Si ponemos este código en una entrada o página, será sustituido por otro más
complejo que haya definido el desarrollador del mismo.

Pero pueden tener una estructura más compleja:

[nombre_shortcode atributo1="valor1" atributo2="valor2"]Contenido[/nombre_shortcode]

Como se puede ver, tiene una apertura ([nombre_shortcode]) y un cierre
([/nombre_shortcode]). Los atributos son opcionales y sirven para modificar el
comportamiento del shortcode. El contenido dentro dentro de la apertura y cierre
se verá modificado por el código corto y por los atributos elegidos.

Todo quedará más claro con un ejemplo. WordPress tiene varios shortcodes
incluidos. Uno de ellos es «gallery». Una forma de usarlo sería:

[gallery ids="729,732,731,720"]

Si lo incluimos en un post, éste mostrará una galería con las imágenes cuyos ids
son 729,732,731 y 720.

============
Cómo usarlos
============

Básicamente ya lo hemos visto. Tenemos que conocer el nombre del shortcode,
saber si lleva o no cierre y qué atributos podemos usar. Para encontrar esta
información podemos acudir al codex de WordPress o a la documentación del plugin
o tema que nos esté facilitando el shortcode.

Otro ejemplo más. Si estoy usando Woocommerce, el famosísimo plugin para crear
tiendas online, me podría preguntar: ¿cómo puedo mostrar, de manera fácil y
sencilla, mis productos más vendidos? Si me voy a la documentación del plugin
encuentro que tiene muchos shortcodes y muy útiles. En concreto veo esto. Tema
solucionado. Voy a la página donde quiero mostrar mis productos más vendidos y
pego el siguiente código corto:

[products limit="3" columns="3" best_selling="true" ]

Si quisiera cambiar el número de productos que se muestran o el número de
columnas en que se dividirán, sólo tendría que cambiar los valores de los
atributos.

==========================
Ventajas de los shortcodes
==========================

-Nos permiten ejecutar código sin tener que escribirlo. Ni siquiera conocerlo.

-Nos facilitan la maquetación de páginas y post. Sin embargo, este uso es cada
vez menor debido a la proliferación de los page builder.

-Nos ayudan a hacer tareas complejas de manera fácil, rápida y sencilla.

-Nos permiten colocar contenido dinámico en nuestra web. Por ejemplo, si en una
de mis páginas quiero tener siempre destacado el día que el usuario está
visitando la web, puedo buscar o crear un shortcode que muestre el día actual y
así me evito tener que entrar todos los días en esa página y cambiarlo.

===========
Desventajas
===========

Yo sólo veo una. Si es el tema el que nos proporciona el shortcode, perderemos
su funcionalidad si algún día decidimos cambiarlo. En su lugar quedará el
propio código corto, con sus corchetes y atributos, pero nada del código
asociado a él.

==========
Resumiendo
==========

Los shortcodes nos ayudan a crear nuestras páginas webs y son muy fáciles de
usar. No dudes en acudir a la documentación de los plugins que uses para saber
qué shortcodes te proporcionan. Ahorrarás mucho trabajo con ellos. Eso sí, yo
evitaría, en la medida de los posible, usar aquellos incluidos en un tema para
no perder contenido si decides cambiarlo.

=======
Fuentes
=======

-https://www.rafaelmartinweb.com/que-es-shortcode-wordpress/

====================================
¿Cómo crear shortcodes en WordPress?
====================================

Los shortcodes o códigos cortos son una característica muy popular en WordPress.
Son muchos los temas y plugins que los incluyen. Nos hacen la vida más fácil y
sencilla. Pero no siempre tenemos uno disponible para lo que necesitamos. Y para
eso estoy aquí, para enseñarte cómo crear shortcodes en WordPress. Con tus
propios códigos cortos personalizados podrás sacar el máximo provecho a tu tema,
plugins y WordPress.

A continuación realizaremos juntos un shortcode básico con un parámetro,
suficiente para entender cómo se crean. Podrás ampliar esta información en el
propio codex de WordPress.

====================================
¿Cómo crear shortcodes en WordPress?
====================================

Tendremos que seguir los siguientes pasos:

-Escribir la función que determinará qué hace nuestro código corto.

-Registrarlo para poder usarlo en WordPress

-Añadirlo a nuestro proyecto.

=================================
Escribir la función del shortcode
=================================

El primer paso será definir qué hará nuestro shortcode. Y esto lo haremos con
una función.

Vamos a realizar un shortcode que imprima "Hola mundo" en pantalla.

function fun_hola_mundo() {
  return '¡Hola mundo!';
}

======================
Registrar el shortcode
======================

El siguiente paso es registrar el shortcode para que WorPress pueda
interpretarlo. Esto se hace mediante la función add_shortcode, que tiene dos
parámetros:

-La etiqueta que será usada en el editor
-El nombre de la función que se encarga de ejecutar el shortcode

Si añadimos el registro a nuestra función nos quedará:

function fun_hola_mundo() {
  return '¡Hola mundo!';
}
add_shortcode('hello', 'fun_hola_mundo');

Con esto ya tenemos nuestro shortcode personalizado. Ahora sólo falta añadir
este código a nuestro proyecto.

======================================
Añadir el shortcode a nuestro proyecto
======================================

Tenemos que copiar el código del shortcode en el functions.php de nuestro child
theme o en nuestro plugin de funciones o en nuestro tema. Con esto ya tendremos
disponible nuestro código corto.

En este ejemplo se copiara en /wordpress/wp-content/themes/my-theme/functions.php

Para usarlo sólo tendremos que escribir:

[hello]

=============
Otro ejemplo
=============

function demo_shortcode() {
  $message = 'Hello world!';
  return $message;
}
add_shortcode('hello', 'demo_shortcode');

Llamandolo en template:

[hello]

====================================
Shortcodes enclosing vs self-closing
====================================

El shortcode que hemos creado es del tipo self-closing, es decir, sólo hay que
escribir el código corto y ya está. Pero existe otro tipo: los enclosing. Éstos
tienen una etiqueta de apertura y otra de cierre y afectarán a todo el contenido
que se escriba en medio. La principal diferencia a la hora de crearlos es que la
función que ejecutará el shortcode recibirá un segundo parámetro, que es el
contenido entre las etiquetas de apertura y cierre.

Veámoslo con un ejemplo. Vamos a crear un shortcode que transforme a mayúsculas
(uppercase), minúsculas (lowercase) o capitalice (capitalize) el texto entre sus
etiquetas. Para ello, añadimos al nuestro child theme o plugin de funciones el
siguiente código:

function rmw_transformar_texto( $atts, $content = null ) {
  $a = shortcode_atts( array(
    'tipo' => 'none',
  ), $atts );
  return '<span style="text-transform:' . esc_attr($a['tipo']) . '">' . $content . '</span>';
}
add_shortcode( 'transformar', 'rmw_transformar_texto' );

La principal diferencia en el código es el nuevo parámetro $content. Gracias a
él podemos modificar el contenido entre las etiquetas del shortcode. Como se
puede ver, hemos creado un atributo llamado «tipo», con valor por defecto
«none», que será el que podamos modificar para transformar el texto. La salida
de nuestra función, es decir, el resultado de nuestro shortcode será el texto
que hay entre las etiquetas de nuestro código corto rodeado de una etiqueta span
que se encargará de transformar nuestro texto gracias a la propiedad css
text-transform. Un ejemplo de uso de este shortcode es:

[transformar tipo='uppercase']Caracola[/transformar]

==========
Resumiendo
==========

Los shortcodes son una herramienta muy útil de WordPress. Saber usarlos y
crearlos puede solucionarnos muchos problemas y ahorrarnos mucho tiempo.
Siguiendo los pasos que he dado podréis empezar a usar vuestros propios códigos
cortos para vuestros proyectos o de vuestros clientes.

=======
Fuentes
=======

-https://www.rafaelmartinweb.com/como-crear-shortcodes-wordpress/

============
Crear plugin
============

Cuando queremos agregar funciones personalizadas a nuestro proyecto de
ordPress, ya sea creadas por nosotros o que hayamos visto en otros sitios web,
tenemos que incorporarlas normalmente al archivo functions.php de nuestro tema activo.

El problema es, que si estamos usando un tema de terceros y este se actualiza,
también será actualizado el archivo functions.php y perderemos todas las
funciones que hayamos añadido manualmente.

Para evitar esto también tenemos la opción de usar un tema hijo o child-theme.

Pero si ya estamos usando un tema hijo que también es de terceros, y no queremos
perder los cambios en el functions.php si este se actualiza, podemos optar por
crear nuestro propio plugin de funciones.

Esto consiste básicamente en crear un archivo dentro del directorio de plugins
de nuestro proyecto, que va a actuar como un archivo de funciones independiente
del tema de WordPress, pero que todas las funciones que incorporemos a él
funcionarán de igual modo.

Para hacerlo, solamente tenemos que irnos al directorio de plugins de WordPress
y crear un nuevo directorio al que llamaremos por ejemplo «mi-plugin».

Ahora dentro del nuevo directorio creamos un archivo .php llamado por ejemplo
«mi-plugin.php»

Lo editamos con nuestro editor de código favorito y vamos añadir algunas líneas
comentadas que serán usadas por WordPress para reconocer detalles del nuevo
plugin:

<?php
/*
Plugin Name: Mi plugin de funciones
Description: Funciones adicionales para mi proyecto WordPress (no desactivar).
Version: 1.0
Author: Argenis Osorio
Author URI: https://github.com/argenisosorio
*/
?>

Creo que no hace falta explicar las líneas pues son muy intuitivas. En el
momento que guardemos los cambios, si nos dirigimos a la sección de plugins de
WordPress, veremos que este ha sido detectado y reconocido por las líneas
anteriores que hemos especificado.

Ahora solo tenemos que activarlo y mantenerlo activado para que todo lo que
incorporemos a él funcione.

Ya no tenemos que preocuparnos de que nuestro tema se actualice y perdamos
cualquier función que hayamos especificado en el functions.php, porque estarán
a salvo en nuestro propio plugin de funciones.

=======
Fuentes
=======

-https://www.gestionatuweb.net/wordpress-crear-nuestro-propio-plugin-de-funciones/

================================================================
Desactivar mensaje de actualización de wordpress en el dashboard
================================================================

Pegar el siguiente código al final de functions.php

add_action('after_setup_theme', 'remove_core_updates');

function remove_core_updates() {
    if (!current_user_can('update_core')) {
    return;
    }
    add_action('init', create_function('$a', "remove_action( 'init', 'wp_version_check' );"), 2);
    add_filter('pre_option_update_core', '__return_null');
    add_filter('pre_site_transient_update_core', '__return_null');
}

=======
Fuentes
=======

-https://decodecms.com/desactivar-las-notificaciones-de-actualizacion-en-wordpress/

================================
Instalar WordPress en un hosting
================================

A través de este detallado tutorial podrás llevar a cabo la tarea de instalar
WordPress, de diferentes maneras en tu Hosting o alojamiento Web, con el fin de
construir tu proyecto web con uno de los CMS más robustos y utilizados del
mercado.

==========================================
Cómo instalar WordPress (Actualizado 2020)
==========================================

Dividido en varios apartados, este Manual de instalación de WordPress te va a
permitir instalar o desinstalar WordPress con extrema facilidad, ya sea
realizando la instalación de forma manual o usando un instalador automático de
tu Hosting.

La ventaja más importante de WordPress.org frente a WordPress.com es que puedes
utilizarlo gratuitamente en cualquier Hosting (self-hosted) sin necesidad de
estar atado a un alojamiento específico y con la tranquilidad de tener el 100%
del control de la instalación y posterior personalización y administración de tu
web, sea para un Blog, una web corporativa o una tienda online.

========================
Instalación de WordPress
========================

Existen básicamente dos formas de instalar WordPress en un Hosting:

-Instalación manual, paso a paso, realizada por el usuario.

-Instalación automática, 90% desasistida, donde el proceso descansa en el
instalador.

Abordamos por separado estos dos métodos de instalación de WordPress,
diferenciando también la instalación en un dominio principal del Hosting, en un
subdominio y en un dominio adicional, ya que son los 3 casos más habituales que
puedes encontrarte.

Son muchos los servicios de Hosting que ofrecen instaladores de WordPress a sus
clientes para simplificar el proceso.

======================
Instalación automática
======================

Podemos realizar la instalación automática siempre y cuando contemos con un auto
instalador, por ejemplo como el que nosotros usamos en nuestro Hosting WordPress

En la carpeta principal del Hosting

La mayoría de instalaciones de WordPress en un Hosting se realizan en la carpeta
principal, que en alojamientos con cPanel es en la carpeta public_html, ya que
esta es la carpeta que aloja los contenidos que son mostrados por el dominio
principal de la cuenta de Hosting.

=========================================
Instalación de WordPress en un subdominio
=========================================

Para plantearse el uso de subdominios hay que tener claro previamente que estos
dependen siempre de un dominio y que no son elementos individuales, es decir,
sin un dominio no puedes crear un subdominio.

Un subdominio básicamente te va a permitir crear contenidos independientes del
dominio principal, ya sea a modo de categorización de contenidos, separación de
idiomas de la web o simplemente para tener sitios independientes basados en el
mismo dominio.

Podríamos decir que uno de los mayores inconvenientes de gestionar webs
diferentes bajo un mismo dominio es la falta de movilidad cuando quieres separar
proyectos webs gestionados en el mismo dominio. Frente a eso, el uso de
subdominios es una opción viable y económica que puedes utilizar para instalar
sitios webs temáticos en WordPress.

Ventajas de trabajar en un subdominio

-Funcionan como instalaciones independientes de las que gestiones con el dominio.

-Su uso es ilimitado (entendiendo que puedes tener cientos de subdominios bajo
un mismo dominio).

-Es una solución económica (coste cero).

-Son una alternativa frente al uso de directorios (carpetas) para alojar otras
webs.

-No genera ranking propio independiente del dominio, si bien que resta fuerza
al dominio principal.

Ejemplo

Una empresa con departamentos puede usar subdominios tipo comercial.dominio.com
en lugar de dominio.com/comercial.

===================================
Cómo instalar WordPress manualmente
===================================

-Descarga WordPress desde la web oficial.

-Sube el archivo .zip a la carpeta de tu Hosting deseada.

-Extrae el contenido en la carpeta actual

-Crea una base de datos desde cPanel, Bases de Datos.

-Ejecuta el instalador desde la url de tu dominio o la url temporal.

-Completa la instalación y verifica el funcionamiento.

===================================
Descripción de los pasos anteriores
===================================

1) Al descompirmir el .zip, esto va a generar una carpeta llamada wordpress dentro
de la carpeta principal del Hosting public_html.

Lo recomendado es que antes de proceder con la instalación es que analices si es
en esta carpeta en la que quieres tener la web, si quieres renombrarla para
luego usarla con un subdominio o dominio adicional o si quieres mover los
contenidos de esta carpeta a la carpeta principal del Hosting.

Descarga desde WordPress.org la última versión estable de este CMS, a tu
ordenador.

2) Sube el archivo .zip descargado en tu ordenador al Hosting. Si vas a utilizar
WordPress en una carpeta diferente de la carpeta principal /public_html, lo
recomendado es que subas el archivo .zip a la carpeta principal y no a otra.

Una vez subido el archivo .zip recarga la carpeta principal /public_html para
ver el archivo subido. Lo seleccionas y haces clic en el icono superior Extraer.

Esto va a generar otra carpeta llamada wordpress que dependerá de la principal,
quedando como /public_html/wordpress

3) Ahora toca crear la base de datos para esta instalación de WordPress. Accede
a tu Panel de Hosting, Bases de Datos, Crear una nueva base de datos.

Pones un nombre que no contenga espacios, acentos o caracteres especiales y
haces clic en "Crear una base de datos".

En esa misma pantalla, más abajo, debes crear el usuario que tendrá privilegios
para poder usar esa base de datos y le generas una contraseña segura, preferible
solo alfanumérica (letras y números).

Ahora asignale los permisos pertinentes a ese usuario que has creado para que
pueda ejecutar consultas, escribir y realizar otras tareas en la base de datos.
Hazlo desde la opción Añadir usuario a la base de datos y selecciona todos los
privilegios.

A continuación, desde una pestaña nueva de tu navegador, abre la url de tu
dominio (o la url temporal si aún no tienes dominio asignado a tu Hosting) y
lanza la instalación de WordPress (self-hosted).

Desde la url de tu dominio.com/wordpress/ podrás acceder donde seguiras con la
instalación estandar.

=======
Fuentes
=======

-https://www.webempresa.com/wordpress/como-instalar-wordpress-tutorial-de-instalacion-en-espanol.html

===============================
Plugin de captcha para worpress
===============================

Captcha Bank
============

1. Descargarlo desde acá: https://wordpress.org/plugins/captcha-bank/

2. Debe descomprimir manualmente el contenido del archivo .zip descargado, eso le
dejará una carpeta con nombre: captcha-bank, esta carpeta debe copiarla dentro
del directorio wp-content/plugins/ del proyecto Wordpress instalado, luego
busque la opción Plugins > Plugins instalados donde debe activar a Captcha Bank.

3. Luego de activarlo se activara la configuración automática del plugin donde
se escogerá el tipo de captcha a usar, así como el número y el tipo de
caracteres del captcha, así como los formularios donde se va a mostrar el
captcha.

=============================
Agregar favicon personalizado
=============================

1. Ve al **Panel de administración**.

2. Haz clic sobre **Apariencia** -> **Personalizar**.

3. Elige **Identidad del sitio**.

4. Haz clic en el botón **Seleccionar imagen** en la sección Icono del sitio.

5. Sube el favicon que has preparado, debe ser el mismo del SINIDOT, el cual
se encuentra en la ruta sinidot_app/public/images/favicon.png.

====================================================
Algunos plugins para optimizar la carga de WordPress
====================================================

WP Super Cache: este plugin te ayuda a mejorar la velocidad de carga de tu sitio
web y reducir el tiempo de carga de las páginas.

Smush: este plugin te permite optimizar imágenes y reducir su tamaño sin perder
calidad, lo que puede mejorar la velocidad de carga de tu sitio web.

Fuente
======

ChatGPT

====================================================================
Nueva variable en el archivo wp-config.php para ser usada en el tema
====================================================================

Para lograr que la variable $a sea configurable desde el archivo de
configuración de WordPress en lugar de tenerla directamente en el archivo
index.php, puedes seguir estos pasos:

1- Abre el archivo wp-config.php ubicado en el directorio raíz de tu instalación de
WordPress (/var/www/html/wordpress/).

2- Añade el siguiente código después de las líneas de configuración de la base
de datos:

/** Configuración personalizada */
define('MI_VARIABLE', 'https://miweb.com');

3- Guarda los cambios en el archivo wp-config.php.

4- Ahora, puedes acceder al valor de la variable $a en tu archivo index.php
utilizando MI_VARIABLE. Por ejemplo:

<?php
    $a = MI_VARIABLE;
    echo $a; // Imprime https://miweb.com
?>

Al hacer esto, puedes modificar el valor de MI_VARIABLE directamente en el
archivo wp-config.php sin tener que editar el archivo index.php cada vez que
desees cambiar su valor.

Fuente
======

ChatGPT

=================================
Comprobar la versión de WordPress
=================================

Acceder al archivo version.php que se encuentra en:

wordpress/wp-includes/version.php y ver la variable $wp_version, ejemplo:

$wp_version = '6.6.1';

Fuente
======

https://kinsta.com/es/base-de-conocimiento/comprobar-su-version-de-wordpress/
