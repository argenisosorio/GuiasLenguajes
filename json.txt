==================
Guía de json by dM
==================

¿Qué es JSON?
=============

JSON (JavaScript Object Notation) es un formato ligero de intercambio de datos.

Estructura: Pares de clave: valor (como objetos en JavaScript).

Usos principales:

-Almacenar y transmitir datos entre servidor y cliente (APIs, bases de datos).

-Alternativa a XML (más fácil de leer y escribir).

Sintaxis Básica de json
=======================

{
  "clave": "valor",
  "numero": 42,
  "booleano": true,
  "array": [1, 2, 3],
  "objetoAnidado": {
    "clave": "valor"
  },
  "nulo": null
}

Reglas:

-Claves entre comillas dobles (").

-Valores pueden ser: string, number, boolean, array, object, null.

-Sin comentarios ni funciones.

Ejemplo Práctico: API de Películas

JSON de Ejemplo (1 línea)

{"peliculas":[{"id":1,"titulo":"El Padrino","año":1972,"generos":["Drama","Crimen"],"director":{"nombre":"Francis Ford Coppola","pais":"EE.UU"}},{"id":2,"titulo":"Parasite","año":2019,"generos":["Thriller","Drama"],"director":{"nombre":"Bong Joon-ho","pais":"Corea del Sur"}}]}

Cómo usarlo en JavaScript
javascript

const apiResponse = '{"peliculas":[{"id":1,"titulo":"El Padrino","año":1972,"generos":["Drama","Crimen"],"director":{"nombre":"Francis Ford Coppola","pais":"EE.UU"}}]}';
const data = JSON.parse(apiResponse);

console.log(data.peliculas[0].titulo); // "El Padrino"
console.log(data.peliculas[0].director.pais); // "EE.UU"

Buenas Prácticas
================

-Siempre maneja errores al parsear JSON:

try {
  const data = JSON.parse(malformedJson);
} catch (error) {
  console.error("JSON inválido:", error);
}

-Usa Content-Type: application/json en APIs.

-Evita anidación excesiva (máximo 3-4 niveles).

Fuente
======

DeepSeek

JSON
====

JSON es una notación de objetos basada en JavaScript, utiliza una sintaxis que
nos permite crear objetos de manera rapida y simple, estos objetos pueden ser
utilizados de la manera que queramos y la notación se utiliza muy comúnmente
para crear servicios REST, objetos, e incluso fue adoptada por algunas bases de
datos como lo es MongoDB.

Sintaxis de JSON

Para escribir JSON debemos tener en cuenta lo siguiente:
La creación de los objetos JSON implica escribir datos, para ello:

-Los objetos JSON estan rodeados por llaves “{}”
-Los datos estan separados por comas.
-Los datos se escriban en pares, siendo primero el nombre o atributo del mismo y luego el valor del dato.
-Llaves cuadradas [] guardan arreglos, incluyendo otros objetos JSON

El formato JSON tiene la siguiente notación:

{key : value, key2 : value2, key3 : value3,...}

Y también puede ser serializado y multidimensional, por ejemplo:

[{key : value, key2 : value2, key3 : value3, key : { key : value, key2 : value2, key3 : value3} },{key : value, key2 : value2, key3 : value3,...}]

Ejemplo de un objeto JSON que guarda un usuario y password:

var objetoJSON = {"usuario":"user","password":"123456"};

--- Ejemplos:
 
<!-- Ejemplo de XML -->
<Clientes>
  <Cliente ID="283">
    <Nombre>Juan Carlos Crespin</Nombre>
    <Direccion verificada="si">
            <Calle>Avda Perú</Calle>
            <Numero>235</Numero>
        <Ciudad>Bahía Blanca</Ciudad>
        <Provincia>Buenos Aires</Provincia>
        <CodigoPostal>8000</CodigoPostal>
            <Pais>Argentina</Pais>
         </Direccion>
  </Cliente>
</Clientes>

<!-- Equivalente en JSON -->
{
  "Clientes": {
    "Cliente": {
      "-ID": "283",
      "Nombre": "Juan Carlos Crespin",
      "Direccion": {
        "-verificada": "si",
        "Calle": "Avda Perú",
        "Numero": "235",
        "Ciudad": "Bahía Blanca",
        "Provincia": "Buenos Aires",
        "CodigoPostal": "8000",
        "Pais": "Argentina"
      }
    }
  }
}

<!-- Otro Ejemplo de XML-->
<persona>
    <nombre>juan</nombre>
    <edad>22</edad>
    <estudios>
        <estudio>primario</estudio>
        <estudio>secundario</estudio>
    </estudios>
</persona>

<!-- Equivalente en JSON -->
{
    "persona":{
       "nombre":"juan",
       "edad":22,
       "estudios":["primario","secundario"]
    }
}

-------------------------------------

<!-- Escribiendo en el DOM los datos de un JSON -->
<!DOCTYPE html>
<html>
<body>
<h3>JSON Object Creation in JavaScript</h3>
<p id="caja"></p>
<script type="text/javascript">
  var json = '{ "nombre":"Pedro Camejo", "pais":"Venezuela", "telefono":"12345678" }';
  var obj = JSON.parse(json);
  document.getElementById("caja").innerHTML =
  obj.nombre + "<br>" +
  obj.pais + "<br>" +
  obj.telefono;
</script>
</body>
</html>

==========
Qué es JWT
==========

JWT (JSON Web Token) es un estándar qué está dentro del documento RFC 7519.

En el mismo se define un mecanismo para poder propagar entre dos partes, y de
forma segura, la identidad de un determinado usuario, además con una serie de
claims o privilegios.

Estos privilegios están codificados en objetos de tipo JSON, que se incrustan
dentro de del payload o cuerpo de un mensaje que va firmado digitalmente.

Token JWT
=========

En la práctica, se trata de una cadena de texto que tiene tres partes
codificadas en Base64, cada una de ellas separadas por un punto, como por
ejemplo lo siguiente:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

Podemos utilizar un debugger online (https://jwt.io/) para decodificar ese token
y visualizar su contenido. Si accedemos al mismo y pegamos dentro el texto
completo, se nos mostrará lo que contiene:

HEADER:ALGORITHM & TOKEN TYPE

{
  "alg": "HS256",
  "typ": "JWT"
}

PAYLOAD:DATA

{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}

VERIFY SIGNATURE

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
)

Podemos ver el contenido del token sin necesidad de saber la clave con la cual
se ha generado, aunque no podremos validarlo sin la misma.

Como hemos dicho, un token tres partes:

Header: encabezado dónde se indica, al menos, el algoritmo y el tipo de token,
que en el caso del ejemplo anterior era el algoritmo HS256 y un token JWT.

Payload: donde aparecen los datos de usuario y privilegios, así como toda la
información que queramos añadir, todos los datos que creamos convenientes.

Signature: una firma que nos permite verificar si el token es válido, y aquí es
donde radica el quid de la cuestión, ya que si estamos tratando de hacer una
comunicación segura entre partes y hemos visto que podemos coger cualquier token
y ver su contenido con una herramienta sencilla, ¿dónde reside entonces la
potencia de todo esto?

Firma de un token JWT
=====================

La firma se construye de tal forma que vamos a poder verificar que el remitente
es quien dice ser, y que el mensaje no se ha modificado por el camino.

Se construye como el HMACSHA256, que son las siglas de Hash-Based Message
Authentication Code (Código de Autenticación de Mensajes), cifrado además con el
algoritmo SHA de 256 bits. Se aplica esa función a:

Codificación en Base64 de header.

Codificación en Base64 de payload.

Un secreto, establecido por la aplicación.

De esta forma, si alguien modifica el token por el camino, por ejemplo,
inyectando alguna credencial o algún dato malicioso, entonces podríamos
verificar que la comprobación de la firma no es correcta, por lo que no podemos
confiar en el token recibido y deberíamos denegar la solicitud de recursos que
nos haya realizado, ya sea para obtener datos o modificarlos.

Si lo que estamos requiriendo es que el usuario esté autenticado, deberíamos
denegar esa petición, por lo que siempre que trabajemos con JWT deberíamos
verificar con esa firma si el token es válido o no lo es.

Token JWT seguro
================

Aunque el algoritmo nos permita verificar la firma, y, por tanto, confiar o no,
tanto el encabezado como el cuerpo si llevan muchos datos van en abierto, ya que
Base64 no es un cifrado, es simplemente una codificación que es muy fácilmente
decodificable.

JWT nos invita siempre a que la comunicación entre partes se realice con HTTPS
para encriptar el tráfico, de forma que, si alguien lo interceptara, el propio
tráfico a través de HTTP sobre esos sockets SSL, cifrara toda la comunicación,
la del token y todo lo demás, y así añadir esa posibilidad de seguridad.

De hecho, siempre deberíamos utilizar HTTPS y un servidor con certificado para
hacer el despliegue de nuestras aplicaciones, no solamente con este con este
tipo de token JWT.

Ciclo de vida de un Token JWT
=============================

Vamos a ver ahora el ciclo de vida de un token JWT, si lo queremos utilizar en
el marco de un proceso de autenticación.

Como hemos visto, JWT no es un estándar de autenticación, sino que simplemente
un estándar que nos permite hacer una comunicación entre dos partes de identidad
de usuario. Con este proceso, además, podríamos implementar la autenticación de
usuario de una manera que fuera relativamente segura.

Comenzaríamos desde el cliente, haciendo una petición POST para enviar el
usuario y contraseña, y realizar el proceso de login.

Se comprobaría que ese usuario y su contraseña son correctos, y de serlos,
generar el token JWT para devolverlo al usuario.

A partir de ahí la aplicación cliente, con ese token, haría peticiones
solicitando recursos, siempre con ese token JWT dentro de un encabezado, que
sería Authorization: Bearer XXXXXXX, siendo Bearer el tipo de prefijo seguido de
todo el contenido del token.

En el servidor se comprobaría el token mediante la firma, para verificar que el
token es seguro, y, por tanto, podemos confiar en el usuario.

Dentro del cuerpo del token, además, tenemos los datos de quién es el usuario
que ha realizado esa petición, porque podemos contener en el payload todos los
datos de usuario que queramos.

Tras verificar que el token es correcto y saber quién es el que ha hecho la
petición, podemos aplicar entonces el mecanismo de control de acceso, saber si
puede acceder o no, y si es así, responder con el recurso protegido, de manera
que lo podría recibir de una forma correcta.

De esta forma podríamos implementar el proceso de autenticación, y hacerlo,
además, con estos JSON Web Token.

================
JSON.stringify()
================

Un uso común de JSON es intercambiar datos hacia / desde un servidor web.

Al enviar datos a un servidor web, los datos deben ser una cadena.

Convierta un objeto JavaScript en una cadena con JSON.stringify().

Ejemplo
=======

<!DOCTYPE html>
<html>
<body>

<h2>Create a JSON string from a JavaScript object.</h2>
<p id="demo"></p>

<script>
const obj = {name: "John", age: 30, city: "New York"};
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
</script>

</body>
</html>

=========================================
Cómo usar JSON.parse() y JSON.stringify()
=========================================

El objeto JSON, que está disponible en todos los navegadores modernos, tiene dos
útiles métodos para manejar el contenido con formato JSON: parse y stringify.

JSON.parse() toma una cadena JSON y la transforma en un objeto de JavaScript.

JSON.stringify() toma un objeto de JavaScript y lo transforma en una cadena
JSON.

Ejemplo:

const myObj = {
  name: 'Skip',
  age: 2,
  favoriteFood: 'Steak'
};

const myObjStr = JSON.stringify(myObj);

console.log(myObjStr);
// "{"name":"Sammy","age":6,"favoriteFood":"Tofu"}"

console.log(JSON.parse(myObjStr));
// Object {name:"Sammy",age:6,favoriteFood:"Tofu"}

Acceder a datos según su llave:

var oJson = {
  "name": "",
  "skills": "",
  "jobtitle": "Entwickler",
  "res_linkedin": "GwebSearch"
}
alert(oJson.jobtitle);

JSON.parse()
============

Puedes usa JSON.parse() Para "descomprimir" un texto json comprimido y verlo en
formato árbol (usando JavaScript):

Comprimido:
{"peliculas":[{"año":1994,"autores":[{"nombre":"Quentin Tarantino","generos":[{"nombre":"Crimen"},{"nombre":"Thriller"}]}],"titulo":"Pulp Fiction"},{"año":2008,"autores":[{"nombre":"Christopher Nolan","generos":[{"nombre":"Acción"},{"nombre":"Ciencia Ficción"}]}],"titulo":"The Dark Knight"},{"año":1997,"autores":[{"nombre":"James Cameron","generos":[{"nombre":"Romance"},{"nombre":"Drama"}]}],"titulo":"Titanic"},{"año":2021,"autores":[{"nombre":"Denis Villeneuve","generos":[{"nombre":"Ciencia Ficción"},{"nombre":"Aventura"}]}],"titulo":"Dune"}]}

Descomprimir:
console.log(JSON.parse('{"peliculas":[{"año":1994,"autores":[{"nombre":"Quentin Tarantino","generos":[{"nombre":"Crimen"},{"nombre":"Thriller"}]}],"titulo":"Pulp Fiction"},{"año":2008,"autores":[{"nombre":"Christopher Nolan","generos":[{"nombre":"Acción"},{"nombre":"Ciencia Ficción"}]}],"titulo":"The Dark Knight"},{"año":1997,"autores":[{"nombre":"James Cameron","generos":[{"nombre":"Romance"},{"nombre":"Drama"}]}],"titulo":"Titanic"},{"año":2021,"autores":[{"nombre":"Denis Villeneuve","generos":[{"nombre":"Ciencia Ficción"},{"nombre":"Aventura"}]}],"titulo":"Dune"}]}'));

Fuente
======

DeepSeek
