============================
Guía de Android Studio by dM
============================

¿Android Studio?
===============

Android Studio es el entorno de desarrollo integrado (IDE, por sus siglas en
inglés) oficial de Android. Fue desarrollado por Google y está basado en el
popular IDE IntelliJ IDEA de JetBrains.

Android Studio está diseñado para ayudar a los desarrolladores a crear
aplicaciones para el sistema operativo Android de manera eficiente y productiva.

Proporciona herramientas y funciones para crear interfaces de usuario, escribir
código, depurar y probar aplicaciones, y empaquetar aplicaciones para su
distribución a través de la Google Play Store y otras tiendas de aplicaciones.

Algunas de las características clave de Android Studio incluyen:

-Un editor de código avanzado con resaltado de sintaxis, autocompletado y
refactorización de código.

-Una amplia biblioteca de componentes y widgets de interfaz de usuario para la
creación de interfaces de usuario atractivas y funcionales.

-Integración con herramientas de depuración y análisis de rendimiento para
identificar problemas en el código y mejorar el rendimiento de la aplicación.

-Soporte para la creación de aplicaciones nativas y aplicaciones híbridas
utilizando frameworks como Flutter y React Native.

-Herramientas de empaquetado y distribución de aplicaciones para la Google Play
Store y otras tiendas de aplicaciones.

En resumen, Android Studio es el IDE oficial de Android desarrollado por Google
que proporciona herramientas y funciones para crear aplicaciones de manera
eficiente y productiva para el sistema operativo Android.

Instalación en GNU/Linux Debian
===============================

Puedes seguir los siguientes pasos para instalar Android Studio en Debian 11:

Descarga el archivo de instalación de Android Studio desde el sitio web oficial:
https://developer.android.com/studio

Abre una terminal y navega hasta la ubicación en la que se descargó el archivo
de instalación.

Descomprime el archivo de instalación utilizando el siguiente comando:

$ tar -xvzf android-studio-ide-<version>.tar.gz

(reemplaza <version> con la versión que descargaste)

Navega a la carpeta android-studio/bin utilizando el siguiente comando:

$ cd android-studio/bin

Ejecuta el archivo studio.sh utilizando el siguiente comando:

$ ./studio.sh

El instalador de Android Studio se abrirá. Sigue las instrucciones del
instalador para completar la instalación.

Una vez que la instalación se haya completado, puedes ejecutar Android Studio
desde el menú de aplicaciones o desde la línea de comandos utilizando el
siguiente comando:

$ ./android-studio/bin/studio.sh

Ten en cuenta que es posible que necesites instalar algunas dependencias
adicionales para que Android Studio funcione correctamente en Debian 11.

Consulta la documentación de Android Studio para obtener más información sobre
los requisitos del sistema y las dependencias necesarias.

Fuentes
=======

ChatGPT

==============================
Creando un projecto Hola mundo
==============================

1- Ejecutar Android Studio, deberas ver una página de bienvenida.

2- En la página de bienvenida, haz clic en Start a new Android Studio project
(Comienza un nuevo proyecto de Android Studio). La siguiente ventana presenta la
página de las actividades.

3- Crea una actividad "Hola mundo":

Android Studio proporciona plantillas de actividades para ayudarte a comenzar.
Para el proyecto "Hola mundo" elige Empty Activity (Actividad vacía) y haz clic
en Next (Siguiente).

Una actividad es un componente crucial de cualquier aplicación Android. Esta
proporciona una pantalla con la que los usuarios pueden interactuar para llevar
a cabo actividades, como marcar el teléfono, tomar una fotografía o enviar un
mensaje. Cada actividad tiene una ventana en la que puede desplegar su interfaz
de usuario. La ventana normalmente llena la pantalla, pero puede ser más pequeña
que la pantalla y flotar por encima de otras ventanas.

4- Configura los detalles del proyecto "Hola mundo":

Terminaremos de crear el proyecto configurando algunos detalles sobre su nombre,
ubicación y qué versión de API utiliza.

-Cambia el nombre de la aplicación, HelloWoldBasic le puse en este ejemplo.

-Cambia el valor predeterminado de Project location (Ubicación del proyecto) a
tu directorio preferido, o simplemente déjalo con la ubicación predeterminada.

-Lenguaje: Tendremos Java y Kotlin, en ese ejemplo usaremos Java.

-En el Minimum API level (Nivel de API mínimo), se configura la compatibilidad
de la aplicacion que estamos creando, con las diferentes versiones de los
sistemas operativos de android, generalmente deebemos escoger la más baja,
la ventana nos mostrará el nivel de compatibilidad en puntos percentuales. Esto
garantiza que tu aplicación pueda ejecutarse en casi todos los dispositivos.

Haz clic en Finish (Finalizar).

5- El sistema de compilación Gradle: Cada vez que creas una nueva aplicación,
Android Studio crea una carpeta para tus proyectos y compila el proyecto con su
sistema Gradle. El proceso de Gradle puede tardar unos minutos. Gradle es el
sistema de compilación de Android, que es responsable de la compilación, prueba
y despliegue del código. Este permite que la aplicación se ejecute en el
dispositivo.

6- Explicando los archivos de un proyecto de aplicación Android

Cada vez que comienzas un proyecto nuevo, Android Studio crea la estructura de
carpetas y archivos necesarios para esa aplicación. Echemos un vistazo a los
diferentes archivos involucrados en un proyecto de aplicación de Android.

En este ejemplo le pusimos como nombre a nustra app: HelloWoldBasic por lo cual
se creo la carpeta en la ruta AndroidStudio/AndroidStudioProjects/HelloWoldBasic

El contenido de la app HelloWoldBasic será:

├── app
│   ├── build.gradle
│   ├── libs
│   ├── proguard-rules.pro
│   └── src
│       ├── androidTest
│       │   └── java
│       │       └── com
│       │           └── example
│       │               └── hellowoldbasic
│       │                   └── ExampleInstrumentedTest.java
│       ├── main
│       │   ├── AndroidManifest.xml
│       │   ├── java
│       │   │   └── com
│       │   │       └── example
│       │   │           └── hellowoldbasic
│       │   │               └── MainActivity.java
│       │   └── res
│       │       ├── drawable
│       │       │   └── ic_launcher_background.xml
│       │       ├── drawable-v24
│       │       │   └── ic_launcher_foreground.xml
│       │       ├── layout
│       │       │   └── activity_main.xml
│       │       ├── mipmap-anydpi-v26
│       │       │   ├── ic_launcher_round.xml
│       │       │   └── ic_launcher.xml
│       │       ├── mipmap-anydpi-v33
│       │       │   └── ic_launcher.xml
│       │       ├── mipmap-hdpi
│       │       │   ├── ic_launcher_round.webp
│       │       │   └── ic_launcher.webp
│       │       ├── mipmap-mdpi
│       │       │   ├── ic_launcher_round.webp
│       │       │   └── ic_launcher.webp
│       │       ├── mipmap-xhdpi
│       │       │   ├── ic_launcher_round.webp
│       │       │   └── ic_launcher.webp
│       │       ├── mipmap-xxhdpi
│       │       │   ├── ic_launcher_round.webp
│       │       │   └── ic_launcher.webp
│       │       ├── mipmap-xxxhdpi
│       │       │   ├── ic_launcher_round.webp
│       │       │   └── ic_launcher.webp
│       │       ├── values
│       │       │   ├── colors.xml
│       │       │   ├── strings.xml
│       │       │   └── themes.xml
│       │       ├── values-night
│       │       │   └── themes.xml
│       │       └── xml
│       │           ├── backup_rules.xml
│       │           └── data_extraction_rules.xml
│       └── test
│           └── java
│               └── com
│                   └── example
│                       └── hellowoldbasic
│                           └── ExampleUnitTest.java
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradle.properties
├── gradlew
├── gradlew.bat
├── local.properties
└── settings.gradle

34 directories, 36 files

El archivo AndroidManifest.xml
==============================

Su ruta es /app/src/main/AndroidManifest.xml. Es el archivo manifiesto describe
información esencial sobre tu aplicación.

Ejemplo:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.HelloWoldBasic"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

La carpeta java
===============

Esta carpeta contiene los archivos del código fuente de Java.

El archivo MainActivity.java

Su ruta es: HelloWoldBasic/app/src/main/java/com/example/hellowoldbasic/MainActivity.java

Este archivo contiene el código fuente de Java para la actividad principal de la
aplicación.

La carpeta res
==============

Cuya ruta es HelloWoldBasic/app/src/main

Esta carpeta incluye todos los recursos que no son de código, por ejemplo:

-Diseños (layouts): los diseños son archivos XML que definen la arquitectura de
la interfaz de usuario en una actividad o en un componente de una interfaz de
usuario. Por ejemplo, en nuestra aplicación, el archivo activity_main.xml
corresponde a la actividad principal.

-Valores (values): contiene el color, estilo y los archivos XML de cadenas para
la aplicación.

-Dibujables (drawable): este es un repositorio general para todos los gráficos
que pueden ser dibujados en la pantalla, por ejemplo las imágenes.

El archivo build.gradle
=======================

Este es un archivo generado automáticamente que contiene información sobre los
detalles de la aplicación, por ejemplo la versión del SDK, la versión de las
herramientas de compilación, el ID de la aplicación y más.

En el archivo build.gradle, la sección android define la configuración
específica de compilación para tu proyecto de Android.

La línea compileSdkVersion XX indica la versión del SDK de compilación que se
utilizará para compilar tu aplicación.

El compileSdkVersion es el nivel de API de Android con el que tu aplicación se
compilará y se asegurará de que las clases y métodos de la API específica estén
disponibles durante la compilación. Por ejemplo: compileSdkVersion 33. En este
caso, compileSdkVersion 33 indica que estás compilando tu aplicación utilizando
el nivel de API 33, que corresponde a la versión de Android 12.

Al establecer compileSdkVersion en 33, aseguras que tu aplicación pueda utilizar
todas las características y funcionalidades disponibles en la versión 33 del SDK
de Android. Sin embargo, también es importante asegurarse de que tu proyecto
esté correctamente configurado con las dependencias y bibliotecas adecuadas para
ser compatibles con la versión de compilación seleccionada.

Es recomendable mantener compileSdkVersion actualizado con la versión más
reciente del SDK de Android disponible, ya que esto te permitirá aprovechar las
mejoras y características más recientes. Sin embargo, al hacerlo, también debes
asegurarte de que las dependencias y bibliotecas que estás utilizando sean
compatibles con esa versión.

Recuerda que al cambiar el valor de compileSdkVersion, es posible que también
debas realizar cambios en otras partes de tu proyecto para garantizar la
compatibilidad y el correcto funcionamiento de tu aplicación.

Escribiendo el código de la aplicación "Hola mundo"
===================================================

Ahora que tienes un panorama general de la estructura del proyecto, describamos
los archivos componentes más críticos que constituyen a la aplicación
"Hola mundo".

La actividad principal predeterminada
=====================================

La actividad principal es la primera pantalla que aparecerá cuando ejecutes tu
aplicación.

Cada actividad representa una pantalla de la interfaz de usuario de la
aplicación Android. Cada actividad tiene un archivo de implementación Java
(o Kotlin) y un archivo de diseño XML.

El código Java de la actividad principal predeterminada
=======================================================

A continuación se encuentra el código Java predeterminado generado por la
aplicación para la actividad principal cuya ruta es
app/src/main/java/com/example/hellowoldbasic/MainActivity.java:

package com.example.hellowoldbasic;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}

El código define una clase MainActivity, y define lo que ocurre cuando se crea
la actividad con el método onCreate. En este caso, simplemente inicializa la
vista de la actividad con el diseño del archivo activity_main.

El archivo de diseño XML predeterminado
=======================================

Los archivos XML se usan para los diseños. El archivo de diseño XML de la
actividad principal se encuentra en el directorio /app/src/main/res/layout del
proyecto. Los archivos de diseño son nombrados de acuerdo a lo que representan.
Por ejemplo, la aplicación "Hola mundo" tiene un diseño, que es el
activity_main.xml, cuyo nombre se basa en la actividad principal.

Este es el diseño predeterminado activity_main.xml. Este contiene un elemento
text view, con el texto Hello World! (¡Hola mundo!):

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

Cambiando el diseño de la actividad
===================================

Como puedes ver, no necesitamos cambiar mucho para terminar nuestra aplicación
"Hola mundo", pero haremos un pequeño cambio para que el texto destaque más:
cambiaremos el color y el tamaño de la fuente del texto.

<TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello World!"
    android:textSize="50dp"
    android:textColor="#800000"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintLeft_toLeftOf="parent"
    app:layout_constraintRight_toRightOf="parent"
    app:layout_constraintTop_toTopOf="parent" />

El archivo strings (cadenas)
============================

El archivo strings.xml cuaya ruta es /app/src/main/res/values/strings.xml
proporciona cadenas de texto para tu aplicación. Por ejemplo, un archivo de
cadenas predeterminado se ve así:

<resources>
   <string name="app_name">Hello World Application</string>
</resources>

Si quieres cambiar el nombre de tu aplicación, puedes hacerlo aquí.

Ejecutando la aplicación
========================

Conecta tu dispositivo Android a tu computadora con un cable USB. El tipo de
conexión correcto debería aparecer como connected as a media device (conectado
como un dispositivo de medios).

Nota: También necesitarás tener habilitadas las opciones de desarrollador en tu
dispositivo

En Android Studio navega hasta el menú superior y selecciona Run 'app' (Ejecutar
'aplicación'). Android Studio mostrará un cuadro de diálogo en el que puedes
elegir en qué dispositivo ejecutar tu aplicación Android. Elige el dispositivo
que conectaste y haz clic en el botón OK.

La aplicación "Hola mundo" ahora debería estar ejecutándose en tu teléfono.
Desde aquí puedes modificar tu aplicación según lo que desees y agregar más
funciones.

Fuente
======

https://code.tutsplus.com/es/tutorials/the-simplest-android-app-hello-world--cms-35175

========================================================================
Cómo desactivar Google Play Protect para que no analice tus aplicaciones
========================================================================

Google Play Protect protege a los dispositivos Android de aplicaciones
maliciosas tanto a nivel del móvil como en la propia tienda.

¿Quieres desactivarlo de tu smartphone? Así puedes hacerlo:

Uno de los entornos que veremos cambiado con esto es la Google Play Store; que
nos ofrecerá información sobre si las aplicaciones que actualizamos son seguras.
Pero hay un funcionamiento en segundo plano que no apreciaremos a primera vista:
Google Play Protect escanea nuestro dispositivo analizando las aplicaciones que
hayamos instalado, también las Apk.

Ahora disponemos de una especie de «antivirus» dentro del sistema, una opción
más avanzada de seguridad que la que proveía anteriormente SafetyNet. Con Google
Play Protect nuestro dispositivo se escanea a diario enviando la información a
Google. Incluso se envían los archivos Apk que hayamos instalado para averiguar
si ofrecen riesgos de seguridad.

Google Play Protect se instala sin que te des cuenta en tu móvil y también se
activa por defecto. Es una medida de seguridad excelente, pero también implica
cierta pérdida de privacidad, algo en lo que es especialista Google.

Desactiva el análisis y envío de aplicaciones en tu móvil:

Ajustes/Configuración > Seguridad/Estado de seguridad
> Google Play Protect > Desactivar.

Esto nos debería permitar instalar nuestras aplicaciones de prueba generadas con
Android Studio.

Fuente
======

https://www.elespanol.com/elandroidelibre/tutoriales/20170811/desactivar-google-play-protect-no-analice-aplicaciones/238227300_0.html

==============
APK de Android
==============

Android tiene **sus propios archivos* que permiten instalar aplicaciones. Estos
archivos pueden instalarse desde la propia tienda de aplicaciones, o bien por
libre, a través de páginas de terceros.

Esta última forma siempre ha sido permitida por Google, quien incorpora un
instalador de aplicaciones en el sistema para que todo archivo APK que
descarguemos, pueda ser instalado. En resumidas cuentas, un APK es un paquete de
instalación que contiene los datos de una aplicación.

Cada aplicación requiere de una serie de datos para poder ejecutarse en un
sistema operativo. En el caso de Android, esos datos de la app se encuentran
comprimidos dentro del archivo APK (Android Application Package). Estos archivos
pueden compartirse entre móviles Android (basta con enviarlos por la vía que
quieras), y para abrirlos no hace falta más que pulsar sobre ellos.

En la mayoría de los casos, los APK contienen todos los datos necesarios para
hacer funcionar la aplicación. No obstante, hay casos en los que, tras instalar
el APK, es necesario que se descarguen aún más datos para que la aplicación
puede funcionar.

Fuente
======

https://www.xatakandroid.com/aplicaciones-android/que-apk-android-como-se-instala-diferencias-apps-normales

=====================================================
Generar archivos APK y APK firmados en Android Studio
=====================================================

Android Studio te permite crear dos tipos de archivos APK.

Primero están los archivos APK de depuración que se generan únicamente con fines
de prueba. Se ejecutarán en tu móvil Android. Sin embargo, no se pueden cargar
en Play Store ni ponerse a disposición del público.

En segundo lugar, puedes generar archivos APK firmados. Los archivos APK
firmados son útiles cuando has probado tu aplicación y está lista para ser
cargada en Play Store y lanzada al público en general.

Este tutorial te mostrará cómo crear una aplicación de Android generando
archivos APK utilizando Android Studio.

1- Crear un nuevo proyecto, probar que funcione con el dispositivo conectado.

2- Crea un archivo APK: Generar un archivo APK de depuración es fácil y es
cuestión de unos pocos clics. Primero, abre tu proyecto o aplicación que deseas
importar a un archivo APK. A continuación, selecciona en el menú de la barra de
herramientas a Build > Build Bundle(s)/APK(s) > Build APK(s).

Android Studio tardará unos minutos en generar un archivo APK. Una vez que se
complete la compilación del APK, recibirás una notificación en la esquina
inferior derecha de la pantalla. A partir de esa notificación, selecciona
Localizar y se te llevará a la ubicación del archivo APK.

Si pierdes la notificación, aún puedes ubicar el archivo APK en la siguiente
ruta dentro de la carpeta de tu proyecto:

/HelloWoldBasic/app/build/intermediates/apk/debug/app-debug.apk

El archivo se denomina app-debug.apk de forma predeterminada.

La podemos copiar al dispositivo directamente para instalarla y probarla,
es posible que no deje instalar directamente debido a Google Play Protect.

Fuente
======

https://code.tutsplus.com/es/tutorials/how-to-generate-apk-and-signed-apk-files-in-android-studio--cms-37927

=====================
El archivo .gitignore
=====================

Al crear el proyecto con Android Studio, en la carpeta raís del mismo también se
creara el archivo .gitignore, cuyo contenido por defecto es:

*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties

Significa que podemos ejecutar git init para inicializar un nuevo repositorio
local desde la carpeta raíz de nuestro proyecto.

==============================================
Cambiar el ícono de una app exportada como apk
==============================================

En el proyecto de Android Studio, ve a la vista de "Project" (Proyecto) en el
panel izquierdo.

Haz clic derecho en la carpeta "res" y selecciona "New" (Nuevo) en el menú
desplegable.

Luego, selecciona "Image Asset" (Recurso de imagen) en el submenú. Se abrirá la
ventana "Asset Studio".

En la ventana "Asset Studio", selecciona "Launcher Icons" (Íconos de lanzador)
en el menú de la izquierda.

A continuación, puedes elegir "Image" (Imagen) y hacer clic en el botón "..."
para seleccionar la imagen que deseas utilizar como ícono de la aplicación.

Después de seleccionar la imagen, puedes configurar las opciones de estilo, como
la forma del ícono, el fondo y los efectos. Puedes previsualizar cómo se verá el
ícono en diferentes dispositivos en la parte derecha de la ventana.

Cuando hayas terminado de configurar las opciones, haz clic en el botón "Next"
(Siguiente) y luego en "Finish" (Finalizar) para generar los íconos en diferentes
tamaños.

Android Studio generará automáticamente los íconos en las diferentes carpetas
"mipmap" correspondientes a las densidades de pantalla.

Si tienes alguna otra pregunta, no dudes en preguntar. ¡Estoy aquí para ayudarte!

Fuente
======

ChatGPT

==================================================
Diferenciar 2 apks generadas con el mismo proyecto
==================================================

Para diferenciar dos APK generados desde el mismo proyecto de Android Studio,
debes realizar algunos ajustes en el archivo build.gradle y en el archivo
AndroidManifest.xml. A continuación, te proporciono los pasos necesarios:

En el archivo build.gradle del módulo de la aplicación, asegúrate de tener
diferentes valores para applicationId en las configuraciones de compilación.

Por ejemplo:

android {
    // ...

    defaultConfig {
        // ...
        applicationId "com.example.app1" // Nombre del paquete de la primera app
    }

    productFlavors {
        app2 {
            applicationId "com.example.app2" // Nombre del paquete de la segunda app
        }
    }
}

En el archivo AndroidManifest.xml, asegúrate de que el atributo package sea
diferente para cada aplicación. Puedes usar variables de resolución de recursos
(${applicationId}) para mantenerlo dinámico. Por ejemplo:

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="${applicationId}">
    <!-- ... -->
</manifest>

Modifica el nombre de la aplicación y el logo en el archivo
res/values/strings.xml y res/mipmap para cada aplicación. Por ejemplo, en
res/values/strings.xml, puedes agregar lo siguiente para cada aplicación:

<resources>
    <string name="app_name">Nombre de la primera app</string>
</resources>

Y en res/mipmap puedes tener diferentes archivos de ícono con nombres como
ic_launcher.png para cada aplicación.

Luego de realizar los cambios anteriores, genera los APK nuevamente para cada
aplicación utilizando las configuraciones de compilación adecuadas.

Con estos pasos, cada APK generado tendrá un nombre de paquete y atributos
diferentes, lo que permitirá que Android los trate como aplicaciones distintas.

Recuerda ajustar los nombres y paquetes según tus necesidades específicas para
las dos aplicaciones que deseas diferenciar.

Fuente
======

ChatGPT

==================================================================
File > Invalidate Caches / Restart" (Invalidar cachés / Reiniciar)
==================================================================

Ve a "File" en la barra de menú de Android Studio y selecciona "Invalidate
Caches / Restart" (Invalidar cachés / Reiniciar).

En Android Studio es una función que permite limpiar y reiniciar las cachés y
los archivos temporales generados por Android Studio. Al seleccionar esta
opción, se eliminan los archivos temporales y las cachés del IDE, lo que puede
ayudar a solucionar diversos problemas, como errores de compilación, problemas
de sincronización de Gradle y otros comportamientos inesperados.

Al seleccionar "Invalidate Caches / Restart", Android Studio se cerrará y
reiniciará automáticamente. Durante el reinicio, se eliminarán las cachés y los
archivos temporales, y se crearán nuevos cuando se inicie Android Studio
nuevamente.

Esta opción es útil cuando se experimentan problemas persistentes que podrían
estar relacionados con archivos temporales o cachés corruptas. Al invalidar las
cachés y reiniciar Android Studio, se proporciona un entorno limpio y se
resuelven posibles problemas relacionados con la configuración interna de
Android Studio.

Fuente
======

ChatGPT

====================
Build > Make Project
====================

La opción "Build > Make Project" en Android Studio compila todos los archivos
fuente de tu proyecto y genera los archivos binarios y recursos necesarios para
ejecutar tu aplicación en un dispositivo o emulador.

Cuando seleccionas "Build > Make Project", Android Studio realiza varias tareas:

Compilación del código fuente: Android Studio compila todos los archivos de
código fuente de tu proyecto, incluyendo archivos Kotlin, Java y otros recursos
como archivos XML y de diseño. Durante este proceso, el código fuente se
verifica en busca de errores de sintaxis y se genera código bytecode.

Generación de archivos binarios: Una vez que se ha compilado el código fuente,
Android Studio genera archivos binarios que se pueden ejecutar en dispositivos o
emuladores Android. Estos archivos binarios pueden incluir archivos APK
(Android Package) y archivos de biblioteca (.aar).

Procesamiento de recursos: Android Studio también procesa los recursos de tu
proyecto, como archivos de diseño XML, imágenes y otros archivos necesarios para
la interfaz de usuario y la funcionalidad de tu aplicación. Durante este
proceso, se pueden aplicar optimizaciones y transformaciones a los recursos para
adaptarlos a diferentes configuraciones de dispositivos y versiones de Android.

En resumen, la opción "Build > Make Project" en Android Studio realiza todas las
tareas necesarias para compilar y generar los archivos binarios y recursos
requeridos para ejecutar tu aplicación en un dispositivo o emulador Android.
Esto te permite verificar si hay errores de compilación y asegurarte de que tu
proyecto esté listo para su ejecución o distribución.

Fuente
======

ChatGPT